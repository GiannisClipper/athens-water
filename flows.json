[
    {
        "id": "6d278dbe6de7a110",
        "type": "tab",
        "label": "start",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9e38695607437acd",
        "type": "tab",
        "label": "admin",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b196196f1ccccbbb",
        "type": "tab",
        "label": "database",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d7c8565c02c92dbd",
        "type": "tab",
        "label": "weather initialization",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "369c55fe302803f7",
        "type": "tab",
        "label": "savings initialization",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "aba327fbb26c5653",
        "type": "tab",
        "label": "production initialization",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1dc82d7c84b0491f",
        "type": "tab",
        "label": "weather request",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "61022c35528d6ffa",
        "type": "tab",
        "label": "savings request",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d21f4bda462bb9a5",
        "type": "tab",
        "label": "production request",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a8ca5f37ab8664a6",
        "type": "tab",
        "label": "savings clustering",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b7ec5c0795a0393f",
        "type": "tab",
        "label": "production clustering",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "42c32db0efd3bac1",
        "type": "tab",
        "label": "water clustering",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "11322c65b3bfae17",
        "type": "tab",
        "label": "weather clustering",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1701ccc8d2838ab0",
        "type": "tab",
        "label": "reservoirs clustering",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bac88e4feb8bab3d",
        "type": "tab",
        "label": "rabbitmq publish",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6ae09610019427a1",
        "type": "tab",
        "label": "exchanges mgmt",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c24dbc290a05dc25",
        "type": "tab",
        "label": "vhost mgmt",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "61bc9ba532c143ca",
        "type": "tab",
        "label": "rabbitmq api",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7f69c48321b859d1",
        "type": "tab",
        "label": "users mgmt",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8bc24acff1041807",
        "type": "tab",
        "label": "permissions mgmt",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e6dee893d75f8487",
        "type": "tab",
        "label": "queues mgmt",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fc91aadf3d6bd939",
        "type": "tab",
        "label": "bindings mgmt",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "08eda6c1b66e16e5",
        "type": "tab",
        "label": "rabbitmq admin",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c05f2d05a65c769e",
        "type": "tab",
        "label": "rabbitmq register",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "caf565125e59062a",
        "type": "tab",
        "label": "rabbitmq unregister",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "746d8aad27723fd7",
        "type": "sqlitedb",
        "db": "~/.node-red/projects/athens-water/data/water.sqlite",
        "mode": "RWC"
    },
    {
        "id": "09a55da13a5eea8d",
        "type": "sqlitedb",
        "db": "athens-water.sqlite",
        "mode": "RWC"
    },
    {
        "id": "37e47c2be4e6d111",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "eydap.gr.crt",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "7b17c7ecbdcb71f0",
        "type": "amqp-broker",
        "name": "rabbitmq/labs",
        "host": "localhost",
        "port": "5672",
        "vhost": "labs",
        "tls": false,
        "credsFromSettings": false
    },
    {
        "id": "774630f253d36966",
        "type": "amqp-broker",
        "name": "",
        "host": "localhost",
        "port": "5672",
        "vhost": "athenswater",
        "tls": false,
        "credsFromSettings": false
    },
    {
        "id": "f95f44a518aa1c5e",
        "type": "amqp-broker",
        "name": "",
        "host": "localhost",
        "port": "5672",
        "vhost": "athenswater",
        "tls": false,
        "credsFromSettings": false
    },
    {
        "id": "9521260f5086eed6",
        "type": "inject",
        "z": "6d278dbe6de7a110",
        "name": "start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "b3ce7b20bc3e9643",
                "2b4ce55dfbdf7bf4"
            ]
        ]
    },
    {
        "id": "8c28ad9eafaca440",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 830,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "b3ce7b20bc3e9643",
        "type": "function",
        "z": "6d278dbe6de7a110",
        "name": "system configuration",
        "func": "const weatherUrl = \"https://archive-api.open-meteo.com/v1/archive?daily=weather_code,temperature_2m_min,temperature_2m_mean,temperature_2m_max,precipitation_sum,rain_sum,snowfall_sum&timezone=Europe/Athens&past_days=&latitude=&longitude=\";\nglobal.set( 'weatherUrl', weatherUrl );\n\nconst savingsUrl = \"https://www.eydap.gr/el/Controls/GeneralControls/SavingsDetails.aspx?DaysSpan=Day&Date=\";\nglobal.set( 'savingsUrl', savingsUrl );\n\nconst productionUrl = \"https://www.eydap.gr/el/Controls/GeneralControls/DrinkingWaterProductionDetails.aspx?DaysSpan=Day&Date=\";\nglobal.set( 'productionUrl', productionUrl );\n\nconst clusterLevels = [\n    { name: 'lower', color: 'LightPink' },\n    { name: 'low', color: 'Khaki' },\n    { name: 'mid', color: 'MediumAquaMarine' },\n    { name: 'high', color: 'DeepSkyBlue' },\n    { name: 'higher', color: 'DodgerBlue' }\n];\nglobal.set( 'clusterLevels', clusterLevels );\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 140,
        "wires": [
            [
                "53fa08e0fc78f899"
            ]
        ]
    },
    {
        "id": "203946c3788d69ed",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "b25dc8f8d8caacd2"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 180,
        "y": 340,
        "wires": [
            [
                "137b5884ab0ee30e"
            ]
        ]
    },
    {
        "id": "53fa08e0fc78f899",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "8a59f45495f1788b"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "22ae40ff7482ffd8"
            ]
        ]
    },
    {
        "id": "22ae40ff7482ffd8",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "e604ce7017cf9a7f"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 180,
        "y": 280,
        "wires": [
            [
                "203946c3788d69ed"
            ]
        ]
    },
    {
        "id": "b8a42aa1c8cdc8fe",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "19a9ec6c9f2b7b9e"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 520,
        "y": 340,
        "wires": [
            [
                "d3bef09c1516c13f"
            ]
        ]
    },
    {
        "id": "137b5884ab0ee30e",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "a3aeb5ed388a6be4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 520,
        "y": 220,
        "wires": [
            [
                "a7706206c42909fc"
            ]
        ]
    },
    {
        "id": "a7706206c42909fc",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "b3c337ed58cf68bd"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 530,
        "y": 280,
        "wires": [
            [
                "b8a42aa1c8cdc8fe"
            ]
        ]
    },
    {
        "id": "d3bef09c1516c13f",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "ccaf19d7f0d0e632"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 880,
        "y": 220,
        "wires": [
            [
                "984f5693c685252b"
            ]
        ]
    },
    {
        "id": "2b4ce55dfbdf7bf4",
        "type": "change",
        "z": "6d278dbe6de7a110",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'System state (' &\t'weatherLastDate: ' & $globalContext( 'weatherLastDate' )  & \t', savingsLastDate: ' & $globalContext( 'savingsLastDate' )  & \t', reservoirsClusteringDate: ' & $globalContext( 'reservoirsClusteringDate' )  & \t', productionLastDate: ' & $globalContext( 'productionLastDate' ) & \t', reservoirsClusteringDate: ' & $globalContext( 'reservoirsClusteringDate' )  & \t', savingsLastDate: ' & $globalContext( 'savingsLastDate' ) & \t', productionLastDate: ' & $globalContext( 'productionLastDate' ) & \t', weatherLastDate: ' & $globalContext( 'weatherLastDate' ) & \t', waterLastDate: ' & $globalContext( 'waterLastDate' ) & \t', commonLastDate: ' & $globalContext( 'commonLastDate' ) & \t')'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 60,
        "wires": [
            [
                "8c28ad9eafaca440"
            ]
        ]
    },
    {
        "id": "984f5693c685252b",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "825d7f4f827524c2"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 870,
        "y": 280,
        "wires": [
            [
                "b9f94398602677e8"
            ]
        ]
    },
    {
        "id": "b9f94398602677e8",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "a629a24ab77645c8"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 880,
        "y": 340,
        "wires": [
            [
                "d656a9f4dd3515b1"
            ]
        ]
    },
    {
        "id": "df32b1f787ac74b7",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "32699b29fe9fdf8a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 870,
        "y": 460,
        "wires": [
            [
                "b0b4dd2181b99a1a"
            ]
        ]
    },
    {
        "id": "d656a9f4dd3515b1",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "0718f521c7ca40aa"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 860,
        "y": 400,
        "wires": [
            [
                "df32b1f787ac74b7"
            ]
        ]
    },
    {
        "id": "b0b4dd2181b99a1a",
        "type": "function",
        "z": "6d278dbe6de7a110",
        "name": "if waiting data",
        "func": "const { timeRepr, daysDistance, nextDate } = global.get( 'dateHelpers' );\nconst today = timeRepr( new Date(), 'YYYY-MM-DD' );\n\nconst savingsLastDate = global.get( 'savingsLastDate' );\nconst productionLastDate = global.get( 'productionLastDate' );\nconst weatherLastDate = global.get( 'weatherLastDate' );\n\nif ( \n    daysDistance( savingsLastDate, today ) > 1 ||\n    daysDistance( productionLastDate, today ) > 1 ||\n    daysDistance( weatherLastDate, today ) > 1\n) {\n    return [ msg, null ];\n}\n\nreturn [ null, msg ];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 540,
        "wires": [
            [
                "b67f64674a8af7ba"
            ],
            [
                "b85c9585a110e6df"
            ]
        ]
    },
    {
        "id": "8a46e2de6bcd1993",
        "type": "delay",
        "z": "6d278dbe6de7a110",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 370,
        "y": 660,
        "wires": [
            [
                "53fa08e0fc78f899"
            ]
        ]
    },
    {
        "id": "b67f64674a8af7ba",
        "type": "change",
        "z": "6d278dbe6de7a110",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Data waiting...",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 620,
        "wires": [
            [
                "8c28ad9eafaca440",
                "8a46e2de6bcd1993"
            ]
        ]
    },
    {
        "id": "b85c9585a110e6df",
        "type": "change",
        "z": "6d278dbe6de7a110",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "No data waiting.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 620,
        "wires": [
            [
                "8c28ad9eafaca440",
                "1b01a0fe24d93130"
            ]
        ]
    },
    {
        "id": "1b01a0fe24d93130",
        "type": "delay",
        "z": "6d278dbe6de7a110",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "hours",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 620,
        "y": 660,
        "wires": [
            [
                "53fa08e0fc78f899"
            ]
        ]
    },
    {
        "id": "1cc0862b6d0ccf91",
        "type": "file",
        "z": "9e38695607437acd",
        "name": "write into log file",
        "filename": "athens-water.log",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 230,
        "y": 140,
        "wires": [
            [
                "e509d3deb26aca5f"
            ]
        ]
    },
    {
        "id": "409d2af6ef2b6869",
        "type": "function",
        "z": "9e38695607437acd",
        "name": "set log message",
        "func": "const { timeRepr } = global.get( 'dateHelpers' );\n\nconst time = timeRepr( new Date(), 'YYYY-MM-DD HH:MM:SS' );\n\nconst message = msg.payload;\n\nmsg.payload = `${time} ${message}`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 100,
        "wires": [
            [
                "1cc0862b6d0ccf91"
            ]
        ]
    },
    {
        "id": "992e1a45369732e3",
        "type": "link in",
        "z": "9e38695607437acd",
        "name": "link in logger",
        "links": [],
        "x": 55,
        "y": 100,
        "wires": [
            [
                "66dca8af6b89b230",
                "409d2af6ef2b6869"
            ]
        ]
    },
    {
        "id": "e509d3deb26aca5f",
        "type": "link out",
        "z": "9e38695607437acd",
        "name": "link out 3",
        "mode": "return",
        "links": [],
        "x": 405,
        "y": 140,
        "wires": []
    },
    {
        "id": "66dca8af6b89b230",
        "type": "debug",
        "z": "9e38695607437acd",
        "name": "debug logger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 220,
        "y": 60,
        "wires": []
    },
    {
        "id": "e03ebe6b9c1e43be",
        "type": "catch",
        "z": "9e38695607437acd",
        "name": "",
        "scope": [
            "1cc0862b6d0ccf91",
            "bc33fac1bfdac6f3"
        ],
        "uncaught": false,
        "x": 190,
        "y": 300,
        "wires": [
            [
                "e5dd25d01ed47935"
            ]
        ]
    },
    {
        "id": "e5dd25d01ed47935",
        "type": "change",
        "z": "9e38695607437acd",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 260,
        "wires": [
            [
                "7c9527a0cc39587f"
            ]
        ]
    },
    {
        "id": "7c9527a0cc39587f",
        "type": "debug",
        "z": "9e38695607437acd",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 200,
        "y": 220,
        "wires": []
    },
    {
        "id": "bc33fac1bfdac6f3",
        "type": "file",
        "z": "9e38695607437acd",
        "name": "delete log file",
        "filename": "athens-water.log",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 810,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "fd8fe79b83e94a46",
        "type": "inject",
        "z": "9e38695607437acd",
        "name": "trigger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 300,
        "wires": [
            [
                "bc33fac1bfdac6f3"
            ]
        ]
    },
    {
        "id": "ad8fd501b129cfec",
        "type": "debug",
        "z": "9e38695607437acd",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 140,
        "wires": []
    },
    {
        "id": "06c779112978aaa2",
        "type": "function",
        "z": "9e38695607437acd",
        "name": "read globals",
        "func": "msg.payload = {\n    weatherLastDate: global.get( 'weatherLastDate' ),\n    locations: global.get( 'locations' ),\n\n    savingsLastDate: global.get( 'savingsLastDate' ),\n    reservoirs: global.get( 'reservoirs' ),\n\n    productionLastDate: global.get( 'productionLastDate' ),\n    factories: global.get( 'factories' ),\n\n    reservoirsClusteringDate: global.get( 'reservoirsClusteringDate' ),\n    savingsClusteringDate: global.get('savingsClusteringDate'),\n    productionClusteringDate: global.get('productionClusteringDate'),\n    weatherClusteringDate: global.get('weatherClusteringDate'),\n    waterClusteringDate: global.get('waterClusteringDate'),\n\n    reservoirsClusteringResult: global.get('reservoirsClusteringResult'),\n    savingsClusteringResult: global.get('savingsClusteringResult'),\n    productionClusteringResult: global.get('productionClusteringResult'),\n    weatherClusteringResult: global.get('weatherClusteringResult'),\n    waterClusteringResult: global.get('waterClusteringResult'),\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 100,
        "wires": [
            [
                "ad8fd501b129cfec"
            ]
        ]
    },
    {
        "id": "b48859fe2d07cd72",
        "type": "inject",
        "z": "9e38695607437acd",
        "name": "trigger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 200,
        "wires": [
            [
                "0578fa751ff3e995"
            ]
        ]
    },
    {
        "id": "0578fa751ff3e995",
        "type": "function",
        "z": "9e38695607437acd",
        "name": "clean globals",
        "func": "// global.set( 'weatherExitLoop', undefined );\n// global.set( 'savingsExitLoop', undefined );\n// global.set( 'productionExitLoop', undefined );\n\nglobal.set( 'weatherLastDate', undefined );\nglobal.set( 'savingsLastDate', undefined );\nglobal.set( 'productionLastDate', undefined );\n\nglobal.set( 'reservoirsClusteringDate', undefined );\nglobal.set( 'savingsClusteringDate', undefined );\nglobal.set( 'productionClusteringDate', undefined );\nglobal.set( 'weatherClusteringDate', undefined );\nglobal.set( 'waterClusteringDate', undefined );\n\nglobal.set('reservoirsClusteringResult', undefined);\nglobal.set('savingsClusteringResult', undefined);\nglobal.set('productionClusteringResult', undefined);\nglobal.set('weatherClusteringResult', undefined);\nglobal.set('waterClusteringResult', undefined);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "63251ea6481c533d",
        "type": "inject",
        "z": "9e38695607437acd",
        "name": "trigger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 60,
        "wires": [
            [
                "06c779112978aaa2"
            ]
        ]
    },
    {
        "id": "4f48bf4d39cb2c86",
        "type": "sqlite",
        "z": "b196196f1ccccbbb",
        "mydb": "09a55da13a5eea8d",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "database",
        "x": 220,
        "y": 60,
        "wires": [
            [
                "798e2d4d2a82f43e"
            ]
        ]
    },
    {
        "id": "ab0e6d979d760a4a",
        "type": "link in",
        "z": "b196196f1ccccbbb",
        "name": "link in database",
        "links": [],
        "x": 65,
        "y": 60,
        "wires": [
            [
                "4f48bf4d39cb2c86"
            ]
        ]
    },
    {
        "id": "798e2d4d2a82f43e",
        "type": "link out",
        "z": "b196196f1ccccbbb",
        "name": "link out 4",
        "mode": "return",
        "links": [],
        "x": 615,
        "y": 60,
        "wires": []
    },
    {
        "id": "9e34cddef0583d1a",
        "type": "link call",
        "z": "b196196f1ccccbbb",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 870,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "8f9d3f4a82bebeac",
        "type": "catch",
        "z": "b196196f1ccccbbb",
        "name": "",
        "scope": [
            "4f48bf4d39cb2c86"
        ],
        "uncaught": false,
        "x": 850,
        "y": 180,
        "wires": [
            [
                "2895fae552596af5"
            ]
        ]
    },
    {
        "id": "2895fae552596af5",
        "type": "change",
        "z": "b196196f1ccccbbb",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 120,
        "wires": [
            [
                "9e34cddef0583d1a"
            ]
        ]
    },
    {
        "id": "8f50efdfff29c771",
        "type": "function",
        "z": "b196196f1ccccbbb",
        "name": "savings period30 query",
        "func": "const { startPeriod30 } = global.get('dateHelpers');\nconst date2 = msg.payload;\nconst date1 = startPeriod30(date2);\n\nconst [y1, m1, d1] = date1.split('-');\nconst [y2, m2, d2] = date2.split('-');\n\nconst period = `${d1}/${m1}-${d2}/${m2}`;\n\nconst query = y1 === y2\n?\n`\nSELECT \n    '${period}' AS period, \n    SUBSTR(date, 1, 4) AS year,\n    count(date) as days, \n    SUM(day_sum) AS period_sum, \n    AVG(day_sum) AS period_avg\nFROM\n(\n    SELECT \n        date, \n        SUM(quantity) AS day_sum, \n        avg(quantity) AS quantity\n    FROM savings\n    WHERE quantity > 0 \n    AND \n    (\n        (SUBSTR(date, 6, 2) = '${m1}' AND SUBSTR(date, 9, 2) >= '${d1}') \n        OR (SUBSTR(date, 6, 2) = '${m2}' AND SUBSTR(date, 9, 2) <= '${d2}')\n    )\n    GROUP BY date\n)\nGROUP BY SUBSTR(date, 1, 4)\n`\n:\n`\nSELECT \n    '${period}' AS period,\n    a.year AS aYear, b.year as bYear, a.year || '-' || b.year AS year,\n    a.days AS aDays, b.days as bDays, a.days + b.days AS days,\n    a.period_sum AS aPeriod_sum, b.period_sum AS bPeriod_sum, a.period_sum + b.period_sum AS period_sum,\n    ( a.period_sum + b.period_sum ) / ( a.days + b.days ) AS period_avg\nFROM\n(\n\tSELECT \n        SUBSTR(date,1,4) AS year, \n        count( date ) as days, \n        SUM( day_sum ) AS period_sum, \n        AVG( day_sum ) AS period_avg\n    FROM \n\t(\n\t\tSELECT \n            date, \n            SUM( quantity ) AS day_sum, \n            avg( quantity ) AS quantity \n\t\tFROM savings \n\t\tWHERE quantity > 0 AND SUBSTR(date,6,2) = '${m1}' AND SUBSTR(date,9,2) >= '${d1}'\n\t\tGROUP BY date\n\t)\n\tGROUP BY SUBSTR(date,1,4)\n) a\nJOIN\n(\n\tSELECT \n        SUBSTR(date,1,4) AS year, \n        count( date ) as days, \n        SUM( day_sum ) AS period_sum, \n        AVG( day_sum ) AS period_avg\n\tFROM \n\t(\n\t\tSELECT \n            date, \n            SUM( quantity ) AS day_sum, \n            avg( quantity ) AS quantity \n\t\tFROM savings \n\t\tWHERE quantity > 0 AND SUBSTR(date,6,2) = '${m2}' AND SUBSTR(date,9,2) <= '${d2}'\n\t\tGROUP BY date\n\t)\n\tGROUP BY SUBSTR(date,1,4)\n) b\nON CAST(a.year AS INT) = CAST(b.year AS INT)-1\n`\n;\n\nmsg.topic = query;\nmsg.payload = query;\nmsg.joinKey = 'savings';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 180,
        "wires": [
            [
                "798e2d4d2a82f43e"
            ]
        ]
    },
    {
        "id": "9478bf2057f22b65",
        "type": "link in",
        "z": "b196196f1ccccbbb",
        "name": "link in savings period30 query",
        "links": [],
        "x": 65,
        "y": 180,
        "wires": [
            [
                "8f50efdfff29c771"
            ]
        ]
    },
    {
        "id": "e816eacc62dca086",
        "type": "function",
        "z": "b196196f1ccccbbb",
        "name": "production period30 query",
        "func": "const { startPeriod30 } = global.get('dateHelpers');\nconst date2 = msg.payload;\nconst date1 = startPeriod30(date2);\n\nconst [y1, m1, d1] = date1.split('-');\nconst [y2, m2, d2] = date2.split('-');\n\nconst period = `${d1}/${m1}-${d2}/${m2}`;\n\nconst query = y1 === y2\n    ?\n    `\nSELECT \n    '${period}' AS period, \n    SUBSTR(date, 1, 4) AS year,\n    count(date) as days, \n    SUM(day_sum) AS period_sum, \n    AVG(day_sum) AS period_avg\nFROM\n(\n    SELECT \n        date, \n        SUM(quantity) AS day_sum, \n        avg(quantity) AS quantity\n    FROM production\n    WHERE quantity > 0 \n    AND \n    (\n        (SUBSTR(date, 6, 2) = '${m1}' AND SUBSTR(date, 9, 2) >= '${d1}') \n        OR (SUBSTR(date, 6, 2) = '${m2}' AND SUBSTR(date, 9, 2) <= '${d2}')\n    )\n    GROUP BY date\n)\nGROUP BY SUBSTR(date, 1, 4)\n`\n    :\n    `\nSELECT \n    '${period}' AS period,\n    a.year AS aYear, b.year as bYear, a.year || '-' || b.year AS year,\n    a.days AS aDays, b.days as bDays, a.days + b.days AS days,\n    a.period_sum AS aPeriod_sum, b.period_sum AS bPeriod_sum, a.period_sum + b.period_sum AS period_sum,\n    ( a.period_sum + b.period_sum ) / ( a.days + b.days ) AS period_avg\nFROM\n(\n\tSELECT \n        SUBSTR(date,1,4) AS year, \n        count( date ) as days, \n        SUM( day_sum ) AS period_sum, \n        AVG( day_sum ) AS period_avg\n    FROM \n\t(\n\t\tSELECT \n            date, \n            SUM( quantity ) AS day_sum, \n            avg( quantity ) AS quantity \n\t\tFROM production \n\t\tWHERE quantity > 0 AND SUBSTR(date,6,2) = '${m1}' AND SUBSTR(date,9,2) >= '${d1}'\n\t\tGROUP BY date\n\t)\n\tGROUP BY SUBSTR(date,1,4)\n) a\nJOIN\n(\n\tSELECT \n        SUBSTR(date,1,4) AS year, \n        count( date ) as days, \n        SUM( day_sum ) AS period_sum, \n        AVG( day_sum ) AS period_avg\n\tFROM \n\t(\n\t\tSELECT \n            date, \n            SUM( quantity ) AS day_sum, \n            avg( quantity ) AS quantity \n\t\tFROM production \n\t\tWHERE quantity > 0 AND SUBSTR(date,6,2) = '${m2}' AND SUBSTR(date,9,2) <= '${d2}'\n\t\tGROUP BY date\n\t)\n\tGROUP BY SUBSTR(date,1,4)\n) b\nON CAST(a.year AS INT) = CAST(b.year AS INT)-1\n`\n    ;\n\nmsg.topic = query;\nmsg.payload = query;\nmsg.joinKey = 'production';\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 240,
        "wires": [
            [
                "798e2d4d2a82f43e"
            ]
        ]
    },
    {
        "id": "5e618123b5224604",
        "type": "function",
        "z": "b196196f1ccccbbb",
        "name": "reservoirs period30 query",
        "func": "/*\nUPDATE reservoirs SET lat = 38.66, lon = 21.85 WHERE id == 1;\nUPDATE reservoirs SET lat = 38.16, lon = 23.90 WHERE id == 2;\nUPDATE reservoirs SET lat = 38.54, lon = 22.16 WHERE id == 3;\nUPDATE reservoirs SET lat = 38.40, lon = 23.28 WHERE id == 4;\n*/\n\nconst { startPeriod30 } = global.get('dateHelpers');\nconst date2 = msg.payload;\nconst date1 = startPeriod30(date2);\n\nconst [y1, m1, d1] = date1.split('-');\nconst [y2, m2, d2] = date2.split('-');\n\nconst period = `${d1}/${m1}-${d2}/${m2}`;\n\nconst query = y1 === y2\n    ?\n    `\nSELECT \n    '${period}' AS period, \n    reservoir_id, \n    SUBSTR(date, 1, 4) AS year,\n    count(date) as days, \n    SUM(day_sum) AS period_sum, \n    AVG(day_sum) AS period_avg\nFROM\n(\n    SELECT \n        reservoir_id,\n        date, \n        SUM(quantity) AS day_sum, \n        avg(quantity) AS quantity\n    FROM savings\n    WHERE quantity > 0 \n    AND \n    (\n        (SUBSTR(date, 6, 2) = '${m1}' AND SUBSTR(date, 9, 2) >= '${d1}') \n        OR (SUBSTR(date, 6, 2) = '${m2}' AND SUBSTR(date, 9, 2) <= '${d2}')\n    )\n    GROUP BY date, reservoir_id\n)\nGROUP BY SUBSTR(date, 1, 4), reservoir_id\n`\n    :\n    `\nSELECT \n    '${period}' AS period, a.reservoir_id AS reservoir_id,\n    a.year AS aYear, b.year as bYear, a.year || '-' || b.year AS year,\n    a.days AS aDays, b.days as bDays, a.days + b.days AS days,\n    a.period_sum AS aPeriod_sum, b.period_sum AS bPeriod_sum, a.period_sum + b.period_sum AS period_sum,\n    ( a.period_sum + b.period_sum ) / ( a.days + b.days ) AS period_avg\nFROM\n(\n\tSELECT \n        reservoir_id, \n        SUBSTR(date,1,4) AS year, \n        count( date ) as days, \n        SUM( day_sum ) AS period_sum, \n        AVG( day_sum ) AS period_avg\n    FROM \n\t(\n\t\tSELECT \n            reservoir_id, \n            date, \n            SUM( quantity ) AS day_sum, \n            avg( quantity ) AS quantity \n\t\tFROM savings \n\t\tWHERE quantity > 0 AND SUBSTR(date,6,2) = '${m1}' AND SUBSTR(date,9,2) >= '${d1}'\n\t\tGROUP BY date, reservoir_id\n\t)\n\tGROUP BY SUBSTR(date,1,4), reservoir_id\n) a\nJOIN\n(\n\tSELECT \n        reservoir_id, \n        SUBSTR(date,1,4) AS year, \n        count( date ) as days, \n        SUM( day_sum ) AS period_sum, \n        AVG( day_sum ) AS period_avg\n\tFROM \n\t(\n\t\tSELECT \n            reservoir_id, \n            date, \n            SUM( quantity ) AS day_sum, \n            avg( quantity ) AS quantity \n\t\tFROM savings \n\t\tWHERE quantity > 0 AND SUBSTR(date,6,2) = '${m2}' AND SUBSTR(date,9,2) <= '${d2}'\n\t\tGROUP BY date, reservoir_id\n\t)\n\tGROUP BY SUBSTR(date,1,4), reservoir_id\n) b\nON CAST(a.year AS INT) = CAST(b.year AS INT)-1 AND a.reservoir_id = b.reservoir_id\n`\n    ;\n\nmsg.topic = query;\nmsg.payload = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 120,
        "wires": [
            [
                "798e2d4d2a82f43e"
            ]
        ]
    },
    {
        "id": "931929f7293986d3",
        "type": "function",
        "z": "b196196f1ccccbbb",
        "name": "weather period30 query",
        "func": "const { startPeriod30 } = global.get('dateHelpers');\nconst date2 = msg.payload;\nconst date1 = startPeriod30(date2);\n\nconst [y1, m1, d1] = date1.split('-');\nconst [y2, m2, d2] = date2.split('-');\n\nconst period = `${d1}/${m1}-${d2}/${m2}`;\n\nconst query = y1 === y2\n    ?\n    `\nSELECT \n    '${period}' AS period,\n    SUBSTR(date, 1, 4) AS year,\n    SUM(precipitation_sum) AS precipitation_sum\nFROM weather \nWHERE (SUBSTR(date, 6, 2) = '${m1}' AND SUBSTR(date, 9, 2) >= '${d1}') \nOR (SUBSTR(date, 6, 2) = '${m2}' AND SUBSTR(date, 9, 2) <= '${d2}')\nGROUP BY SUBSTR(date, 1, 4)\n`\n    :\n    `\nSELECT\n    '${period}' AS period,\n    a.year AS aYear, b.year as bYear, a.year || '-' || b.year AS year,\n    a.precipitation_sum + b.precipitation_sum AS precipitation_sum\nFROM\n(\n    SELECT\n        '${period}' AS period,\n        SUBSTR(date, 1, 4) AS year,\n        SUM(precipitation_sum) AS precipitation_sum\n    FROM weather \n    WHERE SUBSTR(date, 6, 2) = '${m1}' AND SUBSTR(date, 9, 2) >= '${d1}'\n    GROUP BY SUBSTR(date, 1, 4)\n) a\nJOIN\n(\n    SELECT\n        '${period}' AS period,\n        SUBSTR(date, 1, 4) AS year,\n        SUM(precipitation_sum) AS precipitation_sum\n    FROM weather \n    WHERE SUBSTR(date, 6, 2) = '${m2}' AND SUBSTR(date, 9, 2) <= '${d2}'\n    GROUP BY SUBSTR(date, 1, 4)\n) b\nON CAST(a.year AS INT) = CAST(b.year AS INT)-1\n`\n    ;\n\nmsg.topic = query;\nmsg.payload = query;\nmsg.joinKey = 'weather';\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 300,
        "wires": [
            [
                "798e2d4d2a82f43e"
            ]
        ]
    },
    {
        "id": "e1cb944c3d6d1a78",
        "type": "link in",
        "z": "b196196f1ccccbbb",
        "name": "link in weather period30 query",
        "links": [],
        "x": 65,
        "y": 300,
        "wires": [
            [
                "931929f7293986d3"
            ]
        ]
    },
    {
        "id": "8438ec33152a3341",
        "type": "link in",
        "z": "b196196f1ccccbbb",
        "name": "link in production period30 query",
        "links": [],
        "x": 65,
        "y": 240,
        "wires": [
            [
                "e816eacc62dca086"
            ]
        ]
    },
    {
        "id": "024b62a1bbbeb6dd",
        "type": "link in",
        "z": "b196196f1ccccbbb",
        "name": "link in reservoirs period30 query",
        "links": [],
        "x": 65,
        "y": 120,
        "wires": [
            [
                "5e618123b5224604"
            ]
        ]
    },
    {
        "id": "0934098869fcb268",
        "type": "link out",
        "z": "d7c8565c02c92dbd",
        "name": "link out 1",
        "mode": "return",
        "links": [],
        "x": 795,
        "y": 340,
        "wires": []
    },
    {
        "id": "af66bd9217a38532",
        "type": "function",
        "z": "d7c8565c02c92dbd",
        "name": "select last date",
        "func": "const query = \"\\\n    SELECT MAX(date) as lastDate \\\n    FROM weather; \\\n\";\n\nmsg.topic = query;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 120,
        "wires": [
            [
                "d0991d10c4ce3042"
            ]
        ]
    },
    {
        "id": "cdb267699f7f8439",
        "type": "function",
        "z": "d7c8565c02c92dbd",
        "name": "set last date",
        "func": "const rows = msg.payload;\n\nif ( rows.length === 0 ) {\n    throw \"[ERROR] No previous weather data found.\"\n}\n\nconst { lastDate } = rows[ 0 ];\nglobal.set( 'weatherLastDate', lastDate );\n\nmsg.payload = `Initial weather last date: ${lastDate}`;\nmsg.topic = undefined;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 200,
        "wires": [
            [
                "eefbcba086f74da2",
                "3e3759343661ea8a"
            ]
        ]
    },
    {
        "id": "d0991d10c4ce3042",
        "type": "link call",
        "z": "d7c8565c02c92dbd",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 160,
        "wires": [
            [
                "cdb267699f7f8439"
            ]
        ]
    },
    {
        "id": "b25dc8f8d8caacd2",
        "type": "link in",
        "z": "d7c8565c02c92dbd",
        "name": "link in weather initialization",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "7ea925825ff95888"
            ]
        ]
    },
    {
        "id": "eefbcba086f74da2",
        "type": "link call",
        "z": "d7c8565c02c92dbd",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 850,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "3e3759343661ea8a",
        "type": "function",
        "z": "d7c8565c02c92dbd",
        "name": "select locations",
        "func": "const query = \"\\\n    SELECT id, name_el, name_en, lat, lon \\\n    FROM locations; \\\n\";\n\nmsg.topic = query;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 260,
        "wires": [
            [
                "8867e13fca9a584d"
            ]
        ]
    },
    {
        "id": "8867e13fca9a584d",
        "type": "link call",
        "z": "d7c8565c02c92dbd",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 300,
        "wires": [
            [
                "d094265b5a62e802"
            ]
        ]
    },
    {
        "id": "d094265b5a62e802",
        "type": "function",
        "z": "d7c8565c02c92dbd",
        "name": "set locations",
        "func": "const rows = msg.payload;\nglobal.set( 'locations', rows );\n\nmsg.payload = `Initial weather locations (${rows.length})`;\nmsg.topic = undefined;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 340,
        "wires": [
            [
                "eefbcba086f74da2",
                "0934098869fcb268"
            ]
        ]
    },
    {
        "id": "7ea925825ff95888",
        "type": "function",
        "z": "d7c8565c02c92dbd",
        "name": "if already done",
        "func": "const lastDate = global.get( 'weatherLastDate' );\nconst locations = global.get( 'locations' );\n\nif ( lastDate && locations ) {\n    msg.payload = \"Weather already initialized.\";\n    return [ msg, null ];\n}\n\nmsg.payload = \"Weather initialization.\";\nreturn [ null, msg ];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 60,
        "wires": [
            [
                "eefbcba086f74da2",
                "0934098869fcb268"
            ],
            [
                "eefbcba086f74da2",
                "af66bd9217a38532"
            ]
        ]
    },
    {
        "id": "f198c851a6a4ef4e",
        "type": "catch",
        "z": "d7c8565c02c92dbd",
        "name": "",
        "scope": [
            "7ea925825ff95888"
        ],
        "uncaught": false,
        "x": 830,
        "y": 160,
        "wires": [
            [
                "979e04fe375e210f"
            ]
        ]
    },
    {
        "id": "979e04fe375e210f",
        "type": "change",
        "z": "d7c8565c02c92dbd",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 120,
        "wires": [
            [
                "eefbcba086f74da2"
            ]
        ]
    },
    {
        "id": "2d93842496444882",
        "type": "link out",
        "z": "369c55fe302803f7",
        "name": "link out 15",
        "mode": "return",
        "links": [],
        "x": 795,
        "y": 340,
        "wires": []
    },
    {
        "id": "9b97c41f2e94dbd7",
        "type": "function",
        "z": "369c55fe302803f7",
        "name": "select last date",
        "func": "const query = \"\\\n    SELECT MAX(date) as lastDate \\\n    FROM savings; \\\n\";\n\nmsg.topic = query;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 120,
        "wires": [
            [
                "be738c7b07e56503"
            ]
        ]
    },
    {
        "id": "2e7b1715c5b1248d",
        "type": "function",
        "z": "369c55fe302803f7",
        "name": "set last date",
        "func": "const rows = msg.payload;\n\nif ( rows.length === 0 ) {\n    throw \"[ERROR] No previous savings data found.\"\n}\n\nconst { lastDate } = rows[ 0 ];\n\nglobal.set( 'savingsLastDate', lastDate );\n\nmsg.payload = `Initial savings last date: ${lastDate}`;\nmsg.topic = undefined;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 200,
        "wires": [
            [
                "bd670a6c945626b3",
                "4c0cdc252d4eb87f"
            ]
        ]
    },
    {
        "id": "be738c7b07e56503",
        "type": "link call",
        "z": "369c55fe302803f7",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 160,
        "wires": [
            [
                "2e7b1715c5b1248d"
            ]
        ]
    },
    {
        "id": "8a59f45495f1788b",
        "type": "link in",
        "z": "369c55fe302803f7",
        "name": "link in savings initialization",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "64214e1c1947fd0e"
            ]
        ]
    },
    {
        "id": "bd670a6c945626b3",
        "type": "link call",
        "z": "369c55fe302803f7",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 850,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "4c0cdc252d4eb87f",
        "type": "function",
        "z": "369c55fe302803f7",
        "name": "select reservoirs",
        "func": "const query = \"\\\n    SELECT id, name_el, name_en, lat, lon \\\n    FROM reservoirs; \\\n\";\n\nmsg.topic = query;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 260,
        "wires": [
            [
                "2afbe3378ab16db1"
            ]
        ]
    },
    {
        "id": "2afbe3378ab16db1",
        "type": "link call",
        "z": "369c55fe302803f7",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 300,
        "wires": [
            [
                "fc76c71878067fc5"
            ]
        ]
    },
    {
        "id": "fc76c71878067fc5",
        "type": "function",
        "z": "369c55fe302803f7",
        "name": "set reservoirs",
        "func": "const rows = msg.payload;\nglobal.set( 'reservoirs', rows );\n\nmsg.payload = `Initial reservoirs (${rows.length})`;\nmsg.topic = undefined;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 340,
        "wires": [
            [
                "bd670a6c945626b3",
                "2d93842496444882"
            ]
        ]
    },
    {
        "id": "64214e1c1947fd0e",
        "type": "function",
        "z": "369c55fe302803f7",
        "name": "if already done",
        "func": "const lastDate = global.get( 'savingsLastDate' );\nconst reservoirs = global.get( 'reservoirs' );\n\nif ( lastDate && reservoirs ) {\n    msg.payload = \"Savings already initialized.\";\n    return [ msg, null ];\n}\n\nmsg.payload = \"Savings initialization.\";\nreturn [ null, msg ];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 60,
        "wires": [
            [
                "bd670a6c945626b3",
                "2d93842496444882"
            ],
            [
                "bd670a6c945626b3",
                "9b97c41f2e94dbd7"
            ]
        ]
    },
    {
        "id": "0668960e97ea986a",
        "type": "catch",
        "z": "369c55fe302803f7",
        "name": "",
        "scope": [
            "64214e1c1947fd0e"
        ],
        "uncaught": false,
        "x": 830,
        "y": 160,
        "wires": [
            [
                "371b01f758992a25"
            ]
        ]
    },
    {
        "id": "371b01f758992a25",
        "type": "change",
        "z": "369c55fe302803f7",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 120,
        "wires": [
            [
                "bd670a6c945626b3"
            ]
        ]
    },
    {
        "id": "3dca08942f45f34b",
        "type": "link out",
        "z": "aba327fbb26c5653",
        "name": "link out 16",
        "mode": "return",
        "links": [],
        "x": 795,
        "y": 340,
        "wires": []
    },
    {
        "id": "6f07c6e7866c91db",
        "type": "function",
        "z": "aba327fbb26c5653",
        "name": "select last date",
        "func": "const query = \"\\\n    SELECT MAX(date) as lastDate \\\n    FROM production; \\\n\";\n\nmsg.topic = query;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 120,
        "wires": [
            [
                "7eb3697275baa550"
            ]
        ]
    },
    {
        "id": "85d5271db264427f",
        "type": "function",
        "z": "aba327fbb26c5653",
        "name": "set last date",
        "func": "const rows = msg.payload;\n\nif ( rows.length === 0 ) {\n    throw \"[ERROR] No previous production data found.\"\n}\n\nconst { lastDate } = rows[ 0 ];\nglobal.set( 'productionLastDate', lastDate );\n\nmsg.payload = `Initial production last date: ${lastDate}`;\nmsg.topic = undefined;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 200,
        "wires": [
            [
                "d32524de155786ef",
                "7b61b4f0c034ab72"
            ]
        ]
    },
    {
        "id": "7eb3697275baa550",
        "type": "link call",
        "z": "aba327fbb26c5653",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 160,
        "wires": [
            [
                "85d5271db264427f"
            ]
        ]
    },
    {
        "id": "e604ce7017cf9a7f",
        "type": "link in",
        "z": "aba327fbb26c5653",
        "name": "link in production initialization",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "0da6883389d1746f"
            ]
        ]
    },
    {
        "id": "d32524de155786ef",
        "type": "link call",
        "z": "aba327fbb26c5653",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 850,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "7b61b4f0c034ab72",
        "type": "function",
        "z": "aba327fbb26c5653",
        "name": "select factories",
        "func": "const query = \"\\\n    SELECT id, name_el, name_en, lat, lon \\\n    FROM factories; \\\n\";\n\nmsg.topic = query;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 260,
        "wires": [
            [
                "3ee08acb42f62f86"
            ]
        ]
    },
    {
        "id": "3ee08acb42f62f86",
        "type": "link call",
        "z": "aba327fbb26c5653",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 300,
        "wires": [
            [
                "ef91bc11b2cc144f"
            ]
        ]
    },
    {
        "id": "ef91bc11b2cc144f",
        "type": "function",
        "z": "aba327fbb26c5653",
        "name": "set factories",
        "func": "const rows = msg.payload;\nglobal.set( 'factories', rows );\n\nmsg.payload = `Initial factories (${rows.length})`;\nmsg.topic = undefined;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 340,
        "wires": [
            [
                "d32524de155786ef",
                "3dca08942f45f34b"
            ]
        ]
    },
    {
        "id": "0da6883389d1746f",
        "type": "function",
        "z": "aba327fbb26c5653",
        "name": "if already done",
        "func": "const lastDate = global.get( 'productionLastDate' );\nconst factories = global.get( 'factories' );\n\nif ( lastDate && factories ) {\n    msg.payload = \"Production already initialized.\";\n    return [ msg, null ];\n}\n\nmsg.payload = \"Production initialization.\";\nreturn [ null, msg ];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 60,
        "wires": [
            [
                "d32524de155786ef",
                "3dca08942f45f34b"
            ],
            [
                "d32524de155786ef",
                "6f07c6e7866c91db"
            ]
        ]
    },
    {
        "id": "df5fe4aaedba20c4",
        "type": "catch",
        "z": "aba327fbb26c5653",
        "name": "",
        "scope": [
            "0da6883389d1746f"
        ],
        "uncaught": false,
        "x": 830,
        "y": 160,
        "wires": [
            [
                "135eb59c810fe43e"
            ]
        ]
    },
    {
        "id": "135eb59c810fe43e",
        "type": "change",
        "z": "aba327fbb26c5653",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 120,
        "wires": [
            [
                "d32524de155786ef"
            ]
        ]
    },
    {
        "id": "19a9ec6c9f2b7b9e",
        "type": "link in",
        "z": "1dc82d7c84b0491f",
        "name": "link in weather request",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "2fb4cc5afb478162"
            ]
        ]
    },
    {
        "id": "2fb4cc5afb478162",
        "type": "function",
        "z": "1dc82d7c84b0491f",
        "name": "if already done",
        "func": "const { timeRepr, daysDistance, nextDate } = global.get( 'dateHelpers' );\nconst today = timeRepr( new Date(), 'YYYY-MM-DD' );\n\nconst lastDate = global.get( 'weatherLastDate' );\n\nif ( daysDistance( lastDate, today ) <= 1 ) {\n    msg.payload = \"Weather up to date.\"\n    return [ msg, null ];\n}\n\nconst nextLastDate = timeRepr( nextDate( lastDate ), 'YYYY-MM-DD' );\nmsg.payload = nextLastDate;\n\nreturn [ null, msg ];\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 60,
        "wires": [
            [
                "d30b920902618358",
                "1d13a35b302aaeed"
            ],
            [
                "206f7a0874dd9852"
            ]
        ]
    },
    {
        "id": "206f7a0874dd9852",
        "type": "function",
        "z": "1dc82d7c84b0491f",
        "name": "prepare url",
        "func": "const { timeRepr, daysDistance, nextDate } = global.get( 'dateHelpers' );\n\nconst locations = global.get( 'locations' );\nconst lat = locations.map( l => l.lat ).join( ',' );\nconst lon = locations.map( l => l.lon ).join( ',' );\n\nconst requestDate = msg.payload;\nconst today = timeRepr( new Date(), 'YYYY-MM-DD' );\nconst past_days = daysDistance( requestDate, today );\n\nlet url = global.get( 'weatherUrl' );\nurl = url.replace( \"past_days=\", `past_days=${past_days}` );\nurl = url.replace( \"latitude=\", `latitude=${lat}` );\nurl = url.replace( \"longitude=\", `longitude=${lon}` );\n\n// global.set( 'weatherLastDate', requestDate );\n\nmsg.url = url;\nmsg.requestParams = {\n    requestDate,\n    past_days,\n};\n\nmsg.payload = `(${requestDate}) => ${url}`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 140,
        "wires": [
            [
                "1d13a35b302aaeed",
                "40d5847be55c9a2c"
            ]
        ]
    },
    {
        "id": "40d5847be55c9a2c",
        "type": "http request",
        "z": "1dc82d7c84b0491f",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 210,
        "y": 180,
        "wires": [
            [
                "9eeb04756ec868d7"
            ]
        ]
    },
    {
        "id": "1d13a35b302aaeed",
        "type": "link call",
        "z": "1dc82d7c84b0491f",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 850,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "9eeb04756ec868d7",
        "type": "function",
        "z": "1dc82d7c84b0491f",
        "name": "parse response",
        "func": "const locations = global.get( 'locations' );\nconst { requestDate, past_days } = msg.requestParams;\n\n/*\nJSON RESPONSE LOOKS LIKE =>\n[{ \n  \"latitude\": 37.996483, \"longitude\": 23.709677, \"generationtime_ms\": 0.31006336212158203, \"utc_offset_seconds\": 10800, \"timezone\": \"Europe/Athens\", \"timezone_abbreviation\": \"EEST\", \"elevation\": 92.0, \n  \"daily_units\": { \"time\": \"iso8601\", \"weather_code\": \"wmo code\", \"temperature_2m_min\": \"°C\", \"temperature_2m_mean\": \"°C\", \"temperature_2m_max\": \"°C\", \"precipitation_sum\": \"mm\", \"rain_sum\": \"mm\", \"snowfall_sum\": \"cm\" }, \n  \"daily\": { \"time\": [\"2024-05-20\", \"2024-05-21\", \"2024-05-22\", \"2024-05-23\"], \"weather_code\": [1, 1, 1, null], \"temperature_2m_min\": [19.3, 19.5, 20.9, null], \"temperature_2m_mean\": [24.2, 24.1, null, null], \"temperature_2m_max\": [29.1, 29.2, 22.0, null], \"precipitation_sum\": [0.00, 0.00, null, null], \"rain_sum\": [0.00, 0.00, null, null], \"snowfall_sum\": [0.00, 0.00, null, null] }\n},{ \n  \"latitude\": 38.558872, \"longitude\": 22.377718, \"generationtime_ms\": 0.2340078353881836, \"utc_offset_seconds\": 10800, \"timezone\": \"Europe/Athens\", \"timezone_abbreviation\": \"EEST\", \"elevation\": 206.0, \"location_id\": 1, \n  \"daily_units\": { \"time\": \"iso8601\", \"weather_code\": \"wmo code\", \"temperature_2m_min\": \"°C\", \"temperature_2m_mean\": \"°C\", \"temperature_2m_max\": \"°C\", \"precipitation_sum\": \"mm\", \"rain_sum\": \"mm\", \"snowfall_sum\": \"cm\" }, \n  \"daily\": { \"time\": [\"2024-05-20\", \"2024-05-21\", \"2024-05-22\", \"2024-05-23\"], \"weather_code\": [51, 2, 0, null], \"temperature_2m_min\": [18.6, 18.9, 18.3, null], \"temperature_2m_mean\": [24.0, 24.4, null, null], \"temperature_2m_max\": [29.3, 30.9, 19.3, null], \"precipitation_sum\": [0.10, 0.00, null, null], \"rain_sum\": [0.10, 0.00, null, null], \"snowfall_sum\": [0.00, 0.00, null, null] } \n}]\n*/\n\nconst { statusCode, payload } = msg;\n\nif ( statusCode !== 200 ) {\n    throw `[ERROR] Status code ${statusCode}. ${payload}.`;\n}\n\nif ( payload.length !== locations.length ) {\n    throw `[ERROR] Response not matching locations length (${payload.length} vs ${locations.length}).`;\n}\n\nconst result = [];\nfor ( let i = 0; i < payload.length; i++ ) {\n    const location = locations[ i ];\n    const { time, \n        weather_code,\n        temperature_2m_min,\n        temperature_2m_mean,\n        temperature_2m_max,\n        precipitation_sum,\n        rain_sum,\n        snowfall_sum,\n    } = payload[ i ].daily;\n\n    for ( let j = 0; j < time.length; j++ ) {\n        if ( time[ j ] == requestDate ) {\n            if (\n                temperature_2m_min[ j ] == undefined || temperature_2m_min[ j ] === null &&\n                temperature_2m_mean[ j ] === undefined || temperature_2m_mean[ j ] === null &&\n                temperature_2m_max[ j ] === undefined || temperature_2m_max[ j ] === null &&\n                precipitation_sum[ j ] === undefined || precipitation_sum[ j ] === null\n            ) {\n                throw `[WARNING] Weather data not available yet (${requestDate}).`;\n            }\n\n            rain_sum[i] = rain_sum[i] === undefined ? null : rain_sum[ i ]; \n            snowfall_sum[i] = snowfall_sum[i] === undefined ? null : snowfall_sum[i]; \n\n            result.push( {\n                date: requestDate,\n                location,\n                weather_code: weather_code[ j ],\n                temperature_2m_min: temperature_2m_min[ j ],\n                temperature_2m_mean:temperature_2m_mean[ j ],\n                temperature_2m_max: temperature_2m_max[ j ],\n                precipitation_sum: precipitation_sum[ j ],\n                rain_sum: rain_sum[ i ],\n                snowfall_sum: snowfall_sum[ i ]\n            } );\n            break;\n        }\n    }\n    if ( result.length !== i + 1 ) {\n        throw `[ERROR] No of the responded times matching requested date (${requestDate}).`;\n    }\n}\n\nmsg.payload = result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 220,
        "wires": [
            [
                "c6ca5fcc2f3a3473"
            ]
        ]
    },
    {
        "id": "e83e73798f7932b9",
        "type": "catch",
        "z": "1dc82d7c84b0491f",
        "name": "",
        "scope": [
            "40d5847be55c9a2c",
            "9eeb04756ec868d7"
        ],
        "uncaught": false,
        "x": 830,
        "y": 180,
        "wires": [
            [
                "60c6b15d3afe44f8",
                "d30b920902618358"
            ]
        ]
    },
    {
        "id": "60c6b15d3afe44f8",
        "type": "change",
        "z": "1dc82d7c84b0491f",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 140,
        "wires": [
            [
                "1d13a35b302aaeed"
            ]
        ]
    },
    {
        "id": "c6ca5fcc2f3a3473",
        "type": "function",
        "z": "1dc82d7c84b0491f",
        "name": "insert weather",
        "func": "const { payload } = msg;\n\nconst rows = [];\nfor ( let row of payload ) {\n    const {\n        date,\n        location,\n        weather_code,\n        temperature_2m_min,\n        temperature_2m_mean,\n        temperature_2m_max,\n        precipitation_sum,\n        rain_sum,\n        snowfall_sum\n    } = row;\n\n    rows.push( `(\"${date}\",${location.id},${weather_code},${temperature_2m_min},${temperature_2m_mean},${temperature_2m_max},${precipitation_sum},${rain_sum},${snowfall_sum})` );\n}\n\nconst values = rows.join( ',' );\n\nconst query = `INSERT INTO weather (date,location_id,weather_code,temperature_2m_min,temperature_2m_mean,temperature_2m_max,precipitation_sum,rain_sum,snowfall_sum) VALUES ${values}`;\n\nmsg.topic = query;\nmsg.payload = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 300,
        "wires": [
            [
                "19824c02c61e45f3",
                "1d13a35b302aaeed"
            ]
        ]
    },
    {
        "id": "19824c02c61e45f3",
        "type": "link call",
        "z": "1dc82d7c84b0491f",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 340,
        "wires": [
            [
                "b313c853354a574e"
            ]
        ]
    },
    {
        "id": "b313c853354a574e",
        "type": "function",
        "z": "1dc82d7c84b0491f",
        "name": "update last date",
        "func": "const { requestDate } = msg.requestParams;\nglobal.set( 'weatherLastDate', requestDate );\n\nmsg.topic = undefined;\nmsg.requestParams = undefined;\nmsg.publish = undefined;\nmsg.payload = `Weather update (${requestDate})`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 380,
        "wires": [
            [
                "1d13a35b302aaeed",
                "d30b920902618358"
            ]
        ]
    },
    {
        "id": "d30b920902618358",
        "type": "link out",
        "z": "1dc82d7c84b0491f",
        "name": "link out 14",
        "mode": "return",
        "links": [],
        "x": 795,
        "y": 380,
        "wires": []
    },
    {
        "id": "a3aeb5ed388a6be4",
        "type": "link in",
        "z": "61022c35528d6ffa",
        "name": "link in savings request",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "c7c23ca1cd6e436a"
            ]
        ]
    },
    {
        "id": "c7c23ca1cd6e436a",
        "type": "function",
        "z": "61022c35528d6ffa",
        "name": "if already done",
        "func": "const { timeRepr, daysDistance, nextDate } = global.get( 'dateHelpers' );\nconst today = timeRepr( new Date(), 'YYYY-MM-DD' );\n\nconst lastDate = global.get( 'savingsLastDate' );\n\nif ( daysDistance( lastDate, today ) <= 1 ) {\n    msg.payload = \"Savings up to date.\"\n    return [ msg, null ];\n}\n\nconst nextLastDate = timeRepr( nextDate( lastDate ), 'YYYY-MM-DD' );\nmsg.payload = nextLastDate;\n\nreturn [ null, msg ];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 60,
        "wires": [
            [
                "4342dfe695e76b47",
                "47560b1a83aa9b08"
            ],
            [
                "ee151d8aa972eca3"
            ]
        ]
    },
    {
        "id": "ee151d8aa972eca3",
        "type": "function",
        "z": "61022c35528d6ffa",
        "name": "prepare url",
        "func": "const { timeRepr, daysDistance, nextDate } = global.get( 'dateHelpers' );\n\nconst requestDate = msg.payload;\nconst reverseDate = requestDate.split( '-' ).reverse().join( '-' );\n\nconst url = global.get( 'savingsUrl' ) + reverseDate;\n\nmsg.url = url;\nmsg.requestParams = {\n    requestDate,\n};\n\nmsg.payload = `(${requestDate}) => ${url}`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 140,
        "wires": [
            [
                "47560b1a83aa9b08",
                "d7b103a6c1f51e56"
            ]
        ]
    },
    {
        "id": "d7b103a6c1f51e56",
        "type": "http request",
        "z": "61022c35528d6ffa",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "37e47c2be4e6d111",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 210,
        "y": 220,
        "wires": [
            [
                "704eed10a1bf43df"
            ]
        ]
    },
    {
        "id": "47560b1a83aa9b08",
        "type": "link call",
        "z": "61022c35528d6ffa",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 850,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "704eed10a1bf43df",
        "type": "function",
        "z": "61022c35528d6ffa",
        "name": "parse response",
        "func": "const reservoirs = global.get( 'reservoirs' );\nconst { requestDate } = msg.requestParams;\n\n/*\nHTML RESPONSE LOOKS LIKE =>\n<table cellspacing=\"0\" rules=\"all\" border=\"1\" id=\"grdSavings\" style=\"width:910px;border-collapse:collapse;\">\n  <tr>\n    <th scope=\"col\">Ημερομηνία</th><th scope=\"col\">ΕΥΗΝΟΣ</th><th scope=\"col\">ΜΑΡΑΘΩΝΑΣ</th><th scope=\"col\">ΜΟΡΝΟΣ</th><th scope=\"col\">ΥΛΙΚΗ</th><th scope=\"col\">ΣΥΝΟΛΟ</th>\n  </tr><tr>\n    <td>22/05/2024</td><td>67.414.000 </td><td>26.047.000 </td><td>442.235.000 </td><td>338.832.000 </td><td>874.528.000 </td>\n  </tr><tr>\n    <td>23/05/2024</td><td>67.414.000 </td><td>26.132.000 </td><td>441.128.000 </td><td>338.644.000 </td><td>873.318.000 </td>\n  </tr>\n</table>\n*/\n\nconst { statusCode, payload } = msg;\n\nif ( statusCode !== 200 ) {\n    throw `[ERROR] Status code ${statusCode}. ${payload}.`;\n}\n\nconst html = payload;\nconst table = html.split(\"<table\")[1];\n\nconst rows = table.match(/(<tr)(.*?)(<\\/tr>)/gs);\n\nfor (let i = 0; i < rows.length; i++) {\n\n    if (i > 0) { // to skip labels\n        let values = rows[i].match( /(<td>)(.*?)(<\\/td>)/gs ); // s = including new line in chars\n        values = values.map( v => v.replace( \"<td>\", \"\" ).replace( \"</td>\", \"\" ).trim() );\n        values = values.map( v => v.replaceAll( \".\", \"\" ) ); // 1.234.000 => 1234000\n\n        values = values.map( v => Number.isNaN(parseInt(v)) ? '0' : v );\n\n        const [ dd, mm, yyyy ] = values[ 0 ].split( '/' );\n        const date = `${yyyy}-${mm}-${dd}`;\n\n        if ( date === requestDate ) {\n\n            values = values.slice( 1, -1 ); // exclude date and total\n            // node.warn( values );\n\n            if ( values.length !== reservoirs.length ) {\n                throw `[ERROR] Response not matching reservoirs length (${values.length} vs ${reservoirs.length}).`;\n            }\n\n            const result = [];\n            for ( let j = 0; j < values.length; j++ ) {\n\n                const reservoir = reservoirs[ j ];\n                result.push( {\n                    date,\n                    reservoir,\n                    quantity: values[ j ]\n                \n                } );\n            }\n            msg.payload = result;\n            return msg;\n        }\n    }\n}\n\nthrow `[WARNING] Savings data not available yet (${requestDate}).`;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 260,
        "wires": [
            [
                "a076f80433e32a0f"
            ]
        ]
    },
    {
        "id": "7977c8012078d6f0",
        "type": "catch",
        "z": "61022c35528d6ffa",
        "name": "",
        "scope": [
            "d7b103a6c1f51e56",
            "704eed10a1bf43df"
        ],
        "uncaught": false,
        "x": 830,
        "y": 180,
        "wires": [
            [
                "2eac0f1e97633ab0",
                "4342dfe695e76b47"
            ]
        ]
    },
    {
        "id": "2eac0f1e97633ab0",
        "type": "change",
        "z": "61022c35528d6ffa",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 140,
        "wires": [
            [
                "47560b1a83aa9b08"
            ]
        ]
    },
    {
        "id": "a076f80433e32a0f",
        "type": "function",
        "z": "61022c35528d6ffa",
        "name": "insert savings",
        "func": "const { payload } = msg;\n\nconst rows = [];\nfor ( let row of payload ) {\n    const { date, reservoir, quantity } = row;\n\n    rows.push( `(\"${date}\",${reservoir.id},${quantity})` );\n}\n\nconst values = rows.join( ',' );\n\nconst query = `INSERT INTO savings (date,reservoir_id,quantity) VALUES ${values}`;\n\nmsg.topic = query;\nmsg.payload = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 340,
        "wires": [
            [
                "68451f8805a4ded4",
                "47560b1a83aa9b08"
            ]
        ]
    },
    {
        "id": "68451f8805a4ded4",
        "type": "link call",
        "z": "61022c35528d6ffa",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 380,
        "wires": [
            [
                "53d7020558aeb4ee"
            ]
        ]
    },
    {
        "id": "53d7020558aeb4ee",
        "type": "function",
        "z": "61022c35528d6ffa",
        "name": "update last date",
        "func": "const { requestDate } = msg.requestParams;\nglobal.set( 'savingsLastDate', requestDate );\n\nmsg.topic = undefined;\nmsg.requestParams = undefined;\nmsg.payload = `Savings update (${requestDate})`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 420,
        "wires": [
            [
                "47560b1a83aa9b08",
                "4342dfe695e76b47"
            ]
        ]
    },
    {
        "id": "4342dfe695e76b47",
        "type": "link out",
        "z": "61022c35528d6ffa",
        "name": "link out 17",
        "mode": "return",
        "links": [],
        "x": 795,
        "y": 420,
        "wires": []
    },
    {
        "id": "649a9d800333157e",
        "type": "comment",
        "z": "61022c35528d6ffa",
        "name": "about ca certificate",
        "info": "  SPECIFIC SETTINGS IN NODE-RED:\n  in settings.js => process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = 0\n  in http-request => tick \"Enable secure (SSL/TLS) connection\" > create new TLS Config > upload CA certicicate > uncheck \"Verify server certificate\".\n  based on: unable to verify the first certificate in Node-Red\n  https://stackoverflow.com/questions/42983635/error-unable-to-verify-the-first-certificate-in-node-red/42984958#42984958\n\n  GENERAL INFO USING NODEJS:\n  fetch( \"https://eydap.gr\" );\n  error: unable to verify the first certificate ('UNABLE_TO_VERIFY_LEAF_SIGNATURE')\n  solution: process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = 0;\n  Warning: Setting the NODE_TLS_REJECT_UNAUTHORIZED environment variable to '0' makes TLS connections and HTTPS requests insecure by disabling certificate verification\n  based on: Node Fetch Request Fails on Server: Unable to Get Local Issuer Certificate\n  https://stackoverflow.com/questions/51995925/node-fetch-request-fails-on-server-unable-to-get-local-issuer-certificate\n\n  curl -v https://www.eydap.gr\n  error: unable to get local issuer certificate\n  solution: chrome > https://eydap.gr > connection is secure > certificate is valid > details > export (crt file)\n  (create a backup of /etc/ssl/certs/ca-certificates.crt)\n  append crt file content in /etc/ssl/certs/ca-certificates.crt\n",
        "x": 230,
        "y": 180,
        "wires": []
    },
    {
        "id": "b3c337ed58cf68bd",
        "type": "link in",
        "z": "d21f4bda462bb9a5",
        "name": "link in production request",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "722008d1f8785f62"
            ]
        ]
    },
    {
        "id": "722008d1f8785f62",
        "type": "function",
        "z": "d21f4bda462bb9a5",
        "name": "if already done",
        "func": "const { timeRepr, daysDistance, nextDate } = global.get( 'dateHelpers' );\nconst today = timeRepr( new Date(), 'YYYY-MM-DD' );\n\nconst lastDate = global.get( 'productionLastDate' );\n\nif ( daysDistance( lastDate, today ) <= 1 ) {\n    msg.payload = \"Production up to date.\"\n    return [ msg, null ];\n}\n\nconst nextLastDate = timeRepr( nextDate( lastDate ), 'YYYY-MM-DD' );\nmsg.payload = nextLastDate;\n\nreturn [ null, msg ];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 60,
        "wires": [
            [
                "49ebaced1967f034",
                "0c42eba578cf0c01"
            ],
            [
                "ca1ff0ef5d5f0a54"
            ]
        ]
    },
    {
        "id": "ca1ff0ef5d5f0a54",
        "type": "function",
        "z": "d21f4bda462bb9a5",
        "name": "prepare url",
        "func": "const { timeRepr, daysDistance, nextDate } = global.get( 'dateHelpers' );\n\nconst requestDate = msg.payload;\nconst reverseDate = requestDate.split( '-' ).reverse().join( '-' );\n\nconst url = global.get( 'productionUrl' ) + reverseDate;\n\nmsg.url = url;\nmsg.requestParams = {\n    requestDate,\n};\n\nmsg.payload = `(${requestDate}) => ${url}`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 140,
        "wires": [
            [
                "0c42eba578cf0c01",
                "ed65cfa6e69ecc57"
            ]
        ]
    },
    {
        "id": "ed65cfa6e69ecc57",
        "type": "http request",
        "z": "d21f4bda462bb9a5",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "37e47c2be4e6d111",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 210,
        "y": 220,
        "wires": [
            [
                "382e19da3f5505a7"
            ]
        ]
    },
    {
        "id": "0c42eba578cf0c01",
        "type": "link call",
        "z": "d21f4bda462bb9a5",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 850,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "382e19da3f5505a7",
        "type": "function",
        "z": "d21f4bda462bb9a5",
        "name": "parse response",
        "func": "const factories = global.get( 'factories' );\nconst { requestDate } = msg.requestParams;\n\n/*\nHTML RESPONSE LOOKS LIKE =>\n<table cellspacing=\"0\" rules=\"all\" border=\"1\" id=\"grdSavings\" style=\"width:910px;border-collapse:collapse;\">\n  <tr>\n    <th scope=\"col\">Ημερομηνία</th><th scope=\"col\">ΑΣΠΡΟΠΥΡΓΟΣ</th><th scope=\"col\">ΓΑΛΑΤΣΙ</th><th scope=\"col\">ΚΙΟΥΡΚΑ</th><th scope=\"col\">ΜΕΝΙΔΙ</th><th scope=\"col\">ΣΥΝΟΛΟ</th>\n  </tr><tr>\n    <td>21/05/2024</td><td>131.020 </td><td>334.564 </td><td>139.389 </td><td>555.391 </td><td>1.160.364 </td>\n  </tr><tr>\n    <td>22/05/2024</td><td>132.730 </td><td>342.627 </td><td>124.210 </td><td>582.403 </td><td>1.181.970 </td>\n  </tr>\n</table>\n*/\n\nconst { statusCode, payload } = msg;\n\nif ( statusCode !== 200 ) {\n    throw `[ERROR] Status code ${statusCode}. ${payload}.`;\n}\n\nconst html = payload;\nconst table = html.split(\"<table\")[1];\n\nconst rows = table.match(/(<tr)(.*?)(<\\/tr>)/gs);\n\nfor (let i = 0; i < rows.length; i++) {\n\n    if (i > 0) { // to skip labels\n        let values = rows[i].match( /(<td>)(.*?)(<\\/td>)/gs ); // s = including new line in chars\n        values = values.map( v => v.replace( \"<td>\", \"\" ).replace( \"</td>\", \"\" ).trim() );\n        values = values.map( v => v.replaceAll( \".\", \"\" ) ); // 1.234.000 => 1234000\n\n        values = values.map( v => Number.isNaN(parseInt(v)) ? '0' : v );\n\n        const [ dd, mm, yyyy ] = values[ 0 ].split( '/' );\n        const date = `${yyyy}-${mm}-${dd}`;\n\n        if ( date === requestDate ) {\n\n            values = values.slice( 1, -1 ); // exclude date and total\n            // node.warn( values );\n\n            if ( values.length !== factories.length ) {\n                throw `[ERROR] Response not matching factories length (${values.length} vs ${factories.length}).`;\n            }\n\n            const result = [];\n            for ( let j = 0; j < values.length; j++ ) {\n\n                const factory = factories[ j ];\n                result.push( {\n                    date,\n                    factory,\n                    quantity: values[ j ]\n                \n                } );\n            }\n            msg.payload = result;\n            return msg;\n        }\n    }\n}\n\nthrow `[WARNING] Production data not available yet (${requestDate}).`;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 260,
        "wires": [
            [
                "15d8990b4f617272"
            ]
        ]
    },
    {
        "id": "51fe3a33ce3bb6f9",
        "type": "catch",
        "z": "d21f4bda462bb9a5",
        "name": "",
        "scope": [
            "ed65cfa6e69ecc57",
            "382e19da3f5505a7"
        ],
        "uncaught": false,
        "x": 830,
        "y": 160,
        "wires": [
            [
                "14e5d743cc9f4824",
                "49ebaced1967f034"
            ]
        ]
    },
    {
        "id": "14e5d743cc9f4824",
        "type": "change",
        "z": "d21f4bda462bb9a5",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 120,
        "wires": [
            [
                "0c42eba578cf0c01"
            ]
        ]
    },
    {
        "id": "15d8990b4f617272",
        "type": "function",
        "z": "d21f4bda462bb9a5",
        "name": "insert production",
        "func": "const { payload } = msg;\n\nconst rows = [];\nfor ( let row of payload ) {\n    const { date, factory, quantity } = row;\n\n    rows.push( `(\"${date}\",${factory.id},${quantity})` );\n}\n\nconst values = rows.join( ',' );\n\nconst query = `INSERT INTO production (date,factory_id,quantity) VALUES ${values}`;\n\nmsg.topic = query;\nmsg.payload = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 340,
        "wires": [
            [
                "45074707b3343bdf",
                "0c42eba578cf0c01"
            ]
        ]
    },
    {
        "id": "45074707b3343bdf",
        "type": "link call",
        "z": "d21f4bda462bb9a5",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 380,
        "wires": [
            [
                "150def491b82fe85"
            ]
        ]
    },
    {
        "id": "150def491b82fe85",
        "type": "function",
        "z": "d21f4bda462bb9a5",
        "name": "update last date",
        "func": "const { requestDate } = msg.requestParams;\nglobal.set( 'productionLastDate', requestDate );\n\nmsg.topic = undefined;\nmsg.requestParams = undefined;\nmsg.payload = `Production update (${requestDate})`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 420,
        "wires": [
            [
                "0c42eba578cf0c01",
                "49ebaced1967f034"
            ]
        ]
    },
    {
        "id": "49ebaced1967f034",
        "type": "link out",
        "z": "d21f4bda462bb9a5",
        "name": "link out 18",
        "mode": "return",
        "links": [],
        "x": 795,
        "y": 420,
        "wires": []
    },
    {
        "id": "c1940731334384fb",
        "type": "comment",
        "z": "d21f4bda462bb9a5",
        "name": "about ca certificate",
        "info": "  SPECIFIC SETTINGS IN NODE-RED:\n  in settings.js => process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = 0\n  in http-request => tick \"Enable secure (SSL/TLS) connection\" > create new TLS Config > upload CA certicicate > uncheck \"Verify server certificate\".\n  based on: unable to verify the first certificate in Node-Red\n  https://stackoverflow.com/questions/42983635/error-unable-to-verify-the-first-certificate-in-node-red/42984958#42984958\n\n  GENERAL INFO USING NODEJS:\n  fetch( \"https://eydap.gr\" );\n  error: unable to verify the first certificate ('UNABLE_TO_VERIFY_LEAF_SIGNATURE')\n  solution: process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = 0;\n  Warning: Setting the NODE_TLS_REJECT_UNAUTHORIZED environment variable to '0' makes TLS connections and HTTPS requests insecure by disabling certificate verification\n  based on: Node Fetch Request Fails on Server: Unable to Get Local Issuer Certificate\n  https://stackoverflow.com/questions/51995925/node-fetch-request-fails-on-server-unable-to-get-local-issuer-certificate\n\n  curl -v https://www.eydap.gr\n  error: unable to get local issuer certificate\n  solution: chrome > https://eydap.gr > connection is secure > certificate is valid > details > export (crt file)\n  (create a backup of /etc/ssl/certs/ca-certificates.crt)\n  append crt file content in /etc/ssl/certs/ca-certificates.crt\n",
        "x": 230,
        "y": 180,
        "wires": []
    },
    {
        "id": "c7ef80a6ea38e846",
        "type": "debug",
        "z": "a8ca5f37ab8664a6",
        "name": "debug 28",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 180,
        "wires": []
    },
    {
        "id": "266b71e4d0db2853",
        "type": "link call",
        "z": "a8ca5f37ab8664a6",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 890,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "193e53da1dcf8019",
        "type": "link out",
        "z": "a8ca5f37ab8664a6",
        "name": "link out 22",
        "mode": "return",
        "links": [],
        "x": 835,
        "y": 60,
        "wires": []
    },
    {
        "id": "1df0e0ece91af8f3",
        "type": "link call",
        "z": "a8ca5f37ab8664a6",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 260,
        "y": 220,
        "wires": [
            [
                "f444e4306180eff9"
            ]
        ]
    },
    {
        "id": "f444e4306180eff9",
        "type": "function",
        "z": "a8ca5f37ab8664a6",
        "name": "savings clustering",
        "func": "const { makeClusters, matchCluster } = global.get( 'clusterHelpers' );\nconst clusterLevels = global.get( 'clusterLevels' );\nconst data = msg.payload;\n\nconst period = data[ data.length - 1 ].period;\nconst value = data[ data.length - 1 ].period_avg;\nconst values = data.map( x => [ x.period_avg ] );\nconst clusters = makeClusters( values );\n// node.warn( clusters );\nconst matchingClusterIndex = matchCluster( clusters, value );\n\nconst levels = clusterLevels.map( x => x.name );\nlevels[ matchingClusterIndex ] = levels[ matchingClusterIndex ].toUpperCase();\nconst level = levels.join( ' ' );\nconst valueRepr = new Intl.NumberFormat().format( Math.trunc( value ) );\n\nconst result = {\n    period,\n    savingsAvg: value,\n    savingsRepr: `${valueRepr} cubic meters`,\n    level\n};\n\nglobal.set('savingsClusteringResult', result);\n\nmsg.topic = undefined;\nmsg.payload = result;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 280,
        "wires": [
            [
                "e3714ab3c2eca9bf",
                "c7ef80a6ea38e846"
            ]
        ]
    },
    {
        "id": "f80e433eb3f5cbe9",
        "type": "change",
        "z": "a8ca5f37ab8664a6",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'Savings clustering (' & msg.payload & ')'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 120,
        "wires": [
            [
                "266b71e4d0db2853"
            ]
        ]
    },
    {
        "id": "825d7f4f827524c2",
        "type": "link in",
        "z": "a8ca5f37ab8664a6",
        "name": "link in savings clustering",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "195d01cff4a595f0"
            ]
        ]
    },
    {
        "id": "ef61379ce7dc460d",
        "type": "link call",
        "z": "a8ca5f37ab8664a6",
        "name": "",
        "links": [
            "9478bf2057f22b65"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 180,
        "wires": [
            [
                "266b71e4d0db2853",
                "1df0e0ece91af8f3"
            ]
        ]
    },
    {
        "id": "adb61f3a0489986d",
        "type": "inject",
        "z": "a8ca5f37ab8664a6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2024-05-23",
        "payloadType": "str",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "ef61379ce7dc460d"
            ]
        ]
    },
    {
        "id": "02766e51d35f3d41",
        "type": "inject",
        "z": "a8ca5f37ab8664a6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2024-01-05",
        "payloadType": "str",
        "x": 130,
        "y": 480,
        "wires": [
            [
                "ef61379ce7dc460d"
            ]
        ]
    },
    {
        "id": "195d01cff4a595f0",
        "type": "function",
        "z": "a8ca5f37ab8664a6",
        "name": "if already done",
        "func": "const savingsClusteringDate = global.get( 'savingsClusteringDate' );\nconst lastDate = global.get('savingsLastDate');\n\nif (savingsClusteringDate === lastDate) {\n    return [ msg, null ];\n}\n\nglobal.set('savingsClusteringDate', lastDate);\n\nmsg.payload = lastDate;\nreturn [null, msg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 60,
        "wires": [
            [
                "193e53da1dcf8019"
            ],
            [
                "f80e433eb3f5cbe9",
                "ef61379ce7dc460d"
            ]
        ]
    },
    {
        "id": "e155bbefca1f3401",
        "type": "link call",
        "z": "a8ca5f37ab8664a6",
        "name": "",
        "links": [
            "fc7aaaa19c985f47"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 380,
        "wires": [
            [
                "193e53da1dcf8019"
            ]
        ]
    },
    {
        "id": "e3714ab3c2eca9bf",
        "type": "function",
        "z": "a8ca5f37ab8664a6",
        "name": "prepare publish",
        "func": "const savings = msg.payload;\nmsg.payload = { savings };\nmsg.routingKey = \"savings\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 340,
        "wires": [
            [
                "e155bbefca1f3401"
            ]
        ]
    },
    {
        "id": "e9db637dda81a734",
        "type": "debug",
        "z": "b7ec5c0795a0393f",
        "name": "debug 29",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 180,
        "wires": []
    },
    {
        "id": "313ab92c54b8b2c3",
        "type": "link call",
        "z": "b7ec5c0795a0393f",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 890,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "3a90528d185d0347",
        "type": "link out",
        "z": "b7ec5c0795a0393f",
        "name": "link out 23",
        "mode": "return",
        "links": [],
        "x": 835,
        "y": 60,
        "wires": []
    },
    {
        "id": "8226ab4353aadeb1",
        "type": "link call",
        "z": "b7ec5c0795a0393f",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 260,
        "y": 220,
        "wires": [
            [
                "9242e2dffccfb7fb"
            ]
        ]
    },
    {
        "id": "9242e2dffccfb7fb",
        "type": "function",
        "z": "b7ec5c0795a0393f",
        "name": "production clustering",
        "func": "const { makeClusters, matchCluster } = global.get( 'clusterHelpers' );\nconst clusterLevels = global.get( 'clusterLevels' );\nconst data = msg.payload;\n\nconst period = data[ data.length - 1 ].period;\nconst value = data[ data.length - 1 ].period_avg;\nconst values = data.map( x => [ x.period_avg ] );\nconst clusters = makeClusters( values );\n// node.warn( clusters );\nconst matchingClusterIndex = matchCluster( clusters, value );\n\nconst levels = clusterLevels.map( x => x.name );\nlevels[ matchingClusterIndex ] = levels[ matchingClusterIndex ].toUpperCase();\nconst level = levels.join( ' ' );\nconst valueRepr = new Intl.NumberFormat().format( Math.trunc( value ) );\n\nconst result = {\n    period,\n    productionAvg: value,\n    productionRepr: `${valueRepr} cubic meters`,\n    level\n};\n\nglobal.set( 'productionClusteringResult', result );\n\nmsg.topic = undefined;\nmsg.payload = result;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 280,
        "wires": [
            [
                "5be46b2aceca3b99",
                "e9db637dda81a734"
            ]
        ]
    },
    {
        "id": "6c30f7113ddbe4b3",
        "type": "change",
        "z": "b7ec5c0795a0393f",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'Production clustering (' & msg.payload & ')'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 120,
        "wires": [
            [
                "313ab92c54b8b2c3"
            ]
        ]
    },
    {
        "id": "a629a24ab77645c8",
        "type": "link in",
        "z": "b7ec5c0795a0393f",
        "name": "link in production clustering",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "1a6118c29bd78b28"
            ]
        ]
    },
    {
        "id": "2e929dca24e77fa9",
        "type": "link call",
        "z": "b7ec5c0795a0393f",
        "name": "",
        "links": [
            "8438ec33152a3341"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 180,
        "wires": [
            [
                "8226ab4353aadeb1",
                "313ab92c54b8b2c3"
            ]
        ]
    },
    {
        "id": "c1a67434013bb48a",
        "type": "inject",
        "z": "b7ec5c0795a0393f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2024-05-23",
        "payloadType": "str",
        "x": 130,
        "y": 540,
        "wires": [
            [
                "2e929dca24e77fa9"
            ]
        ]
    },
    {
        "id": "c7cc759199f90113",
        "type": "inject",
        "z": "b7ec5c0795a0393f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2024-01-05",
        "payloadType": "str",
        "x": 130,
        "y": 500,
        "wires": [
            [
                "2e929dca24e77fa9"
            ]
        ]
    },
    {
        "id": "1a6118c29bd78b28",
        "type": "function",
        "z": "b7ec5c0795a0393f",
        "name": "if already done",
        "func": "const productionClusteringDate = global.get( 'productionClusteringDate' );\nconst lastDate = global.get('productionLastDate');\n\nif (productionClusteringDate === lastDate) {\n    return [ msg, null ];\n}\n\nglobal.set('productionClusteringDate', lastDate);\n\nmsg.payload = lastDate;\nreturn [null, msg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 60,
        "wires": [
            [
                "3a90528d185d0347"
            ],
            [
                "6c30f7113ddbe4b3",
                "2e929dca24e77fa9"
            ]
        ]
    },
    {
        "id": "71dbdd31b4f0f0cc",
        "type": "link call",
        "z": "b7ec5c0795a0393f",
        "name": "",
        "links": [
            "fc7aaaa19c985f47"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 380,
        "wires": [
            [
                "3a90528d185d0347"
            ]
        ]
    },
    {
        "id": "5be46b2aceca3b99",
        "type": "function",
        "z": "b7ec5c0795a0393f",
        "name": "prepare publish",
        "func": "const production = msg.payload;\nmsg.payload = { production };\nmsg.routingKey = \"production\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 340,
        "wires": [
            [
                "71dbdd31b4f0f0cc"
            ]
        ]
    },
    {
        "id": "7ab903a24411f2b3",
        "type": "debug",
        "z": "42c32db0efd3bac1",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 180,
        "wires": []
    },
    {
        "id": "81d8c3d0c7b606be",
        "type": "link call",
        "z": "42c32db0efd3bac1",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 890,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b0771a85114491a8",
        "type": "link out",
        "z": "42c32db0efd3bac1",
        "name": "link out 25",
        "mode": "return",
        "links": [],
        "x": 835,
        "y": 60,
        "wires": []
    },
    {
        "id": "ed1602f667ce9c52",
        "type": "link call",
        "z": "42c32db0efd3bac1",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 260,
        "y": 400,
        "wires": [
            [
                "5f9e3ca1b8ea45f3"
            ]
        ]
    },
    {
        "id": "5f9e3ca1b8ea45f3",
        "type": "function",
        "z": "42c32db0efd3bac1",
        "name": "water clustering",
        "func": "const { makeClusters, matchCluster } = global.get( 'clusterHelpers' );\nconst clusterLevels = global.get( 'clusterLevels' );\nconst data = msg.payload;\n\nconst period = data[ data.length - 1 ].period;\nconst savingsAvg = data[ data.length - 1].savings_avg;\nconst productionAvg = data[data.length - 1].production_avg;\nconst ratios = data.map( x => [ x.savings_avg / x.production_avg ] );\nconst ratio = ratios[data.length - 1][ 0 ];\nconst clusters = makeClusters( ratios );\n// node.warn( clusters );\nconst matchingClusterIndex = matchCluster( clusters, ratio );\n\nconst levels = clusterLevels.map( x => x.name );\nlevels[ matchingClusterIndex ] = levels[ matchingClusterIndex ].toUpperCase();\nconst level = levels.join( ' ' );\n\nconst result = {\n    period,\n    savingsAvg,\n    productionAvg,\n    ratio,\n    level\n};\n\nglobal.set( 'waterClusteringResult', result );\n\nmsg.joinKey = undefined;\nmsg.topic = undefined;\nmsg.payload = result;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 460,
        "wires": [
            [
                "11b9aeddd5cef450",
                "7ab903a24411f2b3"
            ]
        ]
    },
    {
        "id": "e7b8060b470b3ca5",
        "type": "change",
        "z": "42c32db0efd3bac1",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'Water clustering (' & msg.payload & ')'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 120,
        "wires": [
            [
                "81d8c3d0c7b606be"
            ]
        ]
    },
    {
        "id": "0718f521c7ca40aa",
        "type": "link in",
        "z": "42c32db0efd3bac1",
        "name": "link in water clustering",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "27f4c4232a03ca21"
            ]
        ]
    },
    {
        "id": "94a9a77e514c43cd",
        "type": "inject",
        "z": "42c32db0efd3bac1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2024-01-05",
        "payloadType": "str",
        "x": 130,
        "y": 620,
        "wires": [
            [
                "84f0b490692f53d2"
            ]
        ]
    },
    {
        "id": "51d8baa7fc7dba59",
        "type": "link call",
        "z": "42c32db0efd3bac1",
        "name": "",
        "links": [
            "9478bf2057f22b65"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 350,
        "y": 220,
        "wires": [
            [
                "cb919f46fd03bd4b"
            ]
        ]
    },
    {
        "id": "84f0b490692f53d2",
        "type": "split",
        "z": "42c32db0efd3bac1",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 230,
        "y": 180,
        "wires": [
            [
                "51d8baa7fc7dba59",
                "047e10f4a83604f4"
            ]
        ]
    },
    {
        "id": "047e10f4a83604f4",
        "type": "link call",
        "z": "42c32db0efd3bac1",
        "name": "",
        "links": [
            "8438ec33152a3341"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 350,
        "y": 260,
        "wires": [
            [
                "cb919f46fd03bd4b"
            ]
        ]
    },
    {
        "id": "cb919f46fd03bd4b",
        "type": "join",
        "z": "42c32db0efd3bac1",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "joinKey",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 230,
        "y": 300,
        "wires": [
            [
                "17d51e8ea5d860c7"
            ]
        ]
    },
    {
        "id": "17d51e8ea5d860c7",
        "type": "function",
        "z": "42c32db0efd3bac1",
        "name": "prepare query",
        "func": "const savingsQuery = msg.payload.savings;\nconst productionQuery = msg.payload.production;\n\nconst query = \n`\nSELECT \n    s.period AS period,\n    s.year AS year,\n    s.period_avg AS savings_avg,\n    p.period_avg AS production_avg\nFROM ( ${savingsQuery } ) s\nJOIN ( ${productionQuery } ) p\nON s.year = p.year\n`\n;\n\nmsg.topic = query;\nmsg.payload = query;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 360,
        "wires": [
            [
                "ed1602f667ce9c52",
                "81d8c3d0c7b606be"
            ]
        ]
    },
    {
        "id": "d8d686c03c68a97d",
        "type": "inject",
        "z": "42c32db0efd3bac1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2024-05-23",
        "payloadType": "str",
        "x": 130,
        "y": 660,
        "wires": [
            [
                "84f0b490692f53d2"
            ]
        ]
    },
    {
        "id": "27f4c4232a03ca21",
        "type": "function",
        "z": "42c32db0efd3bac1",
        "name": "if already done",
        "func": "const { minDate } = global.get( 'dateHelpers' );\nconst waterClusteringDate = global.get( 'waterClusteringDate' );\n\nconst newWaterClusteringDate = minDate( [\n    global.get( 'savingsLastDate' ),\n    global.get( 'productionLastDate' )\n] );\n\nif (newWaterClusteringDate == waterClusteringDate ) {\n    return [ msg, null ];   \n}\n\nglobal.set('waterClusteringDate', newWaterClusteringDate);\nmsg.payload = newWaterClusteringDate;\n\nreturn [ null, msg ];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 60,
        "wires": [
            [
                "b0771a85114491a8"
            ],
            [
                "e7b8060b470b3ca5",
                "84f0b490692f53d2"
            ]
        ]
    },
    {
        "id": "11b9aeddd5cef450",
        "type": "function",
        "z": "42c32db0efd3bac1",
        "name": "prepare publish",
        "func": "const water = msg.payload;\nmsg.payload = { water };\nmsg.routingKey = \"water\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 520,
        "wires": [
            [
                "14dfa839b3eb4663"
            ]
        ]
    },
    {
        "id": "14dfa839b3eb4663",
        "type": "link call",
        "z": "42c32db0efd3bac1",
        "name": "",
        "links": [
            "fc7aaaa19c985f47"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 560,
        "wires": [
            [
                "b0771a85114491a8"
            ]
        ]
    },
    {
        "id": "bc4d3eb33981ed7b",
        "type": "debug",
        "z": "11322c65b3bfae17",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 180,
        "wires": []
    },
    {
        "id": "20542212bb2afe38",
        "type": "link call",
        "z": "11322c65b3bfae17",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 890,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "cb80b2332117524a",
        "type": "link out",
        "z": "11322c65b3bfae17",
        "name": "link out 24",
        "mode": "return",
        "links": [],
        "x": 835,
        "y": 60,
        "wires": []
    },
    {
        "id": "70cfed66a576c432",
        "type": "link call",
        "z": "11322c65b3bfae17",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 260,
        "y": 220,
        "wires": [
            [
                "d7e7389c63dc7b62"
            ]
        ]
    },
    {
        "id": "d7e7389c63dc7b62",
        "type": "function",
        "z": "11322c65b3bfae17",
        "name": "weather clustering",
        "func": "const { makeClusters, matchCluster } = global.get( 'clusterHelpers' );\nconst clusterLevels = global.get( 'clusterLevels' );\nconst data = msg.payload;\n\nconst period = data[ data.length - 1 ].period;\nconst value = data[data.length - 1].precipitation_sum;\nconst values = data.map(x => [x.precipitation_sum ] );\nconst clusters = makeClusters( values );\n// node.warn( clusters );\nconst matchingClusterIndex = matchCluster( clusters, value );\n\nconst levels = clusterLevels.map( x => x.name );\nlevels[ matchingClusterIndex ] = levels[ matchingClusterIndex ].toUpperCase();\nconst level = levels.join( ' ' );\n\nconst result = {\n    period,\n    precipitationSum: value,\n    precipitationRepr: `${value} mm`,\n    level\n};\n\nglobal.set( 'weatherClusteringResult', result );\n\nmsg.topic = undefined;\nmsg.payload = result;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 280,
        "wires": [
            [
                "207eef31f0dfeb97",
                "bc4d3eb33981ed7b"
            ]
        ]
    },
    {
        "id": "6791b2dc385a8eec",
        "type": "change",
        "z": "11322c65b3bfae17",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'Weather clustering (' & msg.payload & ')'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 120,
        "wires": [
            [
                "20542212bb2afe38"
            ]
        ]
    },
    {
        "id": "32699b29fe9fdf8a",
        "type": "link in",
        "z": "11322c65b3bfae17",
        "name": "link in weather clustering",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "73e0b8bf57532c58"
            ]
        ]
    },
    {
        "id": "25d3dba63ffda744",
        "type": "inject",
        "z": "11322c65b3bfae17",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2024-01-23",
        "payloadType": "str",
        "x": 130,
        "y": 580,
        "wires": [
            [
                "bd751375a065374d"
            ]
        ]
    },
    {
        "id": "bd751375a065374d",
        "type": "link call",
        "z": "11322c65b3bfae17",
        "name": "",
        "links": [
            "e1cb944c3d6d1a78"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 180,
        "wires": [
            [
                "70cfed66a576c432",
                "20542212bb2afe38"
            ]
        ]
    },
    {
        "id": "a15a38acbf586bba",
        "type": "inject",
        "z": "11322c65b3bfae17",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2024-01-05",
        "payloadType": "str",
        "x": 130,
        "y": 540,
        "wires": [
            [
                "bd751375a065374d"
            ]
        ]
    },
    {
        "id": "73e0b8bf57532c58",
        "type": "function",
        "z": "11322c65b3bfae17",
        "name": "if already done",
        "func": "const weatherClusteringDate = global.get( 'weatherClusteringDate' );\nconst lastDate = global.get('weatherLastDate');\n\nif (weatherClusteringDate === lastDate) {\n    return [ msg, null ];\n}\n\nglobal.set('weatherClusteringDate', lastDate);\n\nmsg.payload = lastDate;\nreturn [null, msg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 60,
        "wires": [
            [
                "cb80b2332117524a"
            ],
            [
                "6791b2dc385a8eec",
                "bd751375a065374d"
            ]
        ]
    },
    {
        "id": "207eef31f0dfeb97",
        "type": "function",
        "z": "11322c65b3bfae17",
        "name": "prepare publish",
        "func": "const weather = msg.payload;\nmsg.payload = { weather };\nmsg.routingKey = \"weather\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 340,
        "wires": [
            [
                "dbc2792366e128d0"
            ]
        ]
    },
    {
        "id": "dbc2792366e128d0",
        "type": "link call",
        "z": "11322c65b3bfae17",
        "name": "",
        "links": [
            "fc7aaaa19c985f47"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 380,
        "wires": [
            [
                "cb80b2332117524a"
            ]
        ]
    },
    {
        "id": "98de8468dc0441db",
        "type": "link call",
        "z": "1701ccc8d2838ab0",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 260,
        "y": 220,
        "wires": [
            [
                "1308a07171a44c2c"
            ]
        ]
    },
    {
        "id": "9cbd116b7819126a",
        "type": "debug",
        "z": "1701ccc8d2838ab0",
        "name": "debug 27",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 280,
        "wires": []
    },
    {
        "id": "1308a07171a44c2c",
        "type": "function",
        "z": "1701ccc8d2838ab0",
        "name": "reservoirs clustering",
        "func": "const { makeClusters, matchCluster } = global.get( 'clusterHelpers' );\nconst clusterLevels = global.get( 'clusterLevels' );\nconst reservoirs = global.get( 'reservoirs' );\nconst data = msg.payload;\n\nconst results = [];\nfor ( let reservoir of reservoirs ) {\n\n    const reservoirData = data.filter( x => x.reservoir_id === reservoir.id );\n    if (reservoirData.length === 0) {\n        continue;\n    }\n\n    const period = reservoirData[ reservoirData.length - 1 ].period;\n    const value = reservoirData[ reservoirData.length - 1 ].period_avg;\n    const values = reservoirData.map( x => [ x.period_avg ] );\n    const clusters = makeClusters( values );\n    // node.warn( clusters );\n    const matchingClusterIndex = matchCluster( clusters, value );\n\n    const levels = clusterLevels.map( x => x.name );\n    levels[ matchingClusterIndex ] = levels[ matchingClusterIndex ].toUpperCase();\n    const level = levels.join( ' ' );\n    const color = clusterLevels[ matchingClusterIndex ].color; \n    const valueRepr = new Intl.NumberFormat().format( Math.trunc( value ) );\n\n    results.push( { \n        name: reservoir.name_en,\n        lat: reservoir.lat,\n        lon: reservoir.lon,\n        label: reservoir.name_en,\n        iconColor: color, \n        period,\n        average: `${valueRepr} cubic meters`,\n        level \n    } );\n}\n\nglobal.set( 'reservoirsClusteringResult', results );\n\nmsg.topic = undefined;\nmsg.payload = results;\nreturn msg;\n\n// for ( let result of results ) {\n//     msg.topic = undefined;\n//     msg.payload = result;\n//     node.send( msg );\n// }\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 280,
        "wires": [
            [
                "5c4075558bfa1515",
                "2ebf7ae4ea4859ae",
                "9cbd116b7819126a"
            ]
        ]
    },
    {
        "id": "5c4075558bfa1515",
        "type": "worldmap",
        "z": "1701ccc8d2838ab0",
        "name": "Reservoirs map",
        "lat": "38.43",
        "lon": "22.87",
        "zoom": "9",
        "layer": "OSMG",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "false",
        "coords": "none",
        "showgrid": "false",
        "showruler": "false",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "DR,CO,RA,DN",
        "maplist": "OSMG,OSMC,EsriC,EsriS,UKOS",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 900,
        "y": 340,
        "wires": []
    },
    {
        "id": "27b42da3153d628e",
        "type": "link call",
        "z": "1701ccc8d2838ab0",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 890,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "300a3f9168a9b4ed",
        "type": "catch",
        "z": "1701ccc8d2838ab0",
        "name": "",
        "scope": [
            "5c4075558bfa1515"
        ],
        "uncaught": false,
        "x": 870,
        "y": 220,
        "wires": [
            [
                "d71439a2eba7fc77"
            ]
        ]
    },
    {
        "id": "d71439a2eba7fc77",
        "type": "change",
        "z": "1701ccc8d2838ab0",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 180,
        "wires": [
            [
                "27b42da3153d628e"
            ]
        ]
    },
    {
        "id": "08b8eaebd93fb988",
        "type": "change",
        "z": "1701ccc8d2838ab0",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'Reservoirs clustering (' & msg.payload & ')'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 120,
        "wires": [
            [
                "27b42da3153d628e"
            ]
        ]
    },
    {
        "id": "ccaf19d7f0d0e632",
        "type": "link in",
        "z": "1701ccc8d2838ab0",
        "name": "link in reservoirs clustering",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "80d2166d46fb727d"
            ]
        ]
    },
    {
        "id": "f89090b34c3bea4d",
        "type": "link out",
        "z": "1701ccc8d2838ab0",
        "name": "link out 20",
        "mode": "return",
        "links": [],
        "x": 835,
        "y": 60,
        "wires": []
    },
    {
        "id": "53a0b0e5948328fe",
        "type": "inject",
        "z": "1701ccc8d2838ab0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2024-05-23",
        "payloadType": "str",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "cbc139c0f6212c2a"
            ]
        ]
    },
    {
        "id": "cbc139c0f6212c2a",
        "type": "link call",
        "z": "1701ccc8d2838ab0",
        "name": "",
        "links": [
            "024b62a1bbbeb6dd"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 180,
        "wires": [
            [
                "98de8468dc0441db",
                "27b42da3153d628e"
            ]
        ]
    },
    {
        "id": "9e493fa5522867f8",
        "type": "inject",
        "z": "1701ccc8d2838ab0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2024-01-05",
        "payloadType": "str",
        "x": 130,
        "y": 480,
        "wires": [
            [
                "cbc139c0f6212c2a"
            ]
        ]
    },
    {
        "id": "80d2166d46fb727d",
        "type": "function",
        "z": "1701ccc8d2838ab0",
        "name": "if already done",
        "func": "const reservoirsClusteringDate = global.get( 'reservoirsClusteringDate' );\nconst lastDate = global.get('savingsLastDate');\n\nif (reservoirsClusteringDate === lastDate) {\n    return [ msg, null ];\n}\n\nglobal.set('reservoirsClusteringDate', lastDate);\n\nmsg.payload = lastDate;\nreturn [null, msg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 60,
        "wires": [
            [
                "f89090b34c3bea4d"
            ],
            [
                "08b8eaebd93fb988",
                "cbc139c0f6212c2a"
            ]
        ]
    },
    {
        "id": "2ebf7ae4ea4859ae",
        "type": "function",
        "z": "1701ccc8d2838ab0",
        "name": "prepare publish",
        "func": "const reservoirs = msg.payload;\nmsg.payload = { reservoirs };\nmsg.routingKey = \"reservoirs\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 340,
        "wires": [
            [
                "f442c6daffed750b"
            ]
        ]
    },
    {
        "id": "f442c6daffed750b",
        "type": "link call",
        "z": "1701ccc8d2838ab0",
        "name": "",
        "links": [
            "fc7aaaa19c985f47"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 380,
        "wires": [
            [
                "f89090b34c3bea4d"
            ]
        ]
    },
    {
        "id": "3c4c570a2f5ad214",
        "type": "amqp-out",
        "z": "bac88e4feb8bab3d",
        "name": "athenswaterall exchange",
        "broker": "774630f253d36966",
        "exchangeName": "athenswaterall",
        "exchangeType": "direct",
        "exchangeRoutingKey": "reservoirs,savings,production,water,weather",
        "exchangeRoutingKeyType": "str",
        "exchangeDurable": true,
        "amqpProperties": "{ \"headers\": {} }",
        "rpcTimeoutMilliseconds": 3000,
        "outputs": 0,
        "x": 250,
        "y": 60,
        "wires": []
    },
    {
        "id": "fc7aaaa19c985f47",
        "type": "link in",
        "z": "bac88e4feb8bab3d",
        "name": "link in athenswaterall exchange",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "3c4c570a2f5ad214",
                "735079cce6fe051f",
                "78327d262f4b2133"
            ]
        ]
    },
    {
        "id": "2a75c15a621dcc4c",
        "type": "link call",
        "z": "bac88e4feb8bab3d",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 810,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "735079cce6fe051f",
        "type": "change",
        "z": "bac88e4feb8bab3d",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'Publish ' & msg.payload",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 120,
        "wires": [
            [
                "2a75c15a621dcc4c"
            ]
        ]
    },
    {
        "id": "9dfbedb5f90985c2",
        "type": "catch",
        "z": "bac88e4feb8bab3d",
        "name": "",
        "scope": [
            "3c4c570a2f5ad214"
        ],
        "uncaught": false,
        "x": 790,
        "y": 240,
        "wires": [
            [
                "d3f7bceabc093354"
            ]
        ]
    },
    {
        "id": "d3f7bceabc093354",
        "type": "change",
        "z": "bac88e4feb8bab3d",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 200,
        "wires": [
            [
                "2a75c15a621dcc4c"
            ]
        ]
    },
    {
        "id": "f05efffd73c83168",
        "type": "debug",
        "z": "bac88e4feb8bab3d",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 340,
        "wires": []
    },
    {
        "id": "220fa75884132e53",
        "type": "amqp-in",
        "z": "bac88e4feb8bab3d",
        "name": "queue.user00",
        "broker": "774630f253d36966",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "athenswaterall",
        "exchangeType": "direct",
        "exchangeRoutingKey": "reservoirs,savings,production,water,weather",
        "exchangeDurable": true,
        "queueName": "queue.user00",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 210,
        "y": 340,
        "wires": [
            [
                "f05efffd73c83168"
            ]
        ]
    },
    {
        "id": "78327d262f4b2133",
        "type": "link out",
        "z": "bac88e4feb8bab3d",
        "name": "link out 19",
        "mode": "return",
        "links": [],
        "x": 755,
        "y": 60,
        "wires": []
    },
    {
        "id": "776d2b916bc913ec",
        "type": "inject",
        "z": "6ae09610019427a1",
        "name": "read all",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 380,
        "wires": [
            [
                "6c22dca3a90f370d"
            ]
        ]
    },
    {
        "id": "e86870e57961baa9",
        "type": "debug",
        "z": "6ae09610019427a1",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 460,
        "wires": []
    },
    {
        "id": "562ebe586d0c898a",
        "type": "function",
        "z": "6ae09610019427a1",
        "name": "get response",
        "func": "const { payload } = msg;\nconst names = payload.map( x => x.name );\nmsg.payload = names;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 60,
        "wires": [
            [
                "295f75285f76a061"
            ]
        ]
    },
    {
        "id": "cbca47aa4af44010",
        "type": "link call",
        "z": "6ae09610019427a1",
        "name": "call RabbitMQ api",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 470,
        "y": 60,
        "wires": [
            [
                "562ebe586d0c898a"
            ]
        ]
    },
    {
        "id": "87c347b9923fc1a6",
        "type": "function",
        "z": "6ae09610019427a1",
        "name": "set read-all request",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst path = `/exchanges/${AW_VHOST}`;\nmsg.url = path;\nmsg.method = 'GET';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 60,
        "wires": [
            [
                "cbca47aa4af44010"
            ]
        ]
    },
    {
        "id": "67e4c6881c624e0b",
        "type": "link in",
        "z": "6ae09610019427a1",
        "name": "link in read all",
        "links": [],
        "x": 75,
        "y": 60,
        "wires": [
            [
                "87c347b9923fc1a6"
            ]
        ]
    },
    {
        "id": "295f75285f76a061",
        "type": "link out",
        "z": "6ae09610019427a1",
        "name": "link out 3",
        "mode": "return",
        "links": [],
        "x": 865,
        "y": 180,
        "wires": []
    },
    {
        "id": "6c22dca3a90f370d",
        "type": "link call",
        "z": "6ae09610019427a1",
        "name": "call read all",
        "links": [
            "67e4c6881c624e0b"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 380,
        "wires": [
            [
                "e86870e57961baa9"
            ]
        ]
    },
    {
        "id": "6e8a68ba16dde45f",
        "type": "function",
        "z": "6ae09610019427a1",
        "name": "set create request",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst AW_EXCHANGES = env.get( 'AW_EXCHANGES' )\nconst exchanges = AW_EXCHANGES.split( ',' );\n\nfor ( let exchange of exchanges ) {\n    const path = `/exchanges/${AW_VHOST}/${exchange}`;\n\n    const body = {\n        type: \"fanout\",\n        auto_delete: false, \n        durable: true, \n        internal: false, \n        arguments: {}   \n    };\n\n    msg.url = path;\n    msg.method = 'PUT';\n    msg.payload = body;\n    node.send( msg );\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 120,
        "wires": [
            [
                "2183dbb7e26f1944"
            ]
        ]
    },
    {
        "id": "0d6191f4f43cbfd8",
        "type": "link in",
        "z": "6ae09610019427a1",
        "name": "link in create",
        "links": [],
        "x": 75,
        "y": 120,
        "wires": [
            [
                "6e8a68ba16dde45f"
            ]
        ]
    },
    {
        "id": "e3d67d8206f62ffb",
        "type": "link in",
        "z": "6ae09610019427a1",
        "name": "link in read",
        "links": [],
        "x": 75,
        "y": 180,
        "wires": [
            [
                "82b6f6eac4d35b07"
            ]
        ]
    },
    {
        "id": "82b6f6eac4d35b07",
        "type": "function",
        "z": "6ae09610019427a1",
        "name": "set read request",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst AW_EXCHANGES = env.get( 'AW_EXCHANGES' )\nconst exchanges = AW_EXCHANGES.split( ',' );\n\nfor ( let exchange of exchanges ) {\n    const path = `/exchanges/${AW_VHOST}/${exchange}`;\n    msg.url = path;\n    msg.method = 'GET';\n    msg.payload = {};\n    node.send( msg );\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 180,
        "wires": [
            [
                "2183dbb7e26f1944"
            ]
        ]
    },
    {
        "id": "2183dbb7e26f1944",
        "type": "link call",
        "z": "6ae09610019427a1",
        "name": "call RabbitMQ api",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 470,
        "y": 180,
        "wires": [
            [
                "295f75285f76a061"
            ]
        ]
    },
    {
        "id": "c35237e34045a926",
        "type": "link in",
        "z": "6ae09610019427a1",
        "name": "link delete",
        "links": [],
        "x": 75,
        "y": 240,
        "wires": [
            [
                "efd6021f27927c9b"
            ]
        ]
    },
    {
        "id": "efd6021f27927c9b",
        "type": "function",
        "z": "6ae09610019427a1",
        "name": "set delete request",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst AW_EXCHANGES = env.get( 'AW_EXCHANGES' )\nconst exchanges = AW_EXCHANGES.split( ',' );\n\nfor ( let exchange of exchanges ) {\n    const path = `/exchanges/${AW_VHOST}/${exchange}`;\n    msg.url = path;\n    msg.method = 'DELETE';\n    msg.payload = {};\n    node.send( msg );\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 240,
        "wires": [
            [
                "2183dbb7e26f1944"
            ]
        ]
    },
    {
        "id": "b998f51f5372c943",
        "type": "inject",
        "z": "6ae09610019427a1",
        "name": "create",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 440,
        "wires": [
            [
                "9b225dd7d5e57149"
            ]
        ]
    },
    {
        "id": "9b225dd7d5e57149",
        "type": "link call",
        "z": "6ae09610019427a1",
        "name": "call create",
        "links": [
            "0d6191f4f43cbfd8"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 440,
        "wires": [
            [
                "e86870e57961baa9"
            ]
        ]
    },
    {
        "id": "e8a46fa4daacae1e",
        "type": "inject",
        "z": "6ae09610019427a1",
        "name": "read",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 500,
        "wires": [
            [
                "81e8da693b47d621"
            ]
        ]
    },
    {
        "id": "81e8da693b47d621",
        "type": "link call",
        "z": "6ae09610019427a1",
        "name": "call read",
        "links": [
            "e3d67d8206f62ffb"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 300,
        "y": 500,
        "wires": [
            [
                "e86870e57961baa9"
            ]
        ]
    },
    {
        "id": "f9a51161d692516a",
        "type": "inject",
        "z": "6ae09610019427a1",
        "name": "delete",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 560,
        "wires": [
            [
                "795fe1bc30c84ef6"
            ]
        ]
    },
    {
        "id": "795fe1bc30c84ef6",
        "type": "link call",
        "z": "6ae09610019427a1",
        "name": "call delete",
        "links": [
            "c35237e34045a926"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 300,
        "y": 560,
        "wires": [
            [
                "e86870e57961baa9"
            ]
        ]
    },
    {
        "id": "09dc96062eae2eea",
        "type": "comment",
        "z": "6ae09610019427a1",
        "name": "to test/debug the above operations",
        "info": "",
        "x": 200,
        "y": 320,
        "wires": []
    },
    {
        "id": "3e1256bea85c1f7d",
        "type": "inject",
        "z": "c24dbc290a05dc25",
        "name": "read all",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 380,
        "wires": [
            [
                "b782ce62626d28be"
            ]
        ]
    },
    {
        "id": "d0ce12100526f940",
        "type": "debug",
        "z": "c24dbc290a05dc25",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 460,
        "wires": []
    },
    {
        "id": "5427f574b7ba3e65",
        "type": "function",
        "z": "c24dbc290a05dc25",
        "name": "get response",
        "func": "const { payload } = msg;\nconst names = payload.map( x => x.name );\nmsg.payload = names;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 60,
        "wires": [
            [
                "80b4819ac99b0c5c"
            ]
        ]
    },
    {
        "id": "46a7f293db118607",
        "type": "link call",
        "z": "c24dbc290a05dc25",
        "name": "call RabbitMQ api",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 470,
        "y": 60,
        "wires": [
            [
                "5427f574b7ba3e65"
            ]
        ]
    },
    {
        "id": "a8bb9686fbfb7e4e",
        "type": "function",
        "z": "c24dbc290a05dc25",
        "name": "set read-all request",
        "func": "const path = '/vhosts'\nmsg.url = path;\nmsg.method = 'GET';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 60,
        "wires": [
            [
                "46a7f293db118607"
            ]
        ]
    },
    {
        "id": "bfc63f71b5d10fb1",
        "type": "link in",
        "z": "c24dbc290a05dc25",
        "name": "link in read all",
        "links": [],
        "x": 75,
        "y": 60,
        "wires": [
            [
                "a8bb9686fbfb7e4e"
            ]
        ]
    },
    {
        "id": "80b4819ac99b0c5c",
        "type": "link out",
        "z": "c24dbc290a05dc25",
        "name": "link out 2",
        "mode": "return",
        "links": [],
        "x": 865,
        "y": 180,
        "wires": []
    },
    {
        "id": "b782ce62626d28be",
        "type": "link call",
        "z": "c24dbc290a05dc25",
        "name": "call read all",
        "links": [
            "bfc63f71b5d10fb1"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 380,
        "wires": [
            [
                "d0ce12100526f940"
            ]
        ]
    },
    {
        "id": "6fc9ee6cb10d1373",
        "type": "function",
        "z": "c24dbc290a05dc25",
        "name": "set create request",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst path = `/vhosts/${AW_VHOST}`\n\nconst body = {\n    description: \"athens-water project\", \n    tags: \"athens,water\"\n};\n\nmsg.url = path;\nmsg.method = 'PUT';\nmsg.payload = body;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 120,
        "wires": [
            [
                "49302832092d868a"
            ]
        ]
    },
    {
        "id": "e0a96c8dbc56b691",
        "type": "link in",
        "z": "c24dbc290a05dc25",
        "name": "link in create",
        "links": [],
        "x": 75,
        "y": 120,
        "wires": [
            [
                "6fc9ee6cb10d1373"
            ]
        ]
    },
    {
        "id": "3ca2d7f343cab32b",
        "type": "link in",
        "z": "c24dbc290a05dc25",
        "name": "link in read",
        "links": [],
        "x": 75,
        "y": 180,
        "wires": [
            [
                "52fca4d5088f9489"
            ]
        ]
    },
    {
        "id": "52fca4d5088f9489",
        "type": "function",
        "z": "c24dbc290a05dc25",
        "name": "set read request",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst path = `/vhosts/${AW_VHOST}`\nmsg.url = path;\nmsg.method = 'GET';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 180,
        "wires": [
            [
                "49302832092d868a"
            ]
        ]
    },
    {
        "id": "49302832092d868a",
        "type": "link call",
        "z": "c24dbc290a05dc25",
        "name": "call RabbitMQ api",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 470,
        "y": 180,
        "wires": [
            [
                "80b4819ac99b0c5c"
            ]
        ]
    },
    {
        "id": "d53862610aebc037",
        "type": "link in",
        "z": "c24dbc290a05dc25",
        "name": "link delete",
        "links": [],
        "x": 75,
        "y": 240,
        "wires": [
            [
                "f6c4bd2df67bc941"
            ]
        ]
    },
    {
        "id": "f6c4bd2df67bc941",
        "type": "function",
        "z": "c24dbc290a05dc25",
        "name": "set delete request",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst path = `/vhosts/${AW_VHOST}`\nmsg.url = path;\nmsg.method = 'DELETE';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "901e7b4bfbbbb00f",
        "type": "inject",
        "z": "c24dbc290a05dc25",
        "name": "create",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 440,
        "wires": [
            [
                "c5fb12ecd559fde8"
            ]
        ]
    },
    {
        "id": "c5fb12ecd559fde8",
        "type": "link call",
        "z": "c24dbc290a05dc25",
        "name": "call create",
        "links": [
            "e0a96c8dbc56b691"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 440,
        "wires": [
            [
                "d0ce12100526f940"
            ]
        ]
    },
    {
        "id": "6fa5caebd21523d4",
        "type": "inject",
        "z": "c24dbc290a05dc25",
        "name": "read",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 500,
        "wires": [
            [
                "c24f89be18752c8e"
            ]
        ]
    },
    {
        "id": "c24f89be18752c8e",
        "type": "link call",
        "z": "c24dbc290a05dc25",
        "name": "call read",
        "links": [
            "3ca2d7f343cab32b"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 300,
        "y": 500,
        "wires": [
            [
                "d0ce12100526f940"
            ]
        ]
    },
    {
        "id": "c3d6541fe832663d",
        "type": "inject",
        "z": "c24dbc290a05dc25",
        "name": "delete",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 560,
        "wires": [
            [
                "316c95f3e6a1219e"
            ]
        ]
    },
    {
        "id": "316c95f3e6a1219e",
        "type": "link call",
        "z": "c24dbc290a05dc25",
        "name": "call delete",
        "links": [
            "d53862610aebc037"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 300,
        "y": 560,
        "wires": [
            [
                "d0ce12100526f940"
            ]
        ]
    },
    {
        "id": "ee8169429c18181b",
        "type": "comment",
        "z": "c24dbc290a05dc25",
        "name": "to test/debug the above operations",
        "info": "",
        "x": 200,
        "y": 320,
        "wires": []
    },
    {
        "id": "1966a0a3058cc40f",
        "type": "http request",
        "z": "61bc9ba532c143ca",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 230,
        "y": 180,
        "wires": [
            [
                "af05a74b2187be8a"
            ]
        ]
    },
    {
        "id": "2e4a12651ca65a7d",
        "type": "link in",
        "z": "61bc9ba532c143ca",
        "name": "link in rabbitmq api",
        "links": [],
        "x": 65,
        "y": 60,
        "wires": [
            [
                "e23273644aad2885"
            ]
        ]
    },
    {
        "id": "af05a74b2187be8a",
        "type": "link out",
        "z": "61bc9ba532c143ca",
        "name": "link out 1",
        "mode": "return",
        "links": [],
        "x": 175,
        "y": 240,
        "wires": []
    },
    {
        "id": "e23273644aad2885",
        "type": "function",
        "z": "61bc9ba532c143ca",
        "name": "set url",
        "func": "const path = msg.url;\nconst url = 'http://localhost:15672/api' + path;\nmsg.url = url;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 60,
        "wires": [
            [
                "1966a0a3058cc40f",
                "39836e8f3488f67a"
            ]
        ]
    },
    {
        "id": "0f69fae04798c822",
        "type": "change",
        "z": "61bc9ba532c143ca",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 140,
        "wires": [
            [
                "df3ce2745f8171c7"
            ]
        ]
    },
    {
        "id": "5e4b0481573b5619",
        "type": "catch",
        "z": "61bc9ba532c143ca",
        "name": "",
        "scope": [
            "1966a0a3058cc40f"
        ],
        "uncaught": false,
        "x": 770,
        "y": 200,
        "wires": [
            [
                "0f69fae04798c822"
            ]
        ]
    },
    {
        "id": "df3ce2745f8171c7",
        "type": "link call",
        "z": "61bc9ba532c143ca",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 790,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "39836e8f3488f67a",
        "type": "change",
        "z": "61bc9ba532c143ca",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "url",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 120,
        "wires": [
            [
                "df3ce2745f8171c7"
            ]
        ]
    },
    {
        "id": "3129edf952964497",
        "type": "inject",
        "z": "7f69c48321b859d1",
        "name": "read all",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 440,
        "wires": [
            [
                "939e9e02aea94044"
            ]
        ]
    },
    {
        "id": "e510356c8cac6597",
        "type": "debug",
        "z": "7f69c48321b859d1",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 500,
        "wires": []
    },
    {
        "id": "c3d77277699a0949",
        "type": "function",
        "z": "7f69c48321b859d1",
        "name": "get response",
        "func": "const { payload } = msg;\nconst names = payload.map( x => x.name );\nmsg.payload = names;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 60,
        "wires": [
            [
                "c5bdfcc40b35de52"
            ]
        ]
    },
    {
        "id": "295d87cd3ca0ae01",
        "type": "link call",
        "z": "7f69c48321b859d1",
        "name": "call RabbitMQ api",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 470,
        "y": 60,
        "wires": [
            [
                "c3d77277699a0949"
            ]
        ]
    },
    {
        "id": "0f6c58b66c08402f",
        "type": "function",
        "z": "7f69c48321b859d1",
        "name": "set read-all request",
        "func": "const path = '/users'\nmsg.url = path;\nmsg.method = 'GET';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 60,
        "wires": [
            [
                "295d87cd3ca0ae01"
            ]
        ]
    },
    {
        "id": "d6acb7fb405c4eba",
        "type": "link in",
        "z": "7f69c48321b859d1",
        "name": "link in read all",
        "links": [],
        "x": 75,
        "y": 60,
        "wires": [
            [
                "0f6c58b66c08402f"
            ]
        ]
    },
    {
        "id": "c5bdfcc40b35de52",
        "type": "link out",
        "z": "7f69c48321b859d1",
        "name": "link out 4",
        "mode": "return",
        "links": [],
        "x": 865,
        "y": 180,
        "wires": []
    },
    {
        "id": "939e9e02aea94044",
        "type": "link call",
        "z": "7f69c48321b859d1",
        "name": "call read all",
        "links": [
            "d6acb7fb405c4eba"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 440,
        "wires": [
            [
                "e510356c8cac6597"
            ]
        ]
    },
    {
        "id": "f31c4da5bf651327",
        "type": "function",
        "z": "7f69c48321b859d1",
        "name": "set create request",
        "func": "const username = flow.get( 'username' );\nconst path = `/users/${username}`\n\nconst body = {\n    password: \"pass\",\n    tags: \"athenswater,consumer\"\n};\n\nmsg.url = path;\nmsg.method = 'PUT';\nmsg.payload = body;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 120,
        "wires": [
            [
                "fc2a889ebaf26a14"
            ]
        ]
    },
    {
        "id": "16b1ad752a073bb2",
        "type": "link in",
        "z": "7f69c48321b859d1",
        "name": "link in create",
        "links": [],
        "x": 75,
        "y": 120,
        "wires": [
            [
                "f31c4da5bf651327"
            ]
        ]
    },
    {
        "id": "ca69480e65efd12c",
        "type": "link in",
        "z": "7f69c48321b859d1",
        "name": "link in read",
        "links": [],
        "x": 75,
        "y": 180,
        "wires": [
            [
                "dc4696a2e1f5a122"
            ]
        ]
    },
    {
        "id": "dc4696a2e1f5a122",
        "type": "function",
        "z": "7f69c48321b859d1",
        "name": "set read request",
        "func": "const username = flow.get( 'username' );\nconst path = `/users/${username}`\nmsg.url = path;\nmsg.method = 'GET';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 180,
        "wires": [
            [
                "fc2a889ebaf26a14"
            ]
        ]
    },
    {
        "id": "207a61198e624bd0",
        "type": "link in",
        "z": "7f69c48321b859d1",
        "name": "link delete",
        "links": [],
        "x": 75,
        "y": 240,
        "wires": [
            [
                "8fbde47678a6fa8e"
            ]
        ]
    },
    {
        "id": "8fbde47678a6fa8e",
        "type": "function",
        "z": "7f69c48321b859d1",
        "name": "set delete request",
        "func": "const username = flow.get( 'username' );\nconst path = `/users/${username}`\nmsg.url = path;\nmsg.method = 'DELETE';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 240,
        "wires": [
            [
                "fc2a889ebaf26a14"
            ]
        ]
    },
    {
        "id": "1a2f482f76d7904c",
        "type": "inject",
        "z": "7f69c48321b859d1",
        "name": "create",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"username\":\"consumer1\"}",
        "payloadType": "json",
        "x": 130,
        "y": 500,
        "wires": [
            [
                "934e98accd0df2d3"
            ]
        ]
    },
    {
        "id": "934e98accd0df2d3",
        "type": "link call",
        "z": "7f69c48321b859d1",
        "name": "call create",
        "links": [
            "16b1ad752a073bb2"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 500,
        "wires": [
            [
                "e510356c8cac6597"
            ]
        ]
    },
    {
        "id": "4e035f390321bd98",
        "type": "inject",
        "z": "7f69c48321b859d1",
        "name": "read",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 560,
        "wires": [
            [
                "c21b5771a3924f6d"
            ]
        ]
    },
    {
        "id": "c21b5771a3924f6d",
        "type": "link call",
        "z": "7f69c48321b859d1",
        "name": "call read",
        "links": [
            "ca69480e65efd12c"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 300,
        "y": 560,
        "wires": [
            [
                "e510356c8cac6597"
            ]
        ]
    },
    {
        "id": "cf7bb0deca9d9844",
        "type": "inject",
        "z": "7f69c48321b859d1",
        "name": "delete",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 620,
        "wires": [
            [
                "eee3aa0ab68508bb"
            ]
        ]
    },
    {
        "id": "eee3aa0ab68508bb",
        "type": "link call",
        "z": "7f69c48321b859d1",
        "name": "call delete",
        "links": [
            "207a61198e624bd0"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 300,
        "y": 620,
        "wires": [
            [
                "e510356c8cac6597"
            ]
        ]
    },
    {
        "id": "fc2a889ebaf26a14",
        "type": "link call",
        "z": "7f69c48321b859d1",
        "name": "call RabbitMQ api",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 470,
        "y": 180,
        "wires": [
            [
                "c5bdfcc40b35de52"
            ]
        ]
    },
    {
        "id": "029a2635816ecdaa",
        "type": "inject",
        "z": "7f69c48321b859d1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "consumer1",
        "payloadType": "str",
        "x": 120,
        "y": 380,
        "wires": [
            [
                "f6cd4f65b9c84b0e"
            ]
        ]
    },
    {
        "id": "f6cd4f65b9c84b0e",
        "type": "function",
        "z": "7f69c48321b859d1",
        "name": "set username",
        "func": "const username = msg.payload;\nflow.set( 'username', username );\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 380,
        "wires": [
            [
                "e510356c8cac6597"
            ]
        ]
    },
    {
        "id": "aca1c861a6621238",
        "type": "comment",
        "z": "7f69c48321b859d1",
        "name": "to test/debug the above operations",
        "info": "",
        "x": 200,
        "y": 320,
        "wires": []
    },
    {
        "id": "15af48ad3eafa219",
        "type": "debug",
        "z": "8bc24acff1041807",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 400,
        "wires": []
    },
    {
        "id": "41137d87676730b2",
        "type": "link out",
        "z": "8bc24acff1041807",
        "name": "link out 5",
        "mode": "return",
        "links": [],
        "x": 845,
        "y": 120,
        "wires": []
    },
    {
        "id": "f7bb902f29575d7a",
        "type": "function",
        "z": "8bc24acff1041807",
        "name": "set create request",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst username = flow.get( 'username' );\nconst path = `/permissions/${AW_VHOST}/${username}`\nconst body = {\n    // configure: \".*\",\n    // write: \".*\",\n    // read: \".*\",\n    configure: \"^$ \",\n    write: \"^$ \",\n    // read: `^queue.*.${username}$`,\n    read: \".*\",\n};\nmsg.url = path;\nmsg.method = 'PUT';\nmsg.payload = body;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 60,
        "wires": [
            [
                "cec898abbd371445"
            ]
        ]
    },
    {
        "id": "4e5c455f143b2ddb",
        "type": "link in",
        "z": "8bc24acff1041807",
        "name": "link in create",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "f7bb902f29575d7a"
            ]
        ]
    },
    {
        "id": "2924c32b1207ca6f",
        "type": "link in",
        "z": "8bc24acff1041807",
        "name": "link in read",
        "links": [],
        "x": 55,
        "y": 120,
        "wires": [
            [
                "0df848dfcc1c99b7"
            ]
        ]
    },
    {
        "id": "0df848dfcc1c99b7",
        "type": "function",
        "z": "8bc24acff1041807",
        "name": "set read request",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst username = flow.get( 'username' );\nconst path = `/permissions/${AW_VHOST}/${username}`\nmsg.url = path;\nmsg.method = 'GET';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 120,
        "wires": [
            [
                "cec898abbd371445"
            ]
        ]
    },
    {
        "id": "bbc34b6ecf58764b",
        "type": "link in",
        "z": "8bc24acff1041807",
        "name": "link delete",
        "links": [],
        "x": 55,
        "y": 180,
        "wires": [
            [
                "40b640b0da9cba29"
            ]
        ]
    },
    {
        "id": "40b640b0da9cba29",
        "type": "function",
        "z": "8bc24acff1041807",
        "name": "set delete request",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst username = flow.get( 'username' );\nconst path = `/permissions/${AW_VHOST}/${username}`\nmsg.url = path;\nmsg.method = 'DELETE';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 180,
        "wires": [
            [
                "cec898abbd371445"
            ]
        ]
    },
    {
        "id": "50c0428b84b8dc7e",
        "type": "inject",
        "z": "8bc24acff1041807",
        "name": "create",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"username\":\"consumer1\"}",
        "payloadType": "json",
        "x": 110,
        "y": 380,
        "wires": [
            [
                "2876be81059f6536"
            ]
        ]
    },
    {
        "id": "2876be81059f6536",
        "type": "link call",
        "z": "8bc24acff1041807",
        "name": "call create",
        "links": [
            "4e5c455f143b2ddb"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 290,
        "y": 380,
        "wires": [
            [
                "15af48ad3eafa219"
            ]
        ]
    },
    {
        "id": "99d6001e63062ec0",
        "type": "inject",
        "z": "8bc24acff1041807",
        "name": "read",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 440,
        "wires": [
            [
                "ee4723e60e1d4314"
            ]
        ]
    },
    {
        "id": "ee4723e60e1d4314",
        "type": "link call",
        "z": "8bc24acff1041807",
        "name": "call read",
        "links": [
            "2924c32b1207ca6f"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 280,
        "y": 440,
        "wires": [
            [
                "15af48ad3eafa219"
            ]
        ]
    },
    {
        "id": "ee812a476edddbf9",
        "type": "inject",
        "z": "8bc24acff1041807",
        "name": "delete",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 500,
        "wires": [
            [
                "2b2d98eeecf6571c"
            ]
        ]
    },
    {
        "id": "2b2d98eeecf6571c",
        "type": "link call",
        "z": "8bc24acff1041807",
        "name": "call delete",
        "links": [
            "bbc34b6ecf58764b"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 280,
        "y": 500,
        "wires": [
            [
                "15af48ad3eafa219"
            ]
        ]
    },
    {
        "id": "cec898abbd371445",
        "type": "link call",
        "z": "8bc24acff1041807",
        "name": "call RabbitMQ api",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 450,
        "y": 120,
        "wires": [
            [
                "41137d87676730b2"
            ]
        ]
    },
    {
        "id": "83d9c877ce0a43cd",
        "type": "inject",
        "z": "8bc24acff1041807",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "consumer1",
        "payloadType": "str",
        "x": 100,
        "y": 320,
        "wires": [
            [
                "d62c47eee150155a"
            ]
        ]
    },
    {
        "id": "d62c47eee150155a",
        "type": "function",
        "z": "8bc24acff1041807",
        "name": "set username",
        "func": "const username = msg.payload;\nflow.set( 'username', username );\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 320,
        "wires": [
            [
                "15af48ad3eafa219"
            ]
        ]
    },
    {
        "id": "3e85c5e0f282d77b",
        "type": "comment",
        "z": "8bc24acff1041807",
        "name": "to test/debug the above operations",
        "info": "",
        "x": 180,
        "y": 260,
        "wires": []
    },
    {
        "id": "ef4490e950de297a",
        "type": "debug",
        "z": "e6dee893d75f8487",
        "name": "debug 19",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 460,
        "wires": []
    },
    {
        "id": "217db069e0e67795",
        "type": "link out",
        "z": "e6dee893d75f8487",
        "name": "link out 6",
        "mode": "return",
        "links": [],
        "x": 845,
        "y": 180,
        "wires": []
    },
    {
        "id": "51f66ee79adb57c9",
        "type": "function",
        "z": "e6dee893d75f8487",
        "name": "set create request",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst AW_EXCHANGES = env.get( 'AW_EXCHANGES' );\n\nconst username = flow.get( 'username' );\nlet exchanges = flow.get( 'exchanges' );\nif ( ! exchanges ) {\n    exchanges = AW_EXCHANGES.split( ',' );\n}\n\nfor ( let exchange of exchanges ) {\n    const queue = `queue.${exchange}.${username}`;\n    const path = `/queues/${AW_VHOST}/${queue}`;\n    const body = {\n        auto_delete: false,\n        durable: true,\n        arguments:{},\n        // node:\"rabbit@smacmullen\"\n    };\n\n    msg.url = path;\n    msg.method = 'PUT';\n    msg.payload = body;\n    node.send( msg );\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 120,
        "wires": [
            [
                "700d7711c350e1ea"
            ]
        ]
    },
    {
        "id": "d1dec8c105658e64",
        "type": "link in",
        "z": "e6dee893d75f8487",
        "name": "link in create",
        "links": [],
        "x": 55,
        "y": 120,
        "wires": [
            [
                "51f66ee79adb57c9"
            ]
        ]
    },
    {
        "id": "19aebb1bef4790ee",
        "type": "link in",
        "z": "e6dee893d75f8487",
        "name": "link in read",
        "links": [],
        "x": 55,
        "y": 180,
        "wires": [
            [
                "5d09d14d62c02880"
            ]
        ]
    },
    {
        "id": "5d09d14d62c02880",
        "type": "function",
        "z": "e6dee893d75f8487",
        "name": "set read request",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst AW_EXCHANGES = env.get( 'AW_EXCHANGES' );\n\nconst username = flow.get( 'username' );\nlet exchanges = flow.get( 'exchanges' );\nif ( ! exchanges ) {\n    exchanges = AW_EXCHANGES.split( ',' );\n}\n\n// for ( let exchange of exchanges ) {\n    // const queue = `queue.${exchange}.${username}`;\n//    const path = `/queues/${AW_VHOST}/${queue}`;\n    const path = `/queues/${AW_VHOST}`\n    msg.url = path;\n    msg.method = 'GET';\n    msg.payload = {};\n    node.send( msg );\n// }\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 180,
        "wires": [
            [
                "700d7711c350e1ea"
            ]
        ]
    },
    {
        "id": "700d7711c350e1ea",
        "type": "link call",
        "z": "e6dee893d75f8487",
        "name": "call RabbitMQ api",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 570,
        "y": 180,
        "wires": [
            [
                "217db069e0e67795"
            ]
        ]
    },
    {
        "id": "137a3afc7bc0fc9f",
        "type": "link in",
        "z": "e6dee893d75f8487",
        "name": "link delete",
        "links": [],
        "x": 55,
        "y": 240,
        "wires": [
            [
                "c4b725d6d01cef93"
            ]
        ]
    },
    {
        "id": "c4b725d6d01cef93",
        "type": "function",
        "z": "e6dee893d75f8487",
        "name": "set delete request",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst AW_EXCHANGES = env.get( 'AW_EXCHANGES' );\n\nconst username = flow.get( 'username' );\nlet exchanges = flow.get( 'exchanges' );\nif ( ! exchanges ) {\n    exchanges = AW_EXCHANGES.split( ',' );\n}\n\nfor ( let exchange of exchanges ) {\n    const queue = `queue.${exchange}.${username}`;\n    const path = `/queues/${AW_VHOST}/${queue}`;\n\n    msg.url = path;\n    msg.method = 'DELETE';\n    msg.payload = {};\n    node.send( msg );\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 240,
        "wires": [
            [
                "700d7711c350e1ea"
            ]
        ]
    },
    {
        "id": "d2181fc247c1f3c8",
        "type": "inject",
        "z": "e6dee893d75f8487",
        "name": "create",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 500,
        "wires": [
            [
                "1f32928059d87d0d"
            ]
        ]
    },
    {
        "id": "1f32928059d87d0d",
        "type": "link call",
        "z": "e6dee893d75f8487",
        "name": "",
        "links": [
            "d1dec8c105658e64"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 290,
        "y": 500,
        "wires": [
            [
                "ef4490e950de297a"
            ]
        ]
    },
    {
        "id": "936bf489f1689eb4",
        "type": "inject",
        "z": "e6dee893d75f8487",
        "name": "read",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 560,
        "wires": [
            [
                "7bbe422a10db75e1"
            ]
        ]
    },
    {
        "id": "7bbe422a10db75e1",
        "type": "link call",
        "z": "e6dee893d75f8487",
        "name": "",
        "links": [
            "19aebb1bef4790ee"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 290,
        "y": 560,
        "wires": [
            [
                "ef4490e950de297a"
            ]
        ]
    },
    {
        "id": "ee96a8c42505cb24",
        "type": "inject",
        "z": "e6dee893d75f8487",
        "name": "delete",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 620,
        "wires": [
            [
                "24066d75ea8360cf"
            ]
        ]
    },
    {
        "id": "24066d75ea8360cf",
        "type": "link call",
        "z": "e6dee893d75f8487",
        "name": "",
        "links": [
            "137a3afc7bc0fc9f"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 280,
        "y": 620,
        "wires": [
            [
                "ef4490e950de297a"
            ]
        ]
    },
    {
        "id": "f239ecdf9a0662d1",
        "type": "comment",
        "z": "e6dee893d75f8487",
        "name": "to test/debug the above operations",
        "info": "",
        "x": 180,
        "y": 320,
        "wires": []
    },
    {
        "id": "7a5e410c8da77bca",
        "type": "inject",
        "z": "e6dee893d75f8487",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "consumer1",
        "payloadType": "str",
        "x": 100,
        "y": 380,
        "wires": [
            [
                "8d5b0584a9642e4c"
            ]
        ]
    },
    {
        "id": "8d5b0584a9642e4c",
        "type": "function",
        "z": "e6dee893d75f8487",
        "name": "set username (& exchanges)",
        "func": "const username = msg.payload;\nflow.set( 'username', username );\n// flow.set( 'exchanges', [ \n//     'weather', \n//     'savings',\n//     'production',\n//     'result',\n// ] );\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 380,
        "wires": [
            [
                "ef4490e950de297a"
            ]
        ]
    },
    {
        "id": "aed874d4f1b36917",
        "type": "link in",
        "z": "e6dee893d75f8487",
        "name": "link in read all",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "4eb47eaeb3907b94"
            ]
        ]
    },
    {
        "id": "4eb47eaeb3907b94",
        "type": "function",
        "z": "e6dee893d75f8487",
        "name": "set read all request",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst path = `/queues/${AW_VHOST}`;\nmsg.url = path;\nmsg.method = 'GET';\nmsg.payload = {};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 60,
        "wires": [
            [
                "2c0b22058da1bcf5"
            ]
        ]
    },
    {
        "id": "974c4086ed73627b",
        "type": "inject",
        "z": "e6dee893d75f8487",
        "name": "read all",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 440,
        "wires": [
            [
                "d93151c3e77b20b1"
            ]
        ]
    },
    {
        "id": "d93151c3e77b20b1",
        "type": "link call",
        "z": "e6dee893d75f8487",
        "name": "",
        "links": [
            "aed874d4f1b36917"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 300,
        "y": 440,
        "wires": [
            [
                "ef4490e950de297a"
            ]
        ]
    },
    {
        "id": "2c0b22058da1bcf5",
        "type": "link call",
        "z": "e6dee893d75f8487",
        "name": "call RabbitMQ api",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 450,
        "y": 60,
        "wires": [
            [
                "e34b921b3cc54c74"
            ]
        ]
    },
    {
        "id": "e34b921b3cc54c74",
        "type": "function",
        "z": "e6dee893d75f8487",
        "name": "get response",
        "func": "const { payload } = msg;\nconst names = payload.map( x => x.name );\nmsg.payload = names;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 60,
        "wires": [
            [
                "217db069e0e67795"
            ]
        ]
    },
    {
        "id": "9952037676678f3f",
        "type": "inject",
        "z": "fc91aadf3d6bd939",
        "name": "read all",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 440,
        "wires": [
            [
                "3ab17c818bbbcc29"
            ]
        ]
    },
    {
        "id": "eac48fe21d43e372",
        "type": "debug",
        "z": "fc91aadf3d6bd939",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 500,
        "wires": []
    },
    {
        "id": "ed54bdd0c19a55f3",
        "type": "function",
        "z": "fc91aadf3d6bd939",
        "name": "get response",
        "func": "const { payload } = msg;\nconst names = payload.map( x => x.name );\nmsg.payload = names;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 60,
        "wires": [
            [
                "0818c76f6907dc08"
            ]
        ]
    },
    {
        "id": "3f6ed7435b39070a",
        "type": "link call",
        "z": "fc91aadf3d6bd939",
        "name": "call RabbitMQ api",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 450,
        "y": 60,
        "wires": [
            [
                "ed54bdd0c19a55f3"
            ]
        ]
    },
    {
        "id": "bf788c2c1de55082",
        "type": "function",
        "z": "fc91aadf3d6bd939",
        "name": "set read-all request",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst path = `/bindings/${AW_VHOST}`\nmsg.url = path;\nmsg.method = 'GET';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 60,
        "wires": [
            [
                "3f6ed7435b39070a"
            ]
        ]
    },
    {
        "id": "c6be618e9bbbf499",
        "type": "link in",
        "z": "fc91aadf3d6bd939",
        "name": "link in read all",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "bf788c2c1de55082"
            ]
        ]
    },
    {
        "id": "0818c76f6907dc08",
        "type": "link out",
        "z": "fc91aadf3d6bd939",
        "name": "link out 7",
        "mode": "return",
        "links": [],
        "x": 925,
        "y": 180,
        "wires": []
    },
    {
        "id": "3ab17c818bbbcc29",
        "type": "link call",
        "z": "fc91aadf3d6bd939",
        "name": "call read all",
        "links": [
            "c6be618e9bbbf499"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 290,
        "y": 440,
        "wires": [
            [
                "eac48fe21d43e372"
            ]
        ]
    },
    {
        "id": "915fa3021e05ab88",
        "type": "function",
        "z": "fc91aadf3d6bd939",
        "name": "set create request",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst queues = msg.payload;\nconst body = {\n    // routing_key: \"my_routing_key\", \n    // arguments: {\"x-arg\": \"value\"}\n};\n\nnode.warn( queues );\nfor ( let queue of queues ) {\n    const exchange = queue.split( '.' )[ 1 ];\n    const path = `/bindings/${AW_VHOST}/e/${exchange}/q/${queue}`;\n    msg.url = path;\n    msg.payload = body;\n    msg.method = 'POST';\n    node.send( msg );\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 120,
        "wires": [
            [
                "5780daf37c85284e"
            ]
        ]
    },
    {
        "id": "4c10c1eed505d5a4",
        "type": "link in",
        "z": "fc91aadf3d6bd939",
        "name": "link in create",
        "links": [],
        "x": 55,
        "y": 120,
        "wires": [
            [
                "9a29932584187f24"
            ]
        ]
    },
    {
        "id": "6f43ee62e41b6e2a",
        "type": "link in",
        "z": "fc91aadf3d6bd939",
        "name": "link in read",
        "links": [],
        "x": 55,
        "y": 180,
        "wires": [
            [
                "cf51326012c532c2"
            ]
        ]
    },
    {
        "id": "40932d294578c87e",
        "type": "function",
        "z": "fc91aadf3d6bd939",
        "name": "set read request",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst queues = msg.payload;\n\nfor ( let queue of queues ) {\n    const exchange = queue.split( '.' )[ 1 ];\n    const path = `/bindings/${AW_VHOST}/e/${exchange}/q/${queue}`;\n    msg.url = path;\n    msg.method = 'GET';\n    node.send( msg );\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 180,
        "wires": [
            [
                "5780daf37c85284e"
            ]
        ]
    },
    {
        "id": "5cbfd51d5df9be44",
        "type": "link in",
        "z": "fc91aadf3d6bd939",
        "name": "link delete",
        "links": [],
        "x": 55,
        "y": 240,
        "wires": [
            [
                "b85189e1e09157ed"
            ]
        ]
    },
    {
        "id": "2e8dd8d7f98b2fc6",
        "type": "function",
        "z": "fc91aadf3d6bd939",
        "name": "set delete request",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst queues = msg.payload;\n\nfor ( let queue of queues ) {\n    const exchange = queue.split( '.' )[ 1 ];\n    const path = `/bindings/${AW_VHOST}/e/${exchange}/q/${queue}/~`;\n    msg.url = path;\n    msg.payload = {};\n    msg.method = 'DELETE';\n    node.send( msg );\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 240,
        "wires": [
            [
                "5780daf37c85284e"
            ]
        ]
    },
    {
        "id": "0dc0b37939fd99ab",
        "type": "inject",
        "z": "fc91aadf3d6bd939",
        "name": "create",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"username\":\"consumer1\"}",
        "payloadType": "json",
        "x": 110,
        "y": 500,
        "wires": [
            [
                "f3c4c1168ab3eadf"
            ]
        ]
    },
    {
        "id": "f3c4c1168ab3eadf",
        "type": "link call",
        "z": "fc91aadf3d6bd939",
        "name": "call create",
        "links": [
            "4c10c1eed505d5a4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 290,
        "y": 500,
        "wires": [
            [
                "eac48fe21d43e372"
            ]
        ]
    },
    {
        "id": "0eeaa333a50b9ef9",
        "type": "inject",
        "z": "fc91aadf3d6bd939",
        "name": "read",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 560,
        "wires": [
            [
                "192f94f89371e8f0"
            ]
        ]
    },
    {
        "id": "192f94f89371e8f0",
        "type": "link call",
        "z": "fc91aadf3d6bd939",
        "name": "call read",
        "links": [
            "6f43ee62e41b6e2a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 280,
        "y": 560,
        "wires": [
            [
                "eac48fe21d43e372"
            ]
        ]
    },
    {
        "id": "fe8c5df9d73b0af5",
        "type": "inject",
        "z": "fc91aadf3d6bd939",
        "name": "delete",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 620,
        "wires": [
            [
                "9c787c36bcf0db8f"
            ]
        ]
    },
    {
        "id": "9c787c36bcf0db8f",
        "type": "link call",
        "z": "fc91aadf3d6bd939",
        "name": "call delete",
        "links": [
            "5cbfd51d5df9be44"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 280,
        "y": 620,
        "wires": [
            [
                "eac48fe21d43e372"
            ]
        ]
    },
    {
        "id": "5780daf37c85284e",
        "type": "link call",
        "z": "fc91aadf3d6bd939",
        "name": "call RabbitMQ api",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 730,
        "y": 180,
        "wires": [
            [
                "0818c76f6907dc08"
            ]
        ]
    },
    {
        "id": "98e7fe307a01020a",
        "type": "inject",
        "z": "fc91aadf3d6bd939",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "consumer1",
        "payloadType": "str",
        "x": 100,
        "y": 380,
        "wires": [
            [
                "be461b1ebff3aece"
            ]
        ]
    },
    {
        "id": "be461b1ebff3aece",
        "type": "function",
        "z": "fc91aadf3d6bd939",
        "name": "set username",
        "func": "const username = msg.payload;\nflow.set( 'username', username );\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 380,
        "wires": [
            [
                "eac48fe21d43e372"
            ]
        ]
    },
    {
        "id": "e7d2d7645c6c6678",
        "type": "comment",
        "z": "fc91aadf3d6bd939",
        "name": "to test/debug the above operations",
        "info": "",
        "x": 180,
        "y": 320,
        "wires": []
    },
    {
        "id": "9a29932584187f24",
        "type": "link call",
        "z": "fc91aadf3d6bd939",
        "name": "call read all queues",
        "links": [
            "aed874d4f1b36917"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 210,
        "y": 120,
        "wires": [
            [
                "915fa3021e05ab88"
            ]
        ]
    },
    {
        "id": "cf51326012c532c2",
        "type": "link call",
        "z": "fc91aadf3d6bd939",
        "name": "call read all queues",
        "links": [
            "aed874d4f1b36917"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 210,
        "y": 180,
        "wires": [
            [
                "40932d294578c87e"
            ]
        ]
    },
    {
        "id": "b85189e1e09157ed",
        "type": "link call",
        "z": "fc91aadf3d6bd939",
        "name": "call read all queues",
        "links": [
            "aed874d4f1b36917"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 210,
        "y": 240,
        "wires": [
            [
                "2e8dd8d7f98b2fc6"
            ]
        ]
    },
    {
        "id": "9d8750f65038db75",
        "type": "function",
        "z": "08eda6c1b66e16e5",
        "name": "create vhost",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\n\nconst path = `/vhosts/${AW_VHOST}`;\n\nconst body = {\n    description: \"athens-water project\", \n    tags: \"athens,water\"\n};\n\nmsg.url = path;\nmsg.method = 'PUT';\nmsg.payload = body;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 120,
        "wires": [
            [
                "fc92ab505adc448e"
            ]
        ]
    },
    {
        "id": "fc92ab505adc448e",
        "type": "link call",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "0fa12d682a245aba"
            ]
        ]
    },
    {
        "id": "9d05317d2d3d7ad1",
        "type": "function",
        "z": "08eda6c1b66e16e5",
        "name": "retrieve vhost",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\n\nconst path = `/vhosts/${AW_VHOST}`;\n\nmsg.url = path;\nmsg.method = 'GET';\nmsg.payload = null;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 420,
        "wires": [
            [
                "bffd1ab283921d61"
            ]
        ]
    },
    {
        "id": "bffd1ab283921d61",
        "type": "link call",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 150,
        "y": 460,
        "wires": [
            [
                "22ea041ede3540cb"
            ]
        ]
    },
    {
        "id": "50a374ef88f9961b",
        "type": "function",
        "z": "08eda6c1b66e16e5",
        "name": "delete vhost",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\n\nconst path = `/vhosts/${AW_VHOST}`;\n\nmsg.url = path;\nmsg.method = 'DELETE';\nmsg.payload = null;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 400,
        "wires": [
            [
                "bcc2cbd5bc07d820"
            ]
        ]
    },
    {
        "id": "bcc2cbd5bc07d820",
        "type": "link call",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 830,
        "y": 440,
        "wires": [
            [
                "22ea041ede3540cb"
            ]
        ]
    },
    {
        "id": "f74f69771383e10e",
        "type": "inject",
        "z": "08eda6c1b66e16e5",
        "name": "go create vhost",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 60,
        "wires": [
            [
                "9d8750f65038db75"
            ]
        ]
    },
    {
        "id": "66c6ac0a31b83989",
        "type": "inject",
        "z": "08eda6c1b66e16e5",
        "name": "go retrieve vhost",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 360,
        "wires": [
            [
                "9d05317d2d3d7ad1"
            ]
        ]
    },
    {
        "id": "b15e9bf9306ba337",
        "type": "inject",
        "z": "08eda6c1b66e16e5",
        "name": "go delete vhost",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 680,
        "y": 60,
        "wires": [
            [
                "e95bf42cf5e47227"
            ]
        ]
    },
    {
        "id": "22ea041ede3540cb",
        "type": "debug",
        "z": "08eda6c1b66e16e5",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 540,
        "wires": []
    },
    {
        "id": "0fa12d682a245aba",
        "type": "function",
        "z": "08eda6c1b66e16e5",
        "name": "create exchange",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst AW_EXCHANGE = env.get( 'AW_EXCHANGE' );\n\nconst path = `/exchanges/${AW_VHOST}/${AW_EXCHANGE}`;\n\nconst body = {\n    type: \"direct\",\n    auto_delete: false, \n    durable: true, \n    internal: false, \n    arguments: {}   \n};\n\nmsg.url = path;\nmsg.method = 'PUT';\nmsg.payload = body;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 220,
        "wires": [
            [
                "f702bb7915c19f50"
            ]
        ]
    },
    {
        "id": "f702bb7915c19f50",
        "type": "link call",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "22ea041ede3540cb"
            ]
        ]
    },
    {
        "id": "24901ae9f7293c0c",
        "type": "function",
        "z": "08eda6c1b66e16e5",
        "name": "retrieve exchanges",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\n\nconst path = `/exchanges/${AW_VHOST}`;\n\nmsg.url = path;\nmsg.method = 'GET';\nmsg.payload = null;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 120,
        "wires": [
            [
                "9b2b051edc30dbe7"
            ]
        ]
    },
    {
        "id": "9b2b051edc30dbe7",
        "type": "link call",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 830,
        "y": 160,
        "wires": [
            [
                "29926587a615f050"
            ]
        ]
    },
    {
        "id": "29926587a615f050",
        "type": "split",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 790,
        "y": 220,
        "wires": [
            [
                "7eed5244245c2e69"
            ]
        ]
    },
    {
        "id": "f0a0b656105e894e",
        "type": "join",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 790,
        "y": 340,
        "wires": [
            [
                "50a374ef88f9961b"
            ]
        ]
    },
    {
        "id": "24e33f0cb14b29e8",
        "type": "link call",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 850,
        "y": 300,
        "wires": [
            [
                "f0a0b656105e894e"
            ]
        ]
    },
    {
        "id": "7eed5244245c2e69",
        "type": "function",
        "z": "08eda6c1b66e16e5",
        "name": "delete exchange",
        "func": "const { vhost, name } = msg.payload;\n\nconst path = `/api/exchanges/${vhost}/${name}`;\n\nconst body = null;\n\nmsg.url = path;\nmsg.method = 'DELETE';\nmsg.payload = body;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 260,
        "wires": [
            [
                "24e33f0cb14b29e8"
            ]
        ]
    },
    {
        "id": "e95bf42cf5e47227",
        "type": "function",
        "z": "08eda6c1b66e16e5",
        "name": "retrieve queues",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\n\nconst path = `/queues/${AW_VHOST}`;\n\nmsg.url = path;\nmsg.method = 'GET';\nmsg.payload = null;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 120,
        "wires": [
            [
                "aa9c519989dc1a09"
            ]
        ]
    },
    {
        "id": "aa9c519989dc1a09",
        "type": "link call",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 510,
        "y": 160,
        "wires": [
            [
                "75244b95c06fc39f"
            ]
        ]
    },
    {
        "id": "75244b95c06fc39f",
        "type": "split",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 220,
        "wires": [
            [
                "8ed5938c462721ce"
            ]
        ]
    },
    {
        "id": "38084c3372b500a2",
        "type": "join",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 470,
        "y": 340,
        "wires": [
            [
                "24901ae9f7293c0c"
            ]
        ]
    },
    {
        "id": "c3b212b787f8d4e1",
        "type": "link call",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 530,
        "y": 300,
        "wires": [
            [
                "38084c3372b500a2"
            ]
        ]
    },
    {
        "id": "8ed5938c462721ce",
        "type": "function",
        "z": "08eda6c1b66e16e5",
        "name": "delete queue",
        "func": "const { vhost, name } = msg.payload;\n\nconst path = `/api/queue/${vhost}/${name}`;\n\nconst body = null;\n\nmsg.url = path;\nmsg.method = 'DELETE';\nmsg.payload = body;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 260,
        "wires": [
            [
                "c3b212b787f8d4e1"
            ]
        ]
    },
    {
        "id": "547ff65f37d94edb",
        "type": "http in",
        "z": "c05f2d05a65c769e",
        "name": "",
        "url": "/register/username/:username/password/:password/keys/:keys",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 280,
        "y": 60,
        "wires": [
            [
                "9a30c7dfe3f94f88",
                "94d7a80de5ca2315"
            ]
        ]
    },
    {
        "id": "9a30c7dfe3f94f88",
        "type": "debug",
        "z": "c05f2d05a65c769e",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 60,
        "wires": []
    },
    {
        "id": "94d7a80de5ca2315",
        "type": "function",
        "z": "c05f2d05a65c769e",
        "name": "retrieve users",
        "func": "const path = '/users'\nmsg.url = path;\nmsg.method = 'GET';\nmsg.payload = null;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 140,
        "wires": [
            [
                "82dab64868db30c4"
            ]
        ]
    },
    {
        "id": "82dab64868db30c4",
        "type": "link call",
        "z": "c05f2d05a65c769e",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "587a5f1a2f1cf992"
            ]
        ]
    },
    {
        "id": "587a5f1a2f1cf992",
        "type": "function",
        "z": "c05f2d05a65c769e",
        "name": "validate username",
        "func": "const { payload } = msg;\n//node.warn(payload);\n\nconst usernames = payload.map( x => x.name );\nconst { username } = msg.req.params;\n//node.warn(usernames);\n\nif (usernames.includes(username ) ) {\n    throw `Error from Athens-water. Invalid registration. Username ${username} not available.`;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 220,
        "wires": [
            [
                "20063f98b5c417ee"
            ]
        ]
    },
    {
        "id": "20063f98b5c417ee",
        "type": "function",
        "z": "c05f2d05a65c769e",
        "name": "validate keys",
        "func": "const AW_ROUTING_KEYS = env.get( 'AW_ROUTING_KEYS' );\nconst routingKeys = AW_ROUTING_KEYS.split( ',' );\n// node.warn(routingKeys);\n\nlet { keys } = msg.req.params;\nkeys = keys.split( ',' );\n// node.warn(keys);\n\nfor ( let key of keys ) {\n    if (!routingKeys.includes(key ) ) {\n        throw `Error from Athens-water. Invalid registration. Routing key '${key}' not available.`;\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 280,
        "wires": [
            [
                "5ec2a1163f0b1f92"
            ]
        ]
    },
    {
        "id": "5ec2a1163f0b1f92",
        "type": "function",
        "z": "c05f2d05a65c769e",
        "name": "create user",
        "func": "const { username, password } = msg.req.params;\nconst path = `/users/${username}`\n\nconst body = {\n    password: password,\n    tags: \"athenswater,consumer\"\n};\n\n//node.warn( body )\nmsg.url = path;\nmsg.method = 'PUT';\nmsg.payload = body;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 140,
        "wires": [
            [
                "e8b47afadef0ca81"
            ]
        ]
    },
    {
        "id": "e8b47afadef0ca81",
        "type": "link call",
        "z": "c05f2d05a65c769e",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 490,
        "y": 180,
        "wires": [
            [
                "fc67e870266bf62e"
            ]
        ]
    },
    {
        "id": "adaffe23485f51e8",
        "type": "http response",
        "z": "c05f2d05a65c769e",
        "name": "send response",
        "statusCode": "",
        "headers": {},
        "x": 840,
        "y": 320,
        "wires": []
    },
    {
        "id": "45f722efd22e620b",
        "type": "change",
        "z": "c05f2d05a65c769e",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 380,
        "wires": [
            [
                "adaffe23485f51e8"
            ]
        ]
    },
    {
        "id": "f8be82e938fa0cc9",
        "type": "catch",
        "z": "c05f2d05a65c769e",
        "name": "",
        "scope": [
            "587a5f1a2f1cf992",
            "20063f98b5c417ee"
        ],
        "uncaught": false,
        "x": 810,
        "y": 420,
        "wires": [
            [
                "45f722efd22e620b"
            ]
        ]
    },
    {
        "id": "dca4afaac3038c25",
        "type": "function",
        "z": "c05f2d05a65c769e",
        "name": "set response",
        "func": "const { username, keys  } = msg.req.params;\nmsg.statusCode = 200;\nmsg.payload = `Hello ${username} from Athens-water. Your registration is ok, you should be able receiving messages for ${keys} routing key(s).`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 700,
        "wires": [
            [
                "adaffe23485f51e8"
            ]
        ]
    },
    {
        "id": "fc67e870266bf62e",
        "type": "function",
        "z": "c05f2d05a65c769e",
        "name": "create queue",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nlet { username } = msg.req.params;\nconst queue = `queue.${username}`;\n\nconst path = `/queues/${AW_VHOST}/${queue}`;\n\nconst body = {\n    auto_delete: false,\n    durable: true,\n    arguments:{},\n    // node:\"rabbit@smacmullen\"\n};\n\nmsg.url = path;\nmsg.method = 'PUT';\nmsg.payload = body;\nmsg.queue =queue;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 240,
        "wires": [
            [
                "3b5ba1898af07606"
            ]
        ]
    },
    {
        "id": "3b5ba1898af07606",
        "type": "link call",
        "z": "c05f2d05a65c769e",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 490,
        "y": 280,
        "wires": [
            [
                "885f297ecf1a7ca0"
            ]
        ]
    },
    {
        "id": "848321ee6ffc42ed",
        "type": "function",
        "z": "c05f2d05a65c769e",
        "name": "create binding",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst { exchange, queue, routingKey } = msg.payload;\n\nconst path = `/bindings/${AW_VHOST}/e/${exchange}/q/${queue}`;\n\nconst body = {\n     routing_key: routingKey, \n    //  arguments: {\"x-arg\": \"value\"}\n};\n\nmsg.url = path;\nmsg.method = 'POST';\nmsg.payload = body;\nmsg.binding = undefined;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 440,
        "wires": [
            [
                "b46fc170c98ce15f"
            ]
        ]
    },
    {
        "id": "962dbdc9e5a425da",
        "type": "split",
        "z": "c05f2d05a65c769e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 450,
        "y": 380,
        "wires": [
            [
                "848321ee6ffc42ed"
            ]
        ]
    },
    {
        "id": "885f297ecf1a7ca0",
        "type": "function",
        "z": "c05f2d05a65c769e",
        "name": "define bindings",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst AW_EXCHANGE = env.get( 'AW_EXCHANGE' );\nlet { keys } = msg.req.params;\nkeys = keys.split( ',' );\nconst { queue } = msg;\n\nconst bindings = [];\nfor ( let routingKey of keys ) {\n    bindings.push( { \n        exchange: AW_EXCHANGE, \n        queue,\n        routingKey, \n    } );\n}\n\nmsg.payload = bindings;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 340,
        "wires": [
            [
                "962dbdc9e5a425da"
            ]
        ]
    },
    {
        "id": "edc75caa6a942ef3",
        "type": "join",
        "z": "c05f2d05a65c769e",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 450,
        "y": 540,
        "wires": [
            [
                "ae2c12177510f34f"
            ]
        ]
    },
    {
        "id": "b46fc170c98ce15f",
        "type": "link call",
        "z": "c05f2d05a65c769e",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 510,
        "y": 480,
        "wires": [
            [
                "edc75caa6a942ef3"
            ]
        ]
    },
    {
        "id": "ae2c12177510f34f",
        "type": "function",
        "z": "c05f2d05a65c769e",
        "name": "create permissions",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst { username } = msg.req.params;\n\nconst path = `/permissions/${AW_VHOST}/${username}`\nconst body = {\n    // configure: \".*\",\n    // write: \".*\",\n    // read: \".*\",\n    // read: `^queue.*.${username}$`,\n    // read: `queue.${username}`,\n    configure: \"^$ \",\n    write: \"^$ \",\n    read: \".*\",\n};\n\nmsg.url = path;\nmsg.method = 'PUT';\nmsg.payload = body;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 600,
        "wires": [
            [
                "7c92b5d60b8c1c42"
            ]
        ]
    },
    {
        "id": "7c92b5d60b8c1c42",
        "type": "link call",
        "z": "c05f2d05a65c769e",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 490,
        "y": 640,
        "wires": [
            [
                "dca4afaac3038c25"
            ]
        ]
    },
    {
        "id": "f6e0d7bc799ed002",
        "type": "http in",
        "z": "caf565125e59062a",
        "name": "",
        "url": "/unregister/username/:username/password/:password",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 60,
        "wires": [
            [
                "bb7df6e8718b07b7",
                "d324e91b5e39b518"
            ]
        ]
    },
    {
        "id": "bb7df6e8718b07b7",
        "type": "debug",
        "z": "caf565125e59062a",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 60,
        "wires": []
    },
    {
        "id": "a211a7d5211cafab",
        "type": "http response",
        "z": "caf565125e59062a",
        "name": "send response",
        "statusCode": "",
        "headers": {},
        "x": 840,
        "y": 280,
        "wires": []
    },
    {
        "id": "d324e91b5e39b518",
        "type": "function",
        "z": "caf565125e59062a",
        "name": "retrieve users",
        "func": "const path = '/users'\nmsg.url = path;\nmsg.method = 'GET';\nmsg.payload = null;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 140,
        "wires": [
            [
                "3262c262f9d9fc9b"
            ]
        ]
    },
    {
        "id": "3262c262f9d9fc9b",
        "type": "link call",
        "z": "caf565125e59062a",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "f3e4619bb30501a9"
            ]
        ]
    },
    {
        "id": "f3e4619bb30501a9",
        "type": "function",
        "z": "caf565125e59062a",
        "name": "validate username",
        "func": "const { payload } = msg;\n//node.warn(payload);\n\nconst usernames = payload.map( x => x.name );\nconst { username } = msg.req.params;\n//node.warn(usernames);\n\nif (! usernames.includes(username ) ) {\n    throw `Error from Athens-water. User ${username} not exists.`;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 220,
        "wires": [
            [
                "1ad5c3e404d43eda"
            ]
        ]
    },
    {
        "id": "4e1f77a9616a6fbd",
        "type": "function",
        "z": "caf565125e59062a",
        "name": "create user",
        "func": "const { username } = msg.req.params;\n\nconst path = `/users/${username}`\nconst body = null;\n\nmsg.url = path;\nmsg.method = 'DELETE';\nmsg.payload = body;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 420,
        "wires": [
            [
                "5fd6cc1fbc5b81aa"
            ]
        ]
    },
    {
        "id": "5fd6cc1fbc5b81aa",
        "type": "link call",
        "z": "caf565125e59062a",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 490,
        "y": 460,
        "wires": [
            [
                "d2190fca0e60f2b1"
            ]
        ]
    },
    {
        "id": "abeaa50ce00c96cf",
        "type": "change",
        "z": "caf565125e59062a",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 340,
        "wires": [
            [
                "a211a7d5211cafab"
            ]
        ]
    },
    {
        "id": "542818c3b5acc0cf",
        "type": "catch",
        "z": "caf565125e59062a",
        "name": "",
        "scope": [
            "f3e4619bb30501a9",
            "8a552210a049ec13"
        ],
        "uncaught": false,
        "x": 810,
        "y": 380,
        "wires": [
            [
                "abeaa50ce00c96cf"
            ]
        ]
    },
    {
        "id": "d2190fca0e60f2b1",
        "type": "function",
        "z": "caf565125e59062a",
        "name": "set response",
        "func": "const { username  } = msg.req.params;\nmsg.statusCode = 200;\nmsg.payload = `User ${username} removed successfull from Athens-water.`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 520,
        "wires": [
            [
                "a211a7d5211cafab"
            ]
        ]
    },
    {
        "id": "ff6e2e737e3e4b65",
        "type": "function",
        "z": "caf565125e59062a",
        "name": "delete queue",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nlet { username } = msg.req.params;\nconst queue = `queue.${username}`;\n\nconst path = `/queues/${AW_VHOST}/${queue}`;\n\nconst body = null;\n\nmsg.url = path;\nmsg.method = 'DELETE';\nmsg.payload = body;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 320,
        "wires": [
            [
                "64081a0140c28b66"
            ]
        ]
    },
    {
        "id": "64081a0140c28b66",
        "type": "link call",
        "z": "caf565125e59062a",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 490,
        "y": 360,
        "wires": [
            [
                "4e1f77a9616a6fbd"
            ]
        ]
    },
    {
        "id": "eb0f4e73df5013d1",
        "type": "function",
        "z": "caf565125e59062a",
        "name": "delete binding",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst { source, destination, properties_key } = msg.payload;\n\nconst path = `/api/bindings/${AW_VHOST}/e/${source}/q/${destination}/${properties_key}`;\n\nconst body = null;\n\nmsg.url = path;\nmsg.method = 'DELETE';\nmsg.payload = body;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 180,
        "wires": [
            [
                "c9c50606bff10093"
            ]
        ]
    },
    {
        "id": "c4f06c18c0fe0a38",
        "type": "split",
        "z": "caf565125e59062a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 450,
        "y": 140,
        "wires": [
            [
                "eb0f4e73df5013d1"
            ]
        ]
    },
    {
        "id": "2ed36d42619b5f1d",
        "type": "join",
        "z": "caf565125e59062a",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 450,
        "y": 260,
        "wires": [
            [
                "ff6e2e737e3e4b65"
            ]
        ]
    },
    {
        "id": "c9c50606bff10093",
        "type": "link call",
        "z": "caf565125e59062a",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 510,
        "y": 220,
        "wires": [
            [
                "2ed36d42619b5f1d"
            ]
        ]
    },
    {
        "id": "4c153d3b2afe70f3",
        "type": "link call",
        "z": "caf565125e59062a",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 130,
        "y": 320,
        "wires": [
            [
                "bb7df6e8718b07b7",
                "c4f06c18c0fe0a38"
            ]
        ]
    },
    {
        "id": "1ad5c3e404d43eda",
        "type": "function",
        "z": "caf565125e59062a",
        "name": "retreive bindings",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst { username } = msg.req.params;\nconst queue = `queue.${username}`;\n\nconst path = `/queues/${AW_VHOST}/${queue}/bindings`;\nmsg.url = path;\nmsg.method = 'GET';\nmsg.payload = null;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 280,
        "wires": [
            [
                "4c153d3b2afe70f3"
            ]
        ]
    }
]