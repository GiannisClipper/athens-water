[
    {
        "id": "6d278dbe6de7a110",
        "type": "tab",
        "label": "start",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9e38695607437acd",
        "type": "tab",
        "label": "admin",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b196196f1ccccbbb",
        "type": "tab",
        "label": "database",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d7c8565c02c92dbd",
        "type": "tab",
        "label": "weather initialization",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "369c55fe302803f7",
        "type": "tab",
        "label": "savings initialization",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "aba327fbb26c5653",
        "type": "tab",
        "label": "production initialization",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1dc82d7c84b0491f",
        "type": "tab",
        "label": "weather request",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "61022c35528d6ffa",
        "type": "tab",
        "label": "savings request",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d21f4bda462bb9a5",
        "type": "tab",
        "label": "production request",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a8ca5f37ab8664a6",
        "type": "tab",
        "label": "savings clustering",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b7ec5c0795a0393f",
        "type": "tab",
        "label": "production clustering",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "42c32db0efd3bac1",
        "type": "tab",
        "label": "water clustering",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "11322c65b3bfae17",
        "type": "tab",
        "label": "weather clustering",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1701ccc8d2838ab0",
        "type": "tab",
        "label": "reservoirs clustering",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bac88e4feb8bab3d",
        "type": "tab",
        "label": "rabbitmq publish",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "61bc9ba532c143ca",
        "type": "tab",
        "label": "rabbitmq api",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "08eda6c1b66e16e5",
        "type": "tab",
        "label": "rabbitmq admin",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c05f2d05a65c769e",
        "type": "tab",
        "label": "rabbitmq register",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "caf565125e59062a",
        "type": "tab",
        "label": "rabbitmq unregister",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ccd26f1ff828de10",
        "type": "tab",
        "label": "Dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "746d8aad27723fd7",
        "type": "sqlitedb",
        "db": ".node-red/projects/athens-water/athens-water.sqlite",
        "mode": "RWC"
    },
    {
        "id": "09a55da13a5eea8d",
        "type": "sqlitedb",
        "db": "athens-water/athens-water.sqlite",
        "mode": "RWC"
    },
    {
        "id": "37e47c2be4e6d111",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "eydap.gr.crt",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "7b17c7ecbdcb71f0",
        "type": "amqp-broker",
        "name": "rabbitmq/labs",
        "host": "localhost",
        "port": "5672",
        "vhost": "labs",
        "tls": false,
        "credsFromSettings": false
    },
    {
        "id": "774630f253d36966",
        "type": "amqp-broker",
        "name": "",
        "host": "localhost",
        "port": "5672",
        "vhost": "athenswater",
        "tls": false,
        "credsFromSettings": true
    },
    {
        "id": "f95f44a518aa1c5e",
        "type": "amqp-broker",
        "name": "",
        "host": "localhost",
        "port": "5672",
        "vhost": "athenswater",
        "tls": false,
        "credsFromSettings": false
    },
    {
        "id": "0f96e66c24834495",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "61dc0696db7e299c",
        "type": "ui_tab",
        "name": "Register",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e5eb101865a4956c",
        "type": "ui_tab",
        "name": "Athens water",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "41d8d96855cdf066",
        "type": "ui_group",
        "name": "Water savings (avg)",
        "tab": "e5eb101865a4956c",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4afc52cffe622b4e",
        "type": "ui_group",
        "name": "Registration to RabbitMQ",
        "tab": "61dc0696db7e299c",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b184d28a483bd8a4",
        "type": "ui_spacer",
        "z": "ccd26f1ff828de10",
        "name": "spacer",
        "group": "0d73b135b3ecef8f",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "e9dadc9b91976a6c",
        "type": "ui_group",
        "name": "Water production (avg)",
        "tab": "e5eb101865a4956c",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f9e106f2f849bd54",
        "type": "ui_group",
        "name": "Savings / production (ratio)",
        "tab": "e5eb101865a4956c",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "98353c4bdf751f2b",
        "type": "ui_group",
        "name": "Precipitation (sum)",
        "tab": "e5eb101865a4956c",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f4a035a66294bf88",
        "type": "ui_spacer",
        "z": "ccd26f1ff828de10",
        "name": "spacer",
        "group": "4afc52cffe622b4e",
        "order": 2,
        "width": "1",
        "height": "1"
    },
    {
        "id": "9521260f5086eed6",
        "type": "inject",
        "z": "6d278dbe6de7a110",
        "name": "start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "b3ce7b20bc3e9643",
                "2b4ce55dfbdf7bf4"
            ]
        ]
    },
    {
        "id": "8c28ad9eafaca440",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 830,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "b3ce7b20bc3e9643",
        "type": "function",
        "z": "6d278dbe6de7a110",
        "name": "system configuration",
        "func": "const weatherUrl = \"https://archive-api.open-meteo.com/v1/archive?daily=weather_code,temperature_2m_min,temperature_2m_mean,temperature_2m_max,precipitation_sum,rain_sum,snowfall_sum&timezone=Europe/Athens&past_days=&latitude=&longitude=\";\nglobal.set( 'weatherUrl', weatherUrl );\n\nconst savingsUrl = \"https://www.eydap.gr/el/Controls/GeneralControls/SavingsDetails.aspx?DaysSpan=Day&Date=\";\nglobal.set( 'savingsUrl', savingsUrl );\n\nconst productionUrl = \"https://www.eydap.gr/el/Controls/GeneralControls/DrinkingWaterProductionDetails.aspx?DaysSpan=Day&Date=\";\nglobal.set( 'productionUrl', productionUrl );\n\nconst clusterLevels = [\n    { name: 'lower', color: 'LightPink' },\n    { name: 'low', color: 'Khaki' },\n    { name: 'mid', color: 'MediumAquaMarine' },\n    { name: 'high', color: 'DeepSkyBlue' },\n    { name: 'higher', color: 'DodgerBlue' }\n];\nglobal.set( 'clusterLevels', clusterLevels );\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 140,
        "wires": [
            [
                "53fa08e0fc78f899"
            ]
        ]
    },
    {
        "id": "203946c3788d69ed",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "b25dc8f8d8caacd2"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 180,
        "y": 340,
        "wires": [
            [
                "137b5884ab0ee30e"
            ]
        ]
    },
    {
        "id": "53fa08e0fc78f899",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "8a59f45495f1788b"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "22ae40ff7482ffd8"
            ]
        ]
    },
    {
        "id": "22ae40ff7482ffd8",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "e604ce7017cf9a7f"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 180,
        "y": 280,
        "wires": [
            [
                "203946c3788d69ed"
            ]
        ]
    },
    {
        "id": "b8a42aa1c8cdc8fe",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "19a9ec6c9f2b7b9e"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 520,
        "y": 340,
        "wires": [
            [
                "d3bef09c1516c13f"
            ]
        ]
    },
    {
        "id": "137b5884ab0ee30e",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "a3aeb5ed388a6be4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 520,
        "y": 220,
        "wires": [
            [
                "a7706206c42909fc"
            ]
        ]
    },
    {
        "id": "a7706206c42909fc",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "b3c337ed58cf68bd"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 530,
        "y": 280,
        "wires": [
            [
                "b8a42aa1c8cdc8fe"
            ]
        ]
    },
    {
        "id": "d3bef09c1516c13f",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "ccaf19d7f0d0e632"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 880,
        "y": 220,
        "wires": [
            [
                "984f5693c685252b"
            ]
        ]
    },
    {
        "id": "2b4ce55dfbdf7bf4",
        "type": "change",
        "z": "6d278dbe6de7a110",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'System state (' &\t'weatherLastDate: ' & $globalContext( 'weatherLastDate' )  & \t', savingsLastDate: ' & $globalContext( 'savingsLastDate' )  & \t', reservoirsClusteringDate: ' & $globalContext( 'reservoirsClusteringDate' )  & \t', productionLastDate: ' & $globalContext( 'productionLastDate' ) & \t', reservoirsClusteringDate: ' & $globalContext( 'reservoirsClusteringDate' )  & \t', savingsLastDate: ' & $globalContext( 'savingsLastDate' ) & \t', productionLastDate: ' & $globalContext( 'productionLastDate' ) & \t', weatherLastDate: ' & $globalContext( 'weatherLastDate' ) & \t', waterLastDate: ' & $globalContext( 'waterLastDate' ) & \t', commonLastDate: ' & $globalContext( 'commonLastDate' ) & \t')'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 60,
        "wires": [
            [
                "8c28ad9eafaca440"
            ]
        ]
    },
    {
        "id": "984f5693c685252b",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "825d7f4f827524c2"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 870,
        "y": 280,
        "wires": [
            [
                "b9f94398602677e8"
            ]
        ]
    },
    {
        "id": "b9f94398602677e8",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "a629a24ab77645c8"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 880,
        "y": 340,
        "wires": [
            [
                "d656a9f4dd3515b1"
            ]
        ]
    },
    {
        "id": "df32b1f787ac74b7",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "32699b29fe9fdf8a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 870,
        "y": 460,
        "wires": [
            [
                "b0b4dd2181b99a1a"
            ]
        ]
    },
    {
        "id": "d656a9f4dd3515b1",
        "type": "link call",
        "z": "6d278dbe6de7a110",
        "name": "",
        "links": [
            "0718f521c7ca40aa"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 860,
        "y": 400,
        "wires": [
            [
                "df32b1f787ac74b7"
            ]
        ]
    },
    {
        "id": "b0b4dd2181b99a1a",
        "type": "function",
        "z": "6d278dbe6de7a110",
        "name": "if waiting data... else...",
        "func": "const { timeRepr, daysDistance, nextDate } = global.get( 'dateHelpers' );\nconst today = timeRepr( new Date(), 'YYYY-MM-DD' );\n\nconst savingsLastDate = global.get( 'savingsLastDate' );\nconst productionLastDate = global.get( 'productionLastDate' );\nconst weatherLastDate = global.get( 'weatherLastDate' );\n\nif ( \n    daysDistance( savingsLastDate, today ) > 1 ||\n    daysDistance( productionLastDate, today ) > 1 ||\n    daysDistance( weatherLastDate, today ) > 1\n) {\n    return [ msg, null ];\n}\n\nreturn [ null, msg ];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 540,
        "wires": [
            [
                "b67f64674a8af7ba"
            ],
            [
                "b85c9585a110e6df"
            ]
        ]
    },
    {
        "id": "8a46e2de6bcd1993",
        "type": "delay",
        "z": "6d278dbe6de7a110",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 360,
        "y": 660,
        "wires": [
            [
                "53fa08e0fc78f899"
            ]
        ]
    },
    {
        "id": "b67f64674a8af7ba",
        "type": "change",
        "z": "6d278dbe6de7a110",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Data waiting...",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 620,
        "wires": [
            [
                "8c28ad9eafaca440",
                "8a46e2de6bcd1993"
            ]
        ]
    },
    {
        "id": "b85c9585a110e6df",
        "type": "change",
        "z": "6d278dbe6de7a110",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "No data waiting.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 620,
        "wires": [
            [
                "8c28ad9eafaca440",
                "1b01a0fe24d93130"
            ]
        ]
    },
    {
        "id": "1b01a0fe24d93130",
        "type": "delay",
        "z": "6d278dbe6de7a110",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "hours",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 620,
        "y": 660,
        "wires": [
            [
                "53fa08e0fc78f899"
            ]
        ]
    },
    {
        "id": "1cc0862b6d0ccf91",
        "type": "file",
        "z": "9e38695607437acd",
        "name": "write into log file",
        "filename": ".node-red/projects/athens-water/athens-water.log",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 230,
        "y": 140,
        "wires": [
            [
                "e509d3deb26aca5f"
            ]
        ]
    },
    {
        "id": "409d2af6ef2b6869",
        "type": "function",
        "z": "9e38695607437acd",
        "name": "set log message",
        "func": "const { timeRepr } = global.get( 'dateHelpers' );\n\nconst time = timeRepr( new Date(), 'YYYY-MM-DD HH:MM:SS' );\n\nconst message = msg.payload;\n\nmsg.payload = `${time} ${message}`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 100,
        "wires": [
            [
                "1cc0862b6d0ccf91"
            ]
        ]
    },
    {
        "id": "992e1a45369732e3",
        "type": "link in",
        "z": "9e38695607437acd",
        "name": "link in logger",
        "links": [],
        "x": 55,
        "y": 100,
        "wires": [
            [
                "66dca8af6b89b230",
                "409d2af6ef2b6869"
            ]
        ]
    },
    {
        "id": "e509d3deb26aca5f",
        "type": "link out",
        "z": "9e38695607437acd",
        "name": "link out 3",
        "mode": "return",
        "links": [],
        "x": 405,
        "y": 140,
        "wires": []
    },
    {
        "id": "66dca8af6b89b230",
        "type": "debug",
        "z": "9e38695607437acd",
        "name": "debug logger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 220,
        "y": 60,
        "wires": []
    },
    {
        "id": "e03ebe6b9c1e43be",
        "type": "catch",
        "z": "9e38695607437acd",
        "name": "",
        "scope": [
            "1cc0862b6d0ccf91",
            "bc33fac1bfdac6f3"
        ],
        "uncaught": false,
        "x": 630,
        "y": 140,
        "wires": [
            [
                "e5dd25d01ed47935"
            ]
        ]
    },
    {
        "id": "e5dd25d01ed47935",
        "type": "change",
        "z": "9e38695607437acd",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 100,
        "wires": [
            [
                "7c9527a0cc39587f"
            ]
        ]
    },
    {
        "id": "7c9527a0cc39587f",
        "type": "debug",
        "z": "9e38695607437acd",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 60,
        "wires": []
    },
    {
        "id": "bc33fac1bfdac6f3",
        "type": "file",
        "z": "9e38695607437acd",
        "name": "delete log file",
        "filename": ".node-red/projects/athens-water/athens-water.log",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 130,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "fd8fe79b83e94a46",
        "type": "inject",
        "z": "9e38695607437acd",
        "name": "trigger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "bc33fac1bfdac6f3"
            ]
        ]
    },
    {
        "id": "ad8fd501b129cfec",
        "type": "debug",
        "z": "9e38695607437acd",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 320,
        "wires": []
    },
    {
        "id": "06c779112978aaa2",
        "type": "function",
        "z": "9e38695607437acd",
        "name": "read globals",
        "func": "msg.payload = {\n    weatherLastDate: global.get( 'weatherLastDate' ),\n    locations: global.get( 'locations' ),\n\n    savingsLastDate: global.get( 'savingsLastDate' ),\n    reservoirs: global.get( 'reservoirs' ),\n\n    productionLastDate: global.get( 'productionLastDate' ),\n    factories: global.get( 'factories' ),\n\n    reservoirsClusteringDate: global.get( 'reservoirsClusteringDate' ),\n    savingsClusteringDate: global.get('savingsClusteringDate'),\n    productionClusteringDate: global.get('productionClusteringDate'),\n    weatherClusteringDate: global.get('weatherClusteringDate'),\n    waterClusteringDate: global.get('waterClusteringDate'),\n\n    reservoirsClusteringResult: global.get('reservoirsClusteringResult'),\n    savingsClusteringResult: global.get('savingsClusteringResult'),\n    productionClusteringResult: global.get('productionClusteringResult'),\n    weatherClusteringResult: global.get('weatherClusteringResult'),\n    waterClusteringResult: global.get('waterClusteringResult'),\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 280,
        "wires": [
            [
                "ad8fd501b129cfec"
            ]
        ]
    },
    {
        "id": "b48859fe2d07cd72",
        "type": "inject",
        "z": "9e38695607437acd",
        "name": "trigger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 380,
        "wires": [
            [
                "0578fa751ff3e995"
            ]
        ]
    },
    {
        "id": "0578fa751ff3e995",
        "type": "function",
        "z": "9e38695607437acd",
        "name": "clean globals",
        "func": "// global.set( 'weatherExitLoop', undefined );\n// global.set( 'savingsExitLoop', undefined );\n// global.set( 'productionExitLoop', undefined );\n\nglobal.set( 'weatherLastDate', undefined );\nglobal.set( 'savingsLastDate', undefined );\nglobal.set( 'productionLastDate', undefined );\n\nglobal.set( 'reservoirsClusteringDate', undefined );\nglobal.set( 'savingsClusteringDate', undefined );\nglobal.set( 'productionClusteringDate', undefined );\nglobal.set( 'weatherClusteringDate', undefined );\nglobal.set( 'waterClusteringDate', undefined );\n\nglobal.set('reservoirsClusteringResult', undefined);\nglobal.set('savingsClusteringResult', undefined);\nglobal.set('productionClusteringResult', undefined);\nglobal.set('weatherClusteringResult', undefined);\nglobal.set('waterClusteringResult', undefined);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "63251ea6481c533d",
        "type": "inject",
        "z": "9e38695607437acd",
        "name": "trigger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 240,
        "wires": [
            [
                "06c779112978aaa2"
            ]
        ]
    },
    {
        "id": "f717e318f24f4da8",
        "type": "inject",
        "z": "9e38695607437acd",
        "name": "trigger",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 280,
        "wires": [
            [
                "c15708cb8162f79b"
            ]
        ]
    },
    {
        "id": "c15708cb8162f79b",
        "type": "function",
        "z": "9e38695607437acd",
        "name": "delete savings after 31/5/2024",
        "func": "const query = `DELETE FROM savings WHERE date > '2024-05-31'`;\nmsg.topic = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 320,
        "wires": [
            [
                "f15393761f8974fb"
            ]
        ]
    },
    {
        "id": "f15393761f8974fb",
        "type": "link call",
        "z": "9e38695607437acd",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 680,
        "y": 360,
        "wires": [
            [
                "e7c1c04ba2994cae"
            ]
        ]
    },
    {
        "id": "e7c1c04ba2994cae",
        "type": "function",
        "z": "9e38695607437acd",
        "name": "delete production after 31/5/2024",
        "func": "const query = `DELETE FROM production WHERE date > '2024-05-31'`;\nmsg.topic = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 400,
        "wires": [
            [
                "5a0f0ecb08697c1a"
            ]
        ]
    },
    {
        "id": "50abc6c3d2209c10",
        "type": "function",
        "z": "9e38695607437acd",
        "name": "delete weather after 31/5/2024",
        "func": "const query = `DELETE FROM weather WHERE date > '2024-05-31'`;\nmsg.topic = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 480,
        "wires": [
            [
                "b49091d09b60d05f"
            ]
        ]
    },
    {
        "id": "5a0f0ecb08697c1a",
        "type": "link call",
        "z": "9e38695607437acd",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 680,
        "y": 440,
        "wires": [
            [
                "50abc6c3d2209c10"
            ]
        ]
    },
    {
        "id": "b49091d09b60d05f",
        "type": "link call",
        "z": "9e38695607437acd",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 680,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "a511b36ce1ec5ba8",
        "type": "comment",
        "z": "9e38695607437acd",
        "name": "for demo purposes",
        "info": "",
        "x": 670,
        "y": 240,
        "wires": []
    },
    {
        "id": "4f48bf4d39cb2c86",
        "type": "sqlite",
        "z": "b196196f1ccccbbb",
        "mydb": "746d8aad27723fd7",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "database",
        "x": 220,
        "y": 60,
        "wires": [
            [
                "798e2d4d2a82f43e"
            ]
        ]
    },
    {
        "id": "ab0e6d979d760a4a",
        "type": "link in",
        "z": "b196196f1ccccbbb",
        "name": "link in database",
        "links": [],
        "x": 65,
        "y": 60,
        "wires": [
            [
                "4f48bf4d39cb2c86"
            ]
        ]
    },
    {
        "id": "798e2d4d2a82f43e",
        "type": "link out",
        "z": "b196196f1ccccbbb",
        "name": "link out 4",
        "mode": "return",
        "links": [],
        "x": 615,
        "y": 60,
        "wires": []
    },
    {
        "id": "9e34cddef0583d1a",
        "type": "link call",
        "z": "b196196f1ccccbbb",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 870,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "8f9d3f4a82bebeac",
        "type": "catch",
        "z": "b196196f1ccccbbb",
        "name": "",
        "scope": [
            "4f48bf4d39cb2c86"
        ],
        "uncaught": false,
        "x": 850,
        "y": 180,
        "wires": [
            [
                "2895fae552596af5"
            ]
        ]
    },
    {
        "id": "2895fae552596af5",
        "type": "change",
        "z": "b196196f1ccccbbb",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 120,
        "wires": [
            [
                "9e34cddef0583d1a"
            ]
        ]
    },
    {
        "id": "8f50efdfff29c771",
        "type": "function",
        "z": "b196196f1ccccbbb",
        "name": "savings period30 query",
        "func": "const { startPeriod30 } = global.get('dateHelpers');\nconst date2 = msg.payload;\nconst date1 = startPeriod30(date2);\n\nconst [y1, m1, d1] = date1.split('-');\nconst [y2, m2, d2] = date2.split('-');\n\nconst period = `${d1}/${m1}-${d2}/${m2}`;\n\nconst query = y1 === y2\n?\n`\nSELECT \n    '${period}' AS period, \n    SUBSTR(date, 1, 4) AS year,\n    count(date) as days, \n    SUM(day_sum) AS period_sum, \n    AVG(day_sum) AS period_avg\nFROM\n(\n    SELECT \n        date, \n        SUM(quantity) AS day_sum, \n        avg(quantity) AS quantity\n    FROM savings\n    WHERE quantity > 0 \n    AND \n    (\n        (SUBSTR(date, 6, 2) = '${m1}' AND SUBSTR(date, 9, 2) >= '${d1}') \n        OR (SUBSTR(date, 6, 2) = '${m2}' AND SUBSTR(date, 9, 2) <= '${d2}')\n    )\n    GROUP BY date\n)\nGROUP BY SUBSTR(date, 1, 4)\n`\n:\n`\nSELECT \n    '${period}' AS period,\n    a.year AS aYear, b.year as bYear, a.year || '-' || b.year AS year,\n    a.days AS aDays, b.days as bDays, a.days + b.days AS days,\n    a.period_sum AS aPeriod_sum, b.period_sum AS bPeriod_sum, a.period_sum + b.period_sum AS period_sum,\n    ( a.period_sum + b.period_sum ) / ( a.days + b.days ) AS period_avg\nFROM\n(\n\tSELECT \n        SUBSTR(date,1,4) AS year, \n        count( date ) as days, \n        SUM( day_sum ) AS period_sum, \n        AVG( day_sum ) AS period_avg\n    FROM \n\t(\n\t\tSELECT \n            date, \n            SUM( quantity ) AS day_sum, \n            avg( quantity ) AS quantity \n\t\tFROM savings \n\t\tWHERE quantity > 0 AND SUBSTR(date,6,2) = '${m1}' AND SUBSTR(date,9,2) >= '${d1}'\n\t\tGROUP BY date\n\t)\n\tGROUP BY SUBSTR(date,1,4)\n) a\nJOIN\n(\n\tSELECT \n        SUBSTR(date,1,4) AS year, \n        count( date ) as days, \n        SUM( day_sum ) AS period_sum, \n        AVG( day_sum ) AS period_avg\n\tFROM \n\t(\n\t\tSELECT \n            date, \n            SUM( quantity ) AS day_sum, \n            avg( quantity ) AS quantity \n\t\tFROM savings \n\t\tWHERE quantity > 0 AND SUBSTR(date,6,2) = '${m2}' AND SUBSTR(date,9,2) <= '${d2}'\n\t\tGROUP BY date\n\t)\n\tGROUP BY SUBSTR(date,1,4)\n) b\nON CAST(a.year AS INT) = CAST(b.year AS INT)-1\n`\n;\n\nmsg.topic = query;\nmsg.payload = query;\nmsg.joinKey = 'savings';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 180,
        "wires": [
            [
                "798e2d4d2a82f43e"
            ]
        ]
    },
    {
        "id": "9478bf2057f22b65",
        "type": "link in",
        "z": "b196196f1ccccbbb",
        "name": "link in savings period30 query",
        "links": [],
        "x": 65,
        "y": 180,
        "wires": [
            [
                "8f50efdfff29c771"
            ]
        ]
    },
    {
        "id": "e816eacc62dca086",
        "type": "function",
        "z": "b196196f1ccccbbb",
        "name": "production period30 query",
        "func": "const { startPeriod30 } = global.get('dateHelpers');\nconst date2 = msg.payload;\nconst date1 = startPeriod30(date2);\n\nconst [y1, m1, d1] = date1.split('-');\nconst [y2, m2, d2] = date2.split('-');\n\nconst period = `${d1}/${m1}-${d2}/${m2}`;\n\nconst query = y1 === y2\n    ?\n    `\nSELECT \n    '${period}' AS period, \n    SUBSTR(date, 1, 4) AS year,\n    count(date) as days, \n    SUM(day_sum) AS period_sum, \n    AVG(day_sum) AS period_avg\nFROM\n(\n    SELECT \n        date, \n        SUM(quantity) AS day_sum, \n        avg(quantity) AS quantity\n    FROM production\n    WHERE quantity > 0 \n    AND \n    (\n        (SUBSTR(date, 6, 2) = '${m1}' AND SUBSTR(date, 9, 2) >= '${d1}') \n        OR (SUBSTR(date, 6, 2) = '${m2}' AND SUBSTR(date, 9, 2) <= '${d2}')\n    )\n    GROUP BY date\n)\nGROUP BY SUBSTR(date, 1, 4)\n`\n    :\n    `\nSELECT \n    '${period}' AS period,\n    a.year AS aYear, b.year as bYear, a.year || '-' || b.year AS year,\n    a.days AS aDays, b.days as bDays, a.days + b.days AS days,\n    a.period_sum AS aPeriod_sum, b.period_sum AS bPeriod_sum, a.period_sum + b.period_sum AS period_sum,\n    ( a.period_sum + b.period_sum ) / ( a.days + b.days ) AS period_avg\nFROM\n(\n\tSELECT \n        SUBSTR(date,1,4) AS year, \n        count( date ) as days, \n        SUM( day_sum ) AS period_sum, \n        AVG( day_sum ) AS period_avg\n    FROM \n\t(\n\t\tSELECT \n            date, \n            SUM( quantity ) AS day_sum, \n            avg( quantity ) AS quantity \n\t\tFROM production \n\t\tWHERE quantity > 0 AND SUBSTR(date,6,2) = '${m1}' AND SUBSTR(date,9,2) >= '${d1}'\n\t\tGROUP BY date\n\t)\n\tGROUP BY SUBSTR(date,1,4)\n) a\nJOIN\n(\n\tSELECT \n        SUBSTR(date,1,4) AS year, \n        count( date ) as days, \n        SUM( day_sum ) AS period_sum, \n        AVG( day_sum ) AS period_avg\n\tFROM \n\t(\n\t\tSELECT \n            date, \n            SUM( quantity ) AS day_sum, \n            avg( quantity ) AS quantity \n\t\tFROM production \n\t\tWHERE quantity > 0 AND SUBSTR(date,6,2) = '${m2}' AND SUBSTR(date,9,2) <= '${d2}'\n\t\tGROUP BY date\n\t)\n\tGROUP BY SUBSTR(date,1,4)\n) b\nON CAST(a.year AS INT) = CAST(b.year AS INT)-1\n`\n    ;\n\nmsg.topic = query;\nmsg.payload = query;\nmsg.joinKey = 'production';\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 240,
        "wires": [
            [
                "798e2d4d2a82f43e"
            ]
        ]
    },
    {
        "id": "5e618123b5224604",
        "type": "function",
        "z": "b196196f1ccccbbb",
        "name": "reservoirs period30 query",
        "func": "/*\nUPDATE reservoirs SET lat = 38.66, lon = 21.85 WHERE id == 1;\nUPDATE reservoirs SET lat = 38.16, lon = 23.90 WHERE id == 2;\nUPDATE reservoirs SET lat = 38.54, lon = 22.16 WHERE id == 3;\nUPDATE reservoirs SET lat = 38.40, lon = 23.28 WHERE id == 4;\n*/\n\nconst { startPeriod30 } = global.get('dateHelpers');\nconst date2 = msg.payload;\nconst date1 = startPeriod30(date2);\n\nconst [y1, m1, d1] = date1.split('-');\nconst [y2, m2, d2] = date2.split('-');\n\nconst period = `${d1}/${m1}-${d2}/${m2}`;\n\nconst query = y1 === y2\n    ?\n    `\nSELECT \n    '${period}' AS period, \n    reservoir_id, \n    SUBSTR(date, 1, 4) AS year,\n    count(date) as days, \n    SUM(day_sum) AS period_sum, \n    AVG(day_sum) AS period_avg\nFROM\n(\n    SELECT \n        reservoir_id,\n        date, \n        SUM(quantity) AS day_sum, \n        avg(quantity) AS quantity\n    FROM savings\n    WHERE quantity > 0 \n    AND \n    (\n        (SUBSTR(date, 6, 2) = '${m1}' AND SUBSTR(date, 9, 2) >= '${d1}') \n        OR (SUBSTR(date, 6, 2) = '${m2}' AND SUBSTR(date, 9, 2) <= '${d2}')\n    )\n    GROUP BY date, reservoir_id\n)\nGROUP BY SUBSTR(date, 1, 4), reservoir_id\n`\n    :\n    `\nSELECT \n    '${period}' AS period, a.reservoir_id AS reservoir_id,\n    a.year AS aYear, b.year as bYear, a.year || '-' || b.year AS year,\n    a.days AS aDays, b.days as bDays, a.days + b.days AS days,\n    a.period_sum AS aPeriod_sum, b.period_sum AS bPeriod_sum, a.period_sum + b.period_sum AS period_sum,\n    ( a.period_sum + b.period_sum ) / ( a.days + b.days ) AS period_avg\nFROM\n(\n\tSELECT \n        reservoir_id, \n        SUBSTR(date,1,4) AS year, \n        count( date ) as days, \n        SUM( day_sum ) AS period_sum, \n        AVG( day_sum ) AS period_avg\n    FROM \n\t(\n\t\tSELECT \n            reservoir_id, \n            date, \n            SUM( quantity ) AS day_sum, \n            avg( quantity ) AS quantity \n\t\tFROM savings \n\t\tWHERE quantity > 0 AND SUBSTR(date,6,2) = '${m1}' AND SUBSTR(date,9,2) >= '${d1}'\n\t\tGROUP BY date, reservoir_id\n\t)\n\tGROUP BY SUBSTR(date,1,4), reservoir_id\n) a\nJOIN\n(\n\tSELECT \n        reservoir_id, \n        SUBSTR(date,1,4) AS year, \n        count( date ) as days, \n        SUM( day_sum ) AS period_sum, \n        AVG( day_sum ) AS period_avg\n\tFROM \n\t(\n\t\tSELECT \n            reservoir_id, \n            date, \n            SUM( quantity ) AS day_sum, \n            avg( quantity ) AS quantity \n\t\tFROM savings \n\t\tWHERE quantity > 0 AND SUBSTR(date,6,2) = '${m2}' AND SUBSTR(date,9,2) <= '${d2}'\n\t\tGROUP BY date, reservoir_id\n\t)\n\tGROUP BY SUBSTR(date,1,4), reservoir_id\n) b\nON CAST(a.year AS INT) = CAST(b.year AS INT)-1 AND a.reservoir_id = b.reservoir_id\n`\n    ;\n\nmsg.topic = query;\nmsg.payload = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 120,
        "wires": [
            [
                "798e2d4d2a82f43e"
            ]
        ]
    },
    {
        "id": "931929f7293986d3",
        "type": "function",
        "z": "b196196f1ccccbbb",
        "name": "weather period30 query",
        "func": "const { startPeriod30 } = global.get('dateHelpers');\nconst date2 = msg.payload;\nconst date1 = startPeriod30(date2);\n\nconst [y1, m1, d1] = date1.split('-');\nconst [y2, m2, d2] = date2.split('-');\n\nconst period = `${d1}/${m1}-${d2}/${m2}`;\n\nconst query = y1 === y2\n    ?\n    `\nSELECT \n    '${period}' AS period,\n    SUBSTR(date, 1, 4) AS year,\n    SUM(precipitation_sum) AS precipitation_sum\nFROM weather \nWHERE (SUBSTR(date, 6, 2) = '${m1}' AND SUBSTR(date, 9, 2) >= '${d1}') \nOR (SUBSTR(date, 6, 2) = '${m2}' AND SUBSTR(date, 9, 2) <= '${d2}')\nGROUP BY SUBSTR(date, 1, 4)\n`\n    :\n    `\nSELECT\n    '${period}' AS period,\n    a.year AS aYear, b.year as bYear, a.year || '-' || b.year AS year,\n    a.precipitation_sum + b.precipitation_sum AS precipitation_sum\nFROM\n(\n    SELECT\n        '${period}' AS period,\n        SUBSTR(date, 1, 4) AS year,\n        SUM(precipitation_sum) AS precipitation_sum\n    FROM weather \n    WHERE SUBSTR(date, 6, 2) = '${m1}' AND SUBSTR(date, 9, 2) >= '${d1}'\n    GROUP BY SUBSTR(date, 1, 4)\n) a\nJOIN\n(\n    SELECT\n        '${period}' AS period,\n        SUBSTR(date, 1, 4) AS year,\n        SUM(precipitation_sum) AS precipitation_sum\n    FROM weather \n    WHERE SUBSTR(date, 6, 2) = '${m2}' AND SUBSTR(date, 9, 2) <= '${d2}'\n    GROUP BY SUBSTR(date, 1, 4)\n) b\nON CAST(a.year AS INT) = CAST(b.year AS INT)-1\n`\n    ;\n\nmsg.topic = query;\nmsg.payload = query;\nmsg.joinKey = 'weather';\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 300,
        "wires": [
            [
                "798e2d4d2a82f43e"
            ]
        ]
    },
    {
        "id": "e1cb944c3d6d1a78",
        "type": "link in",
        "z": "b196196f1ccccbbb",
        "name": "link in weather period30 query",
        "links": [],
        "x": 65,
        "y": 300,
        "wires": [
            [
                "931929f7293986d3"
            ]
        ]
    },
    {
        "id": "8438ec33152a3341",
        "type": "link in",
        "z": "b196196f1ccccbbb",
        "name": "link in production period30 query",
        "links": [],
        "x": 65,
        "y": 240,
        "wires": [
            [
                "e816eacc62dca086"
            ]
        ]
    },
    {
        "id": "024b62a1bbbeb6dd",
        "type": "link in",
        "z": "b196196f1ccccbbb",
        "name": "link in reservoirs period30 query",
        "links": [],
        "x": 65,
        "y": 120,
        "wires": [
            [
                "5e618123b5224604"
            ]
        ]
    },
    {
        "id": "0934098869fcb268",
        "type": "link out",
        "z": "d7c8565c02c92dbd",
        "name": "link out 1",
        "mode": "return",
        "links": [],
        "x": 795,
        "y": 340,
        "wires": []
    },
    {
        "id": "af66bd9217a38532",
        "type": "function",
        "z": "d7c8565c02c92dbd",
        "name": "select last date",
        "func": "const query = \"\\\n    SELECT MAX(date) as lastDate \\\n    FROM weather; \\\n\";\n\nmsg.topic = query;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 120,
        "wires": [
            [
                "d0991d10c4ce3042"
            ]
        ]
    },
    {
        "id": "cdb267699f7f8439",
        "type": "function",
        "z": "d7c8565c02c92dbd",
        "name": "set last date",
        "func": "const rows = msg.payload;\n\nif ( rows.length === 0 ) {\n    throw \"[ERROR] No previous weather data found.\"\n}\n\nconst { lastDate } = rows[ 0 ];\nglobal.set( 'weatherLastDate', lastDate );\n\nmsg.payload = `Initial weather last date: ${lastDate}`;\nmsg.topic = undefined;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 200,
        "wires": [
            [
                "eefbcba086f74da2",
                "3e3759343661ea8a"
            ]
        ]
    },
    {
        "id": "d0991d10c4ce3042",
        "type": "link call",
        "z": "d7c8565c02c92dbd",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 160,
        "wires": [
            [
                "cdb267699f7f8439"
            ]
        ]
    },
    {
        "id": "b25dc8f8d8caacd2",
        "type": "link in",
        "z": "d7c8565c02c92dbd",
        "name": "link in weather initialization",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "7ea925825ff95888"
            ]
        ]
    },
    {
        "id": "eefbcba086f74da2",
        "type": "link call",
        "z": "d7c8565c02c92dbd",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 850,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "3e3759343661ea8a",
        "type": "function",
        "z": "d7c8565c02c92dbd",
        "name": "select locations",
        "func": "const query = \"\\\n    SELECT id, name_el, name_en, lat, lon \\\n    FROM locations; \\\n\";\n\nmsg.topic = query;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 260,
        "wires": [
            [
                "8867e13fca9a584d"
            ]
        ]
    },
    {
        "id": "8867e13fca9a584d",
        "type": "link call",
        "z": "d7c8565c02c92dbd",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 300,
        "wires": [
            [
                "d094265b5a62e802"
            ]
        ]
    },
    {
        "id": "d094265b5a62e802",
        "type": "function",
        "z": "d7c8565c02c92dbd",
        "name": "set locations",
        "func": "const rows = msg.payload;\nglobal.set( 'locations', rows );\n\nmsg.payload = `Initial weather locations (${rows.length})`;\nmsg.topic = undefined;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 340,
        "wires": [
            [
                "eefbcba086f74da2",
                "0934098869fcb268"
            ]
        ]
    },
    {
        "id": "7ea925825ff95888",
        "type": "function",
        "z": "d7c8565c02c92dbd",
        "name": "if already done... else...",
        "func": "const lastDate = global.get( 'weatherLastDate' );\nconst locations = global.get( 'locations' );\n\nif ( lastDate && locations ) {\n    msg.payload = \"Weather already initialized.\";\n    return [ msg, null ];\n}\n\nmsg.payload = \"Weather initialization.\";\nreturn [ null, msg ];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 60,
        "wires": [
            [
                "eefbcba086f74da2",
                "0934098869fcb268"
            ],
            [
                "eefbcba086f74da2",
                "af66bd9217a38532"
            ]
        ]
    },
    {
        "id": "f198c851a6a4ef4e",
        "type": "catch",
        "z": "d7c8565c02c92dbd",
        "name": "",
        "scope": [
            "7ea925825ff95888"
        ],
        "uncaught": false,
        "x": 830,
        "y": 160,
        "wires": [
            [
                "979e04fe375e210f"
            ]
        ]
    },
    {
        "id": "979e04fe375e210f",
        "type": "change",
        "z": "d7c8565c02c92dbd",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 120,
        "wires": [
            [
                "eefbcba086f74da2"
            ]
        ]
    },
    {
        "id": "2d93842496444882",
        "type": "link out",
        "z": "369c55fe302803f7",
        "name": "link out 15",
        "mode": "return",
        "links": [],
        "x": 795,
        "y": 340,
        "wires": []
    },
    {
        "id": "9b97c41f2e94dbd7",
        "type": "function",
        "z": "369c55fe302803f7",
        "name": "select last date",
        "func": "const query = \"\\\n    SELECT MAX(date) as lastDate \\\n    FROM savings; \\\n\";\n\nmsg.topic = query;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 120,
        "wires": [
            [
                "be738c7b07e56503"
            ]
        ]
    },
    {
        "id": "2e7b1715c5b1248d",
        "type": "function",
        "z": "369c55fe302803f7",
        "name": "set last date",
        "func": "const rows = msg.payload;\n\nif ( rows.length === 0 ) {\n    throw \"[ERROR] No previous savings data found.\"\n}\n\nconst { lastDate } = rows[ 0 ];\n\nglobal.set( 'savingsLastDate', lastDate );\n\nmsg.payload = `Initial savings last date: ${lastDate}`;\nmsg.topic = undefined;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 200,
        "wires": [
            [
                "bd670a6c945626b3",
                "4c0cdc252d4eb87f"
            ]
        ]
    },
    {
        "id": "be738c7b07e56503",
        "type": "link call",
        "z": "369c55fe302803f7",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 160,
        "wires": [
            [
                "2e7b1715c5b1248d"
            ]
        ]
    },
    {
        "id": "8a59f45495f1788b",
        "type": "link in",
        "z": "369c55fe302803f7",
        "name": "link in savings initialization",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "64214e1c1947fd0e"
            ]
        ]
    },
    {
        "id": "bd670a6c945626b3",
        "type": "link call",
        "z": "369c55fe302803f7",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 850,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "4c0cdc252d4eb87f",
        "type": "function",
        "z": "369c55fe302803f7",
        "name": "select reservoirs",
        "func": "const query = \"\\\n    SELECT id, name_el, name_en, lat, lon \\\n    FROM reservoirs; \\\n\";\n\nmsg.topic = query;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 260,
        "wires": [
            [
                "2afbe3378ab16db1"
            ]
        ]
    },
    {
        "id": "2afbe3378ab16db1",
        "type": "link call",
        "z": "369c55fe302803f7",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 300,
        "wires": [
            [
                "fc76c71878067fc5"
            ]
        ]
    },
    {
        "id": "fc76c71878067fc5",
        "type": "function",
        "z": "369c55fe302803f7",
        "name": "set reservoirs",
        "func": "const rows = msg.payload;\nglobal.set( 'reservoirs', rows );\n\nmsg.payload = `Initial reservoirs (${rows.length})`;\nmsg.topic = undefined;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 340,
        "wires": [
            [
                "bd670a6c945626b3",
                "2d93842496444882"
            ]
        ]
    },
    {
        "id": "64214e1c1947fd0e",
        "type": "function",
        "z": "369c55fe302803f7",
        "name": "if already done... else...",
        "func": "const lastDate = global.get( 'savingsLastDate' );\nconst reservoirs = global.get( 'reservoirs' );\n\nif ( lastDate && reservoirs ) {\n    msg.payload = \"Savings already initialized.\";\n    return [ msg, null ];\n}\n\nmsg.payload = \"Savings initialization.\";\nreturn [ null, msg ];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 60,
        "wires": [
            [
                "bd670a6c945626b3",
                "2d93842496444882"
            ],
            [
                "bd670a6c945626b3",
                "9b97c41f2e94dbd7"
            ]
        ]
    },
    {
        "id": "0668960e97ea986a",
        "type": "catch",
        "z": "369c55fe302803f7",
        "name": "",
        "scope": [
            "64214e1c1947fd0e"
        ],
        "uncaught": false,
        "x": 830,
        "y": 160,
        "wires": [
            [
                "371b01f758992a25"
            ]
        ]
    },
    {
        "id": "371b01f758992a25",
        "type": "change",
        "z": "369c55fe302803f7",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 120,
        "wires": [
            [
                "bd670a6c945626b3"
            ]
        ]
    },
    {
        "id": "3dca08942f45f34b",
        "type": "link out",
        "z": "aba327fbb26c5653",
        "name": "link out 16",
        "mode": "return",
        "links": [],
        "x": 795,
        "y": 340,
        "wires": []
    },
    {
        "id": "6f07c6e7866c91db",
        "type": "function",
        "z": "aba327fbb26c5653",
        "name": "select last date",
        "func": "const query = \"\\\n    SELECT MAX(date) as lastDate \\\n    FROM production; \\\n\";\n\nmsg.topic = query;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 120,
        "wires": [
            [
                "7eb3697275baa550"
            ]
        ]
    },
    {
        "id": "85d5271db264427f",
        "type": "function",
        "z": "aba327fbb26c5653",
        "name": "set last date",
        "func": "const rows = msg.payload;\n\nif ( rows.length === 0 ) {\n    throw \"[ERROR] No previous production data found.\"\n}\n\nconst { lastDate } = rows[ 0 ];\nglobal.set( 'productionLastDate', lastDate );\n\nmsg.payload = `Initial production last date: ${lastDate}`;\nmsg.topic = undefined;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 200,
        "wires": [
            [
                "d32524de155786ef",
                "7b61b4f0c034ab72"
            ]
        ]
    },
    {
        "id": "7eb3697275baa550",
        "type": "link call",
        "z": "aba327fbb26c5653",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 160,
        "wires": [
            [
                "85d5271db264427f"
            ]
        ]
    },
    {
        "id": "e604ce7017cf9a7f",
        "type": "link in",
        "z": "aba327fbb26c5653",
        "name": "link in production initialization",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "0da6883389d1746f"
            ]
        ]
    },
    {
        "id": "d32524de155786ef",
        "type": "link call",
        "z": "aba327fbb26c5653",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 850,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "7b61b4f0c034ab72",
        "type": "function",
        "z": "aba327fbb26c5653",
        "name": "select factories",
        "func": "const query = \"\\\n    SELECT id, name_el, name_en, lat, lon \\\n    FROM factories; \\\n\";\n\nmsg.topic = query;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 260,
        "wires": [
            [
                "3ee08acb42f62f86"
            ]
        ]
    },
    {
        "id": "3ee08acb42f62f86",
        "type": "link call",
        "z": "aba327fbb26c5653",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 300,
        "wires": [
            [
                "ef91bc11b2cc144f"
            ]
        ]
    },
    {
        "id": "ef91bc11b2cc144f",
        "type": "function",
        "z": "aba327fbb26c5653",
        "name": "set factories",
        "func": "const rows = msg.payload;\nglobal.set( 'factories', rows );\n\nmsg.payload = `Initial factories (${rows.length})`;\nmsg.topic = undefined;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 340,
        "wires": [
            [
                "d32524de155786ef",
                "3dca08942f45f34b"
            ]
        ]
    },
    {
        "id": "0da6883389d1746f",
        "type": "function",
        "z": "aba327fbb26c5653",
        "name": "if already done... else...",
        "func": "const lastDate = global.get( 'productionLastDate' );\nconst factories = global.get( 'factories' );\n\nif ( lastDate && factories ) {\n    msg.payload = \"Production already initialized.\";\n    return [ msg, null ];\n}\n\nmsg.payload = \"Production initialization.\";\nreturn [ null, msg ];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 60,
        "wires": [
            [
                "d32524de155786ef",
                "3dca08942f45f34b"
            ],
            [
                "d32524de155786ef",
                "6f07c6e7866c91db"
            ]
        ]
    },
    {
        "id": "df5fe4aaedba20c4",
        "type": "catch",
        "z": "aba327fbb26c5653",
        "name": "",
        "scope": [
            "0da6883389d1746f"
        ],
        "uncaught": false,
        "x": 830,
        "y": 160,
        "wires": [
            [
                "135eb59c810fe43e"
            ]
        ]
    },
    {
        "id": "135eb59c810fe43e",
        "type": "change",
        "z": "aba327fbb26c5653",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 120,
        "wires": [
            [
                "d32524de155786ef"
            ]
        ]
    },
    {
        "id": "19a9ec6c9f2b7b9e",
        "type": "link in",
        "z": "1dc82d7c84b0491f",
        "name": "link in weather request",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "2fb4cc5afb478162"
            ]
        ]
    },
    {
        "id": "2fb4cc5afb478162",
        "type": "function",
        "z": "1dc82d7c84b0491f",
        "name": "if already done... else...",
        "func": "const { timeRepr, daysDistance, nextDate } = global.get( 'dateHelpers' );\nconst today = timeRepr( new Date(), 'YYYY-MM-DD' );\n\nconst lastDate = global.get( 'weatherLastDate' );\n\nif ( daysDistance( lastDate, today ) <= 1 ) {\n    msg.payload = \"Weather up to date.\"\n    return [ msg, null ];\n}\n\nconst nextLastDate = timeRepr( nextDate( lastDate ), 'YYYY-MM-DD' );\nmsg.payload = nextLastDate;\n\nreturn [ null, msg ];\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 60,
        "wires": [
            [
                "d30b920902618358",
                "1d13a35b302aaeed"
            ],
            [
                "206f7a0874dd9852"
            ]
        ]
    },
    {
        "id": "206f7a0874dd9852",
        "type": "function",
        "z": "1dc82d7c84b0491f",
        "name": "prepare url",
        "func": "const { timeRepr, daysDistance, nextDate } = global.get( 'dateHelpers' );\n\nconst locations = global.get( 'locations' );\nconst lat = locations.map( l => l.lat ).join( ',' );\nconst lon = locations.map( l => l.lon ).join( ',' );\n\nconst requestDate = msg.payload;\nconst today = timeRepr( new Date(), 'YYYY-MM-DD' );\nconst past_days = daysDistance( requestDate, today );\n\nlet url = global.get( 'weatherUrl' );\nurl = url.replace( \"past_days=\", `past_days=${past_days}` );\nurl = url.replace( \"latitude=\", `latitude=${lat}` );\nurl = url.replace( \"longitude=\", `longitude=${lon}` );\n\n// global.set( 'weatherLastDate', requestDate );\n\nmsg.url = url;\nmsg.requestParams = {\n    requestDate,\n    past_days,\n};\n\nmsg.payload = `(${requestDate}) => ${url}`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 140,
        "wires": [
            [
                "1d13a35b302aaeed",
                "40d5847be55c9a2c"
            ]
        ]
    },
    {
        "id": "40d5847be55c9a2c",
        "type": "http request",
        "z": "1dc82d7c84b0491f",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 210,
        "y": 180,
        "wires": [
            [
                "9eeb04756ec868d7"
            ]
        ]
    },
    {
        "id": "1d13a35b302aaeed",
        "type": "link call",
        "z": "1dc82d7c84b0491f",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 850,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "9eeb04756ec868d7",
        "type": "function",
        "z": "1dc82d7c84b0491f",
        "name": "parse response",
        "func": "const locations = global.get( 'locations' );\nconst { requestDate, past_days } = msg.requestParams;\n\n/*\nJSON RESPONSE LOOKS LIKE =>\n[{ \n  \"latitude\": 37.996483, \"longitude\": 23.709677, \"generationtime_ms\": 0.31006336212158203, \"utc_offset_seconds\": 10800, \"timezone\": \"Europe/Athens\", \"timezone_abbreviation\": \"EEST\", \"elevation\": 92.0, \n  \"daily_units\": { \"time\": \"iso8601\", \"weather_code\": \"wmo code\", \"temperature_2m_min\": \"°C\", \"temperature_2m_mean\": \"°C\", \"temperature_2m_max\": \"°C\", \"precipitation_sum\": \"mm\", \"rain_sum\": \"mm\", \"snowfall_sum\": \"cm\" }, \n  \"daily\": { \"time\": [\"2024-05-20\", \"2024-05-21\", \"2024-05-22\", \"2024-05-23\"], \"weather_code\": [1, 1, 1, null], \"temperature_2m_min\": [19.3, 19.5, 20.9, null], \"temperature_2m_mean\": [24.2, 24.1, null, null], \"temperature_2m_max\": [29.1, 29.2, 22.0, null], \"precipitation_sum\": [0.00, 0.00, null, null], \"rain_sum\": [0.00, 0.00, null, null], \"snowfall_sum\": [0.00, 0.00, null, null] }\n},{ \n  \"latitude\": 38.558872, \"longitude\": 22.377718, \"generationtime_ms\": 0.2340078353881836, \"utc_offset_seconds\": 10800, \"timezone\": \"Europe/Athens\", \"timezone_abbreviation\": \"EEST\", \"elevation\": 206.0, \"location_id\": 1, \n  \"daily_units\": { \"time\": \"iso8601\", \"weather_code\": \"wmo code\", \"temperature_2m_min\": \"°C\", \"temperature_2m_mean\": \"°C\", \"temperature_2m_max\": \"°C\", \"precipitation_sum\": \"mm\", \"rain_sum\": \"mm\", \"snowfall_sum\": \"cm\" }, \n  \"daily\": { \"time\": [\"2024-05-20\", \"2024-05-21\", \"2024-05-22\", \"2024-05-23\"], \"weather_code\": [51, 2, 0, null], \"temperature_2m_min\": [18.6, 18.9, 18.3, null], \"temperature_2m_mean\": [24.0, 24.4, null, null], \"temperature_2m_max\": [29.3, 30.9, 19.3, null], \"precipitation_sum\": [0.10, 0.00, null, null], \"rain_sum\": [0.10, 0.00, null, null], \"snowfall_sum\": [0.00, 0.00, null, null] } \n}]\n*/\n\nconst { statusCode, payload } = msg;\n\nif ( statusCode !== 200 ) {\n    throw `[ERROR] Status code ${statusCode}. ${payload}.`;\n}\n\nif ( payload.length !== locations.length ) {\n    throw `[ERROR] Response not matching locations length (${payload.length} vs ${locations.length}).`;\n}\n\nconst result = [];\nfor ( let i = 0; i < payload.length; i++ ) {\n    const location = locations[ i ];\n    const { time, \n        weather_code,\n        temperature_2m_min,\n        temperature_2m_mean,\n        temperature_2m_max,\n        precipitation_sum,\n        rain_sum,\n        snowfall_sum,\n    } = payload[ i ].daily;\n\n    for ( let j = 0; j < time.length; j++ ) {\n        if ( time[ j ] == requestDate ) {\n            if (\n                temperature_2m_min[ j ] == undefined || temperature_2m_min[ j ] === null &&\n                temperature_2m_mean[ j ] === undefined || temperature_2m_mean[ j ] === null &&\n                temperature_2m_max[ j ] === undefined || temperature_2m_max[ j ] === null &&\n                precipitation_sum[ j ] === undefined || precipitation_sum[ j ] === null\n            ) {\n                // throw `[WARNING] Weather data not available yet (${requestDate}).`;\n                msg.payload = `[WARNING] Weather data not available yet (${requestDate}).`;\n                return [ msg, null ];\n\n            }\n\n            rain_sum[i] = rain_sum[i] === undefined ? null : rain_sum[ i ]; \n            snowfall_sum[i] = snowfall_sum[i] === undefined ? null : snowfall_sum[i]; \n\n            result.push( {\n                date: requestDate,\n                location,\n                weather_code: weather_code[ j ],\n                temperature_2m_min: temperature_2m_min[ j ],\n                temperature_2m_mean:temperature_2m_mean[ j ],\n                temperature_2m_max: temperature_2m_max[ j ],\n                precipitation_sum: precipitation_sum[ j ],\n                rain_sum: rain_sum[ i ],\n                snowfall_sum: snowfall_sum[ i ]\n            } );\n            break;\n        }\n    }\n    if ( result.length !== i + 1 ) {\n        throw `[ERROR] No of the responded times matching requested date (${requestDate}).`;\n    }\n}\n\nmsg.payload = result;\nreturn [ null, msg ];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 220,
        "wires": [
            [
                "1d13a35b302aaeed",
                "d30b920902618358"
            ],
            [
                "c6ca5fcc2f3a3473"
            ]
        ]
    },
    {
        "id": "e83e73798f7932b9",
        "type": "catch",
        "z": "1dc82d7c84b0491f",
        "name": "",
        "scope": [
            "40d5847be55c9a2c",
            "9eeb04756ec868d7"
        ],
        "uncaught": false,
        "x": 830,
        "y": 180,
        "wires": [
            [
                "60c6b15d3afe44f8",
                "d30b920902618358"
            ]
        ]
    },
    {
        "id": "60c6b15d3afe44f8",
        "type": "change",
        "z": "1dc82d7c84b0491f",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 140,
        "wires": [
            [
                "1d13a35b302aaeed"
            ]
        ]
    },
    {
        "id": "c6ca5fcc2f3a3473",
        "type": "function",
        "z": "1dc82d7c84b0491f",
        "name": "insert weather",
        "func": "const { payload } = msg;\n\nconst rows = [];\nfor ( let row of payload ) {\n    const {\n        date,\n        location,\n        weather_code,\n        temperature_2m_min,\n        temperature_2m_mean,\n        temperature_2m_max,\n        precipitation_sum,\n        rain_sum,\n        snowfall_sum\n    } = row;\n\n    rows.push( `(\"${date}\",${location.id},${weather_code},${temperature_2m_min},${temperature_2m_mean},${temperature_2m_max},${precipitation_sum},${rain_sum},${snowfall_sum})` );\n}\n\nconst values = rows.join( ',' );\n\nconst query = `INSERT INTO weather (date,location_id,weather_code,temperature_2m_min,temperature_2m_mean,temperature_2m_max,precipitation_sum,rain_sum,snowfall_sum) VALUES ${values}`;\n\nmsg.topic = query;\nmsg.payload = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 300,
        "wires": [
            [
                "19824c02c61e45f3",
                "1d13a35b302aaeed"
            ]
        ]
    },
    {
        "id": "19824c02c61e45f3",
        "type": "link call",
        "z": "1dc82d7c84b0491f",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 340,
        "wires": [
            [
                "b313c853354a574e"
            ]
        ]
    },
    {
        "id": "b313c853354a574e",
        "type": "function",
        "z": "1dc82d7c84b0491f",
        "name": "update last date",
        "func": "const { requestDate } = msg.requestParams;\nglobal.set( 'weatherLastDate', requestDate );\n\nmsg.topic = undefined;\nmsg.requestParams = undefined;\nmsg.publish = undefined;\nmsg.payload = `Weather update (${requestDate})`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 380,
        "wires": [
            [
                "1d13a35b302aaeed",
                "d30b920902618358"
            ]
        ]
    },
    {
        "id": "d30b920902618358",
        "type": "link out",
        "z": "1dc82d7c84b0491f",
        "name": "link out 14",
        "mode": "return",
        "links": [],
        "x": 795,
        "y": 380,
        "wires": []
    },
    {
        "id": "a3aeb5ed388a6be4",
        "type": "link in",
        "z": "61022c35528d6ffa",
        "name": "link in savings request",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "c7c23ca1cd6e436a"
            ]
        ]
    },
    {
        "id": "c7c23ca1cd6e436a",
        "type": "function",
        "z": "61022c35528d6ffa",
        "name": "if already done... else...",
        "func": "const { timeRepr, daysDistance, nextDate } = global.get( 'dateHelpers' );\nconst today = timeRepr( new Date(), 'YYYY-MM-DD' );\n\nconst lastDate = global.get( 'savingsLastDate' );\n\nif ( daysDistance( lastDate, today ) <= 1 ) {\n    msg.payload = \"Savings up to date.\"\n    return [ msg, null ];\n}\n\nconst nextLastDate = timeRepr( nextDate( lastDate ), 'YYYY-MM-DD' );\nmsg.payload = nextLastDate;\n\nreturn [ null, msg ];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 60,
        "wires": [
            [
                "4342dfe695e76b47",
                "47560b1a83aa9b08"
            ],
            [
                "ee151d8aa972eca3"
            ]
        ]
    },
    {
        "id": "ee151d8aa972eca3",
        "type": "function",
        "z": "61022c35528d6ffa",
        "name": "prepare url",
        "func": "const { timeRepr, daysDistance, nextDate } = global.get( 'dateHelpers' );\n\nconst requestDate = msg.payload;\nconst reverseDate = requestDate.split( '-' ).reverse().join( '-' );\n\nconst url = global.get( 'savingsUrl' ) + reverseDate;\n\nmsg.url = url;\nmsg.requestParams = {\n    requestDate,\n};\n\nmsg.payload = `(${requestDate}) => ${url}`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 140,
        "wires": [
            [
                "47560b1a83aa9b08",
                "d7b103a6c1f51e56"
            ]
        ]
    },
    {
        "id": "d7b103a6c1f51e56",
        "type": "http request",
        "z": "61022c35528d6ffa",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "37e47c2be4e6d111",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 210,
        "y": 220,
        "wires": [
            [
                "704eed10a1bf43df"
            ]
        ]
    },
    {
        "id": "47560b1a83aa9b08",
        "type": "link call",
        "z": "61022c35528d6ffa",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 850,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "704eed10a1bf43df",
        "type": "function",
        "z": "61022c35528d6ffa",
        "name": "parse response",
        "func": "const reservoirs = global.get( 'reservoirs' );\nconst { requestDate } = msg.requestParams;\n\n/*\nHTML RESPONSE LOOKS LIKE =>\n<table cellspacing=\"0\" rules=\"all\" border=\"1\" id=\"grdSavings\" style=\"width:910px;border-collapse:collapse;\">\n  <tr>\n    <th scope=\"col\">Ημερομηνία</th><th scope=\"col\">ΕΥΗΝΟΣ</th><th scope=\"col\">ΜΑΡΑΘΩΝΑΣ</th><th scope=\"col\">ΜΟΡΝΟΣ</th><th scope=\"col\">ΥΛΙΚΗ</th><th scope=\"col\">ΣΥΝΟΛΟ</th>\n  </tr><tr>\n    <td>22/05/2024</td><td>67.414.000 </td><td>26.047.000 </td><td>442.235.000 </td><td>338.832.000 </td><td>874.528.000 </td>\n  </tr><tr>\n    <td>23/05/2024</td><td>67.414.000 </td><td>26.132.000 </td><td>441.128.000 </td><td>338.644.000 </td><td>873.318.000 </td>\n  </tr>\n</table>\n*/\n\nconst { statusCode, payload } = msg;\n\nif ( statusCode !== 200 ) {\n    throw `[ERROR] Status code ${statusCode}. ${payload}.`;\n}\n\nconst html = payload;\nconst table = html.split(\"<table\")[1];\n\nconst rows = table.match(/(<tr)(.*?)(<\\/tr>)/gs);\n\nfor (let i = 0; i < rows.length; i++) {\n\n    if (i > 0) { // to skip labels\n        let values = rows[i].match( /(<td>)(.*?)(<\\/td>)/gs ); // s = including new line in chars\n        values = values.map( v => v.replace( \"<td>\", \"\" ).replace( \"</td>\", \"\" ).trim() );\n        values = values.map( v => v.replaceAll( \".\", \"\" ) ); // 1.234.000 => 1234000\n\n        values = values.map( v => Number.isNaN(parseInt(v)) ? '0' : v );\n\n        const [ dd, mm, yyyy ] = values[ 0 ].split( '/' );\n        const date = `${yyyy}-${mm}-${dd}`;\n\n        if ( date === requestDate ) {\n\n            values = values.slice( 1, -1 ); // exclude date and total\n            // node.warn( values );\n\n            if ( values.length !== reservoirs.length ) {\n                throw `[ERROR] Response not matching reservoirs length (${values.length} vs ${reservoirs.length}).`;\n            }\n\n            const result = [];\n            for ( let j = 0; j < values.length; j++ ) {\n\n                const reservoir = reservoirs[ j ];\n                result.push( {\n                    date,\n                    reservoir,\n                    quantity: values[ j ]\n                \n                } );\n            }\n            msg.payload = result;\n            return [ null, msg ];\n        }\n    }\n}\n\n//throw `[WARNING] Savings data not available yet (${requestDate}).`;\nmsg.ayload = `[WARNING] Savings data not available yet (${requestDate}).`;\nreturn [ msg, null ];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 260,
        "wires": [
            [
                "47560b1a83aa9b08",
                "4342dfe695e76b47"
            ],
            [
                "a076f80433e32a0f"
            ]
        ]
    },
    {
        "id": "7977c8012078d6f0",
        "type": "catch",
        "z": "61022c35528d6ffa",
        "name": "",
        "scope": [
            "d7b103a6c1f51e56",
            "704eed10a1bf43df"
        ],
        "uncaught": false,
        "x": 830,
        "y": 180,
        "wires": [
            [
                "2eac0f1e97633ab0",
                "4342dfe695e76b47"
            ]
        ]
    },
    {
        "id": "2eac0f1e97633ab0",
        "type": "change",
        "z": "61022c35528d6ffa",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 140,
        "wires": [
            [
                "47560b1a83aa9b08"
            ]
        ]
    },
    {
        "id": "a076f80433e32a0f",
        "type": "function",
        "z": "61022c35528d6ffa",
        "name": "insert savings",
        "func": "const { payload } = msg;\n\nconst rows = [];\nfor ( let row of payload ) {\n    const { date, reservoir, quantity } = row;\n\n    rows.push( `(\"${date}\",${reservoir.id},${quantity})` );\n}\n\nconst values = rows.join( ',' );\n\nconst query = `INSERT INTO savings (date,reservoir_id,quantity) VALUES ${values}`;\n\nmsg.topic = query;\nmsg.payload = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 340,
        "wires": [
            [
                "68451f8805a4ded4",
                "47560b1a83aa9b08"
            ]
        ]
    },
    {
        "id": "68451f8805a4ded4",
        "type": "link call",
        "z": "61022c35528d6ffa",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 380,
        "wires": [
            [
                "53d7020558aeb4ee"
            ]
        ]
    },
    {
        "id": "53d7020558aeb4ee",
        "type": "function",
        "z": "61022c35528d6ffa",
        "name": "update last date",
        "func": "const { requestDate } = msg.requestParams;\nglobal.set( 'savingsLastDate', requestDate );\n\nmsg.topic = undefined;\nmsg.requestParams = undefined;\nmsg.payload = `Savings update (${requestDate})`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 420,
        "wires": [
            [
                "47560b1a83aa9b08",
                "4342dfe695e76b47"
            ]
        ]
    },
    {
        "id": "4342dfe695e76b47",
        "type": "link out",
        "z": "61022c35528d6ffa",
        "name": "link out 17",
        "mode": "return",
        "links": [],
        "x": 795,
        "y": 420,
        "wires": []
    },
    {
        "id": "649a9d800333157e",
        "type": "comment",
        "z": "61022c35528d6ffa",
        "name": "about ca certificate",
        "info": "  SPECIFIC SETTINGS IN NODE-RED:\n  in settings.js => process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = 0\n  in http-request => tick \"Enable secure (SSL/TLS) connection\" > create new TLS Config > upload CA certicicate > uncheck \"Verify server certificate\".\n  based on: unable to verify the first certificate in Node-Red\n  https://stackoverflow.com/questions/42983635/error-unable-to-verify-the-first-certificate-in-node-red/42984958#42984958\n\n  GENERAL INFO USING NODEJS:\n  fetch( \"https://eydap.gr\" );\n  error: unable to verify the first certificate ('UNABLE_TO_VERIFY_LEAF_SIGNATURE')\n  solution: process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = 0;\n  Warning: Setting the NODE_TLS_REJECT_UNAUTHORIZED environment variable to '0' makes TLS connections and HTTPS requests insecure by disabling certificate verification\n  based on: Node Fetch Request Fails on Server: Unable to Get Local Issuer Certificate\n  https://stackoverflow.com/questions/51995925/node-fetch-request-fails-on-server-unable-to-get-local-issuer-certificate\n\n  curl -v https://www.eydap.gr\n  error: unable to get local issuer certificate\n  solution: chrome > https://eydap.gr > connection is secure > certificate is valid > details > export (crt file)\n  (create a backup of /etc/ssl/certs/ca-certificates.crt)\n  append crt file content in /etc/ssl/certs/ca-certificates.crt\n",
        "x": 230,
        "y": 180,
        "wires": []
    },
    {
        "id": "b3c337ed58cf68bd",
        "type": "link in",
        "z": "d21f4bda462bb9a5",
        "name": "link in production request",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "722008d1f8785f62"
            ]
        ]
    },
    {
        "id": "722008d1f8785f62",
        "type": "function",
        "z": "d21f4bda462bb9a5",
        "name": "if already done... else...",
        "func": "const { timeRepr, daysDistance, nextDate } = global.get( 'dateHelpers' );\nconst today = timeRepr( new Date(), 'YYYY-MM-DD' );\n\nconst lastDate = global.get( 'productionLastDate' );\n\nif ( daysDistance( lastDate, today ) <= 1 ) {\n    msg.payload = \"Production up to date.\"\n    return [ msg, null ];\n}\n\nconst nextLastDate = timeRepr( nextDate( lastDate ), 'YYYY-MM-DD' );\nmsg.payload = nextLastDate;\n\nreturn [ null, msg ];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 60,
        "wires": [
            [
                "49ebaced1967f034",
                "0c42eba578cf0c01"
            ],
            [
                "ca1ff0ef5d5f0a54"
            ]
        ]
    },
    {
        "id": "ca1ff0ef5d5f0a54",
        "type": "function",
        "z": "d21f4bda462bb9a5",
        "name": "prepare url",
        "func": "const { timeRepr, daysDistance, nextDate } = global.get( 'dateHelpers' );\n\nconst requestDate = msg.payload;\nconst reverseDate = requestDate.split( '-' ).reverse().join( '-' );\n\nconst url = global.get( 'productionUrl' ) + reverseDate;\n\nmsg.url = url;\nmsg.requestParams = {\n    requestDate,\n};\n\nmsg.payload = `(${requestDate}) => ${url}`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 140,
        "wires": [
            [
                "0c42eba578cf0c01",
                "ed65cfa6e69ecc57"
            ]
        ]
    },
    {
        "id": "ed65cfa6e69ecc57",
        "type": "http request",
        "z": "d21f4bda462bb9a5",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "37e47c2be4e6d111",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 210,
        "y": 220,
        "wires": [
            [
                "382e19da3f5505a7"
            ]
        ]
    },
    {
        "id": "0c42eba578cf0c01",
        "type": "link call",
        "z": "d21f4bda462bb9a5",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 850,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "382e19da3f5505a7",
        "type": "function",
        "z": "d21f4bda462bb9a5",
        "name": "parse response",
        "func": "const factories = global.get( 'factories' );\nconst { requestDate } = msg.requestParams;\n\n/*\nHTML RESPONSE LOOKS LIKE =>\n<table cellspacing=\"0\" rules=\"all\" border=\"1\" id=\"grdSavings\" style=\"width:910px;border-collapse:collapse;\">\n  <tr>\n    <th scope=\"col\">Ημερομηνία</th><th scope=\"col\">ΑΣΠΡΟΠΥΡΓΟΣ</th><th scope=\"col\">ΓΑΛΑΤΣΙ</th><th scope=\"col\">ΚΙΟΥΡΚΑ</th><th scope=\"col\">ΜΕΝΙΔΙ</th><th scope=\"col\">ΣΥΝΟΛΟ</th>\n  </tr><tr>\n    <td>21/05/2024</td><td>131.020 </td><td>334.564 </td><td>139.389 </td><td>555.391 </td><td>1.160.364 </td>\n  </tr><tr>\n    <td>22/05/2024</td><td>132.730 </td><td>342.627 </td><td>124.210 </td><td>582.403 </td><td>1.181.970 </td>\n  </tr>\n</table>\n*/\n\nconst { statusCode, payload } = msg;\n\nif ( statusCode !== 200 ) {\n    throw `[ERROR] Status code ${statusCode}. ${payload}.`;\n}\n\nconst html = payload;\nconst table = html.split(\"<table\")[1];\n\nconst rows = table.match(/(<tr)(.*?)(<\\/tr>)/gs);\n\nfor (let i = 0; i < rows.length; i++) {\n\n    if (i > 0) { // to skip labels\n        let values = rows[i].match( /(<td>)(.*?)(<\\/td>)/gs ); // s = including new line in chars\n        values = values.map( v => v.replace( \"<td>\", \"\" ).replace( \"</td>\", \"\" ).trim() );\n        values = values.map( v => v.replaceAll( \".\", \"\" ) ); // 1.234.000 => 1234000\n\n        values = values.map( v => Number.isNaN(parseInt(v)) ? '0' : v );\n\n        const [ dd, mm, yyyy ] = values[ 0 ].split( '/' );\n        const date = `${yyyy}-${mm}-${dd}`;\n\n        if ( date === requestDate ) {\n\n            values = values.slice( 1, -1 ); // exclude date and total\n            // node.warn( values );\n\n            if ( values.length !== factories.length ) {\n                throw `[ERROR] Response not matching factories length (${values.length} vs ${factories.length}).`;\n            }\n\n            const result = [];\n            for ( let j = 0; j < values.length; j++ ) {\n\n                const factory = factories[ j ];\n                result.push( {\n                    date,\n                    factory,\n                    quantity: values[ j ]\n                \n                } );\n            }\n            msg.payload = result;\n            return [ null, msg ];\n        }\n    }\n}\n\nthrow `[WARNING] Production data not available yet (${requestDate}).`;\nmsg.payload = `[WARNING] Production data not available yet (${requestDate}).`;\nreturn [ msg, null ];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 260,
        "wires": [
            [
                "49ebaced1967f034",
                "0c42eba578cf0c01"
            ],
            [
                "15d8990b4f617272"
            ]
        ]
    },
    {
        "id": "51fe3a33ce3bb6f9",
        "type": "catch",
        "z": "d21f4bda462bb9a5",
        "name": "",
        "scope": [
            "ed65cfa6e69ecc57",
            "382e19da3f5505a7"
        ],
        "uncaught": false,
        "x": 830,
        "y": 160,
        "wires": [
            [
                "14e5d743cc9f4824",
                "49ebaced1967f034"
            ]
        ]
    },
    {
        "id": "14e5d743cc9f4824",
        "type": "change",
        "z": "d21f4bda462bb9a5",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 120,
        "wires": [
            [
                "0c42eba578cf0c01"
            ]
        ]
    },
    {
        "id": "15d8990b4f617272",
        "type": "function",
        "z": "d21f4bda462bb9a5",
        "name": "insert production",
        "func": "const { payload } = msg;\n\nconst rows = [];\nfor ( let row of payload ) {\n    const { date, factory, quantity } = row;\n\n    rows.push( `(\"${date}\",${factory.id},${quantity})` );\n}\n\nconst values = rows.join( ',' );\n\nconst query = `INSERT INTO production (date,factory_id,quantity) VALUES ${values}`;\n\nmsg.topic = query;\nmsg.payload = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 340,
        "wires": [
            [
                "45074707b3343bdf",
                "0c42eba578cf0c01"
            ]
        ]
    },
    {
        "id": "45074707b3343bdf",
        "type": "link call",
        "z": "d21f4bda462bb9a5",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 220,
        "y": 380,
        "wires": [
            [
                "150def491b82fe85"
            ]
        ]
    },
    {
        "id": "150def491b82fe85",
        "type": "function",
        "z": "d21f4bda462bb9a5",
        "name": "update last date",
        "func": "const { requestDate } = msg.requestParams;\nglobal.set( 'productionLastDate', requestDate );\n\nmsg.topic = undefined;\nmsg.requestParams = undefined;\nmsg.payload = `Production update (${requestDate})`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 420,
        "wires": [
            [
                "0c42eba578cf0c01",
                "49ebaced1967f034"
            ]
        ]
    },
    {
        "id": "49ebaced1967f034",
        "type": "link out",
        "z": "d21f4bda462bb9a5",
        "name": "link out 18",
        "mode": "return",
        "links": [],
        "x": 795,
        "y": 420,
        "wires": []
    },
    {
        "id": "c1940731334384fb",
        "type": "comment",
        "z": "d21f4bda462bb9a5",
        "name": "about ca certificate",
        "info": "  SPECIFIC SETTINGS IN NODE-RED:\n  in settings.js => process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = 0\n  in http-request => tick \"Enable secure (SSL/TLS) connection\" > create new TLS Config > upload CA certicicate > uncheck \"Verify server certificate\".\n  based on: unable to verify the first certificate in Node-Red\n  https://stackoverflow.com/questions/42983635/error-unable-to-verify-the-first-certificate-in-node-red/42984958#42984958\n\n  GENERAL INFO USING NODEJS:\n  fetch( \"https://eydap.gr\" );\n  error: unable to verify the first certificate ('UNABLE_TO_VERIFY_LEAF_SIGNATURE')\n  solution: process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = 0;\n  Warning: Setting the NODE_TLS_REJECT_UNAUTHORIZED environment variable to '0' makes TLS connections and HTTPS requests insecure by disabling certificate verification\n  based on: Node Fetch Request Fails on Server: Unable to Get Local Issuer Certificate\n  https://stackoverflow.com/questions/51995925/node-fetch-request-fails-on-server-unable-to-get-local-issuer-certificate\n\n  curl -v https://www.eydap.gr\n  error: unable to get local issuer certificate\n  solution: chrome > https://eydap.gr > connection is secure > certificate is valid > details > export (crt file)\n  (create a backup of /etc/ssl/certs/ca-certificates.crt)\n  append crt file content in /etc/ssl/certs/ca-certificates.crt\n",
        "x": 230,
        "y": 180,
        "wires": []
    },
    {
        "id": "c7ef80a6ea38e846",
        "type": "debug",
        "z": "a8ca5f37ab8664a6",
        "name": "debug 28",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 180,
        "wires": []
    },
    {
        "id": "266b71e4d0db2853",
        "type": "link call",
        "z": "a8ca5f37ab8664a6",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 890,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "193e53da1dcf8019",
        "type": "link out",
        "z": "a8ca5f37ab8664a6",
        "name": "link out 22",
        "mode": "return",
        "links": [],
        "x": 835,
        "y": 60,
        "wires": []
    },
    {
        "id": "1df0e0ece91af8f3",
        "type": "link call",
        "z": "a8ca5f37ab8664a6",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 260,
        "y": 220,
        "wires": [
            [
                "f444e4306180eff9"
            ]
        ]
    },
    {
        "id": "f444e4306180eff9",
        "type": "function",
        "z": "a8ca5f37ab8664a6",
        "name": "savings clustering",
        "func": "const { makeClusters, matchCluster } = global.get( 'clusterHelpers' );\nconst clusterLevels = global.get( 'clusterLevels' );\nconst data = msg.payload;\n\nconst period = data[ data.length - 1 ].period;\nconst value = data[ data.length - 1 ].period_avg;\nconst values = data.map( x => [ x.period_avg ] );\nconst clusters = makeClusters( values );\n// node.warn( clusters );\nconst matchingClusterIndex = matchCluster( clusters, value );\n\nconst level = matchingClusterIndex + 1;\nconst levels = clusterLevels.map( x => x.name );\nlevels[ matchingClusterIndex ] = levels[ matchingClusterIndex ].toUpperCase();\nconst levelRepr = levels.join( ' ' );\nconst valueRepr = new Intl.NumberFormat().format( Math.trunc( value ) );\n\nconst result = {\n    period,\n    savingsAvg: value,\n    savingsRepr: `${valueRepr} cubic meters`,\n    level,\n    levelRepr\n};\n\nglobal.set('savingsClusteringResult', result);\n\nmsg.topic = undefined;\nmsg.payload = result;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 280,
        "wires": [
            [
                "e3714ab3c2eca9bf",
                "c7ef80a6ea38e846"
            ]
        ]
    },
    {
        "id": "f80e433eb3f5cbe9",
        "type": "change",
        "z": "a8ca5f37ab8664a6",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'Savings clustering (' & msg.payload & ')'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 120,
        "wires": [
            [
                "266b71e4d0db2853"
            ]
        ]
    },
    {
        "id": "825d7f4f827524c2",
        "type": "link in",
        "z": "a8ca5f37ab8664a6",
        "name": "link in savings clustering",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "195d01cff4a595f0"
            ]
        ]
    },
    {
        "id": "ef61379ce7dc460d",
        "type": "link call",
        "z": "a8ca5f37ab8664a6",
        "name": "",
        "links": [
            "9478bf2057f22b65"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 180,
        "wires": [
            [
                "266b71e4d0db2853",
                "1df0e0ece91af8f3"
            ]
        ]
    },
    {
        "id": "195d01cff4a595f0",
        "type": "function",
        "z": "a8ca5f37ab8664a6",
        "name": "if already done... else...",
        "func": "const savingsClusteringDate = global.get( 'savingsClusteringDate' );\nconst lastDate = global.get('savingsLastDate');\n\nif (savingsClusteringDate === lastDate) {\n    return [ msg, null ];\n}\n\nglobal.set('savingsClusteringDate', lastDate);\n\nmsg.payload = lastDate;\nreturn [null, msg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 60,
        "wires": [
            [
                "193e53da1dcf8019"
            ],
            [
                "f80e433eb3f5cbe9",
                "ef61379ce7dc460d"
            ]
        ]
    },
    {
        "id": "e155bbefca1f3401",
        "type": "link call",
        "z": "a8ca5f37ab8664a6",
        "name": "",
        "links": [
            "fc7aaaa19c985f47"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 380,
        "wires": [
            [
                "193e53da1dcf8019"
            ]
        ]
    },
    {
        "id": "e3714ab3c2eca9bf",
        "type": "function",
        "z": "a8ca5f37ab8664a6",
        "name": "prepare publish",
        "func": "const savings = msg.payload;\nmsg.payload = { savings };\nmsg.routingKey = \"savings\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 340,
        "wires": [
            [
                "e155bbefca1f3401"
            ]
        ]
    },
    {
        "id": "adb61f3a0489986d",
        "type": "inject",
        "z": "a8ca5f37ab8664a6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2024-05-23",
        "payloadType": "str",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "ef61379ce7dc460d"
            ]
        ]
    },
    {
        "id": "02766e51d35f3d41",
        "type": "inject",
        "z": "a8ca5f37ab8664a6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2024-01-07",
        "payloadType": "str",
        "x": 130,
        "y": 480,
        "wires": [
            [
                "ef61379ce7dc460d"
            ]
        ]
    },
    {
        "id": "e9db637dda81a734",
        "type": "debug",
        "z": "b7ec5c0795a0393f",
        "name": "debug 29",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 180,
        "wires": []
    },
    {
        "id": "313ab92c54b8b2c3",
        "type": "link call",
        "z": "b7ec5c0795a0393f",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 890,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "3a90528d185d0347",
        "type": "link out",
        "z": "b7ec5c0795a0393f",
        "name": "link out 23",
        "mode": "return",
        "links": [],
        "x": 835,
        "y": 60,
        "wires": []
    },
    {
        "id": "8226ab4353aadeb1",
        "type": "link call",
        "z": "b7ec5c0795a0393f",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 260,
        "y": 220,
        "wires": [
            [
                "9242e2dffccfb7fb"
            ]
        ]
    },
    {
        "id": "9242e2dffccfb7fb",
        "type": "function",
        "z": "b7ec5c0795a0393f",
        "name": "production clustering",
        "func": "const { makeClusters, matchCluster } = global.get( 'clusterHelpers' );\nconst clusterLevels = global.get( 'clusterLevels' );\nconst data = msg.payload;\n\nconst period = data[ data.length - 1 ].period;\nconst value = data[ data.length - 1 ].period_avg;\nconst values = data.map( x => [ x.period_avg ] );\nconst clusters = makeClusters( values );\n// node.warn( clusters );\nconst matchingClusterIndex = matchCluster( clusters, value );\n\nconst level = matchingClusterIndex + 1;\nconst levels = clusterLevels.map( x => x.name );\nlevels[ matchingClusterIndex ] = levels[ matchingClusterIndex ].toUpperCase();\nconst levelRepr = levels.join( ' ' );\nconst valueRepr = new Intl.NumberFormat().format( Math.trunc( value ) );\n\nconst result = {\n    period,\n    productionAvg: value,\n    productionRepr: `${valueRepr} cubic meters`,\n    level,\n    levelRepr\n};\n\nglobal.set( 'productionClusteringResult', result );\n\nmsg.topic = undefined;\nmsg.payload = result;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 280,
        "wires": [
            [
                "5be46b2aceca3b99",
                "e9db637dda81a734"
            ]
        ]
    },
    {
        "id": "6c30f7113ddbe4b3",
        "type": "change",
        "z": "b7ec5c0795a0393f",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'Production clustering (' & msg.payload & ')'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 120,
        "wires": [
            [
                "313ab92c54b8b2c3"
            ]
        ]
    },
    {
        "id": "a629a24ab77645c8",
        "type": "link in",
        "z": "b7ec5c0795a0393f",
        "name": "link in production clustering",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "1a6118c29bd78b28"
            ]
        ]
    },
    {
        "id": "2e929dca24e77fa9",
        "type": "link call",
        "z": "b7ec5c0795a0393f",
        "name": "",
        "links": [
            "8438ec33152a3341"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 180,
        "wires": [
            [
                "8226ab4353aadeb1",
                "313ab92c54b8b2c3"
            ]
        ]
    },
    {
        "id": "1a6118c29bd78b28",
        "type": "function",
        "z": "b7ec5c0795a0393f",
        "name": "if already done... else...",
        "func": "const productionClusteringDate = global.get( 'productionClusteringDate' );\nconst lastDate = global.get('productionLastDate');\n\nif (productionClusteringDate === lastDate) {\n    return [ msg, null ];\n}\n\nglobal.set('productionClusteringDate', lastDate);\n\nmsg.payload = lastDate;\nreturn [null, msg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 60,
        "wires": [
            [
                "3a90528d185d0347"
            ],
            [
                "6c30f7113ddbe4b3",
                "2e929dca24e77fa9"
            ]
        ]
    },
    {
        "id": "71dbdd31b4f0f0cc",
        "type": "link call",
        "z": "b7ec5c0795a0393f",
        "name": "",
        "links": [
            "fc7aaaa19c985f47"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 380,
        "wires": [
            [
                "3a90528d185d0347"
            ]
        ]
    },
    {
        "id": "5be46b2aceca3b99",
        "type": "function",
        "z": "b7ec5c0795a0393f",
        "name": "prepare publish",
        "func": "const production = msg.payload;\nmsg.payload = { production };\nmsg.routingKey = \"production\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 340,
        "wires": [
            [
                "71dbdd31b4f0f0cc"
            ]
        ]
    },
    {
        "id": "c7cc759199f90113",
        "type": "inject",
        "z": "b7ec5c0795a0393f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2024-01-05",
        "payloadType": "str",
        "x": 130,
        "y": 500,
        "wires": [
            [
                "2e929dca24e77fa9"
            ]
        ]
    },
    {
        "id": "c1a67434013bb48a",
        "type": "inject",
        "z": "b7ec5c0795a0393f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2024-05-23",
        "payloadType": "str",
        "x": 130,
        "y": 540,
        "wires": [
            [
                "2e929dca24e77fa9"
            ]
        ]
    },
    {
        "id": "7ab903a24411f2b3",
        "type": "debug",
        "z": "42c32db0efd3bac1",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 180,
        "wires": []
    },
    {
        "id": "81d8c3d0c7b606be",
        "type": "link call",
        "z": "42c32db0efd3bac1",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 890,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b0771a85114491a8",
        "type": "link out",
        "z": "42c32db0efd3bac1",
        "name": "link out 25",
        "mode": "return",
        "links": [],
        "x": 835,
        "y": 60,
        "wires": []
    },
    {
        "id": "ed1602f667ce9c52",
        "type": "link call",
        "z": "42c32db0efd3bac1",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 260,
        "y": 400,
        "wires": [
            [
                "5f9e3ca1b8ea45f3"
            ]
        ]
    },
    {
        "id": "5f9e3ca1b8ea45f3",
        "type": "function",
        "z": "42c32db0efd3bac1",
        "name": "water clustering",
        "func": "const { makeClusters, matchCluster } = global.get( 'clusterHelpers' );\nconst clusterLevels = global.get( 'clusterLevels' );\nconst data = msg.payload;\n\nconst period = data[ data.length - 1 ].period;\nconst savingsAvg = data[ data.length - 1].savings_avg;\nconst productionAvg = data[data.length - 1].production_avg;\nconst ratios = data.map( x => [ x.savings_avg / x.production_avg ] );\nconst ratio = ratios[ data.length - 1 ][ 0 ];\nconst clusters = makeClusters( ratios );\n// node.warn( clusters );\nconst matchingClusterIndex = matchCluster( clusters, ratio );\n\nconst level = matchingClusterIndex + 1;\nconst levels = clusterLevels.map( x => x.name );\nlevels[ matchingClusterIndex ] = levels[ matchingClusterIndex ].toUpperCase();\nconst levelRepr = levels.join( ' ' );\n\nconst result = {\n    period,\n    savingsAvg,\n    productionAvg,\n    ratio,\n    ratioRepr: `ratio: ${Math.round(ratio)}`,\n    level,\n    levelRepr\n};\n\nglobal.set( 'waterClusteringResult', result );\n\nmsg.joinKey = undefined;\nmsg.topic = undefined;\nmsg.payload = result;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 460,
        "wires": [
            [
                "11b9aeddd5cef450",
                "7ab903a24411f2b3"
            ]
        ]
    },
    {
        "id": "e7b8060b470b3ca5",
        "type": "change",
        "z": "42c32db0efd3bac1",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'Water clustering (' & msg.payload & ')'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 120,
        "wires": [
            [
                "81d8c3d0c7b606be"
            ]
        ]
    },
    {
        "id": "0718f521c7ca40aa",
        "type": "link in",
        "z": "42c32db0efd3bac1",
        "name": "link in water clustering",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "27f4c4232a03ca21"
            ]
        ]
    },
    {
        "id": "94a9a77e514c43cd",
        "type": "inject",
        "z": "42c32db0efd3bac1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2024-01-05",
        "payloadType": "str",
        "x": 130,
        "y": 620,
        "wires": [
            [
                "84f0b490692f53d2"
            ]
        ]
    },
    {
        "id": "51d8baa7fc7dba59",
        "type": "link call",
        "z": "42c32db0efd3bac1",
        "name": "",
        "links": [
            "9478bf2057f22b65"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 350,
        "y": 220,
        "wires": [
            [
                "cb919f46fd03bd4b"
            ]
        ]
    },
    {
        "id": "84f0b490692f53d2",
        "type": "split",
        "z": "42c32db0efd3bac1",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 230,
        "y": 180,
        "wires": [
            [
                "51d8baa7fc7dba59",
                "047e10f4a83604f4"
            ]
        ]
    },
    {
        "id": "047e10f4a83604f4",
        "type": "link call",
        "z": "42c32db0efd3bac1",
        "name": "",
        "links": [
            "8438ec33152a3341"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 350,
        "y": 260,
        "wires": [
            [
                "cb919f46fd03bd4b"
            ]
        ]
    },
    {
        "id": "cb919f46fd03bd4b",
        "type": "join",
        "z": "42c32db0efd3bac1",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "joinKey",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 230,
        "y": 300,
        "wires": [
            [
                "17d51e8ea5d860c7"
            ]
        ]
    },
    {
        "id": "17d51e8ea5d860c7",
        "type": "function",
        "z": "42c32db0efd3bac1",
        "name": "prepare query",
        "func": "const savingsQuery = msg.payload.savings;\nconst productionQuery = msg.payload.production;\n\nconst query = \n`\nSELECT \n    s.period AS period,\n    s.year AS year,\n    s.period_avg AS savings_avg,\n    p.period_avg AS production_avg\nFROM ( ${savingsQuery } ) s\nJOIN ( ${productionQuery } ) p\nON s.year = p.year\n`\n;\n\nmsg.topic = query;\nmsg.payload = query;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 360,
        "wires": [
            [
                "ed1602f667ce9c52",
                "81d8c3d0c7b606be"
            ]
        ]
    },
    {
        "id": "d8d686c03c68a97d",
        "type": "inject",
        "z": "42c32db0efd3bac1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2024-05-23",
        "payloadType": "str",
        "x": 130,
        "y": 660,
        "wires": [
            [
                "84f0b490692f53d2"
            ]
        ]
    },
    {
        "id": "27f4c4232a03ca21",
        "type": "function",
        "z": "42c32db0efd3bac1",
        "name": "if already done... else...",
        "func": "const { minDate } = global.get( 'dateHelpers' );\nconst waterClusteringDate = global.get( 'waterClusteringDate' );\n\nconst newWaterClusteringDate = minDate( [\n    global.get( 'savingsLastDate' ),\n    global.get( 'productionLastDate' )\n] );\n\nif (newWaterClusteringDate == waterClusteringDate ) {\n    return [ msg, null ];   \n}\n\nglobal.set('waterClusteringDate', newWaterClusteringDate);\nmsg.payload = newWaterClusteringDate;\n\nreturn [ null, msg ];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 60,
        "wires": [
            [
                "b0771a85114491a8"
            ],
            [
                "e7b8060b470b3ca5",
                "84f0b490692f53d2"
            ]
        ]
    },
    {
        "id": "11b9aeddd5cef450",
        "type": "function",
        "z": "42c32db0efd3bac1",
        "name": "prepare publish",
        "func": "const water = msg.payload;\nmsg.payload = { water };\nmsg.routingKey = \"water\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 520,
        "wires": [
            [
                "14dfa839b3eb4663"
            ]
        ]
    },
    {
        "id": "14dfa839b3eb4663",
        "type": "link call",
        "z": "42c32db0efd3bac1",
        "name": "",
        "links": [
            "fc7aaaa19c985f47"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 560,
        "wires": [
            [
                "b0771a85114491a8"
            ]
        ]
    },
    {
        "id": "bc4d3eb33981ed7b",
        "type": "debug",
        "z": "11322c65b3bfae17",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 180,
        "wires": []
    },
    {
        "id": "20542212bb2afe38",
        "type": "link call",
        "z": "11322c65b3bfae17",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 890,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "cb80b2332117524a",
        "type": "link out",
        "z": "11322c65b3bfae17",
        "name": "link out 24",
        "mode": "return",
        "links": [],
        "x": 835,
        "y": 60,
        "wires": []
    },
    {
        "id": "70cfed66a576c432",
        "type": "link call",
        "z": "11322c65b3bfae17",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 260,
        "y": 220,
        "wires": [
            [
                "d7e7389c63dc7b62"
            ]
        ]
    },
    {
        "id": "d7e7389c63dc7b62",
        "type": "function",
        "z": "11322c65b3bfae17",
        "name": "weather clustering",
        "func": "const { makeClusters, matchCluster } = global.get( 'clusterHelpers' );\nconst clusterLevels = global.get( 'clusterLevels' );\nconst data = msg.payload;\n\nconst period = data[ data.length - 1 ].period;\nconst value = data[data.length - 1].precipitation_sum;\nconst values = data.map(x => [x.precipitation_sum ] );\nconst clusters = makeClusters( values );\n// node.warn( clusters );\nconst matchingClusterIndex = matchCluster( clusters, value );\n\nconst level = matchingClusterIndex + 1;\nconst levels = clusterLevels.map( x => x.name );\nlevels[ matchingClusterIndex ] = levels[ matchingClusterIndex ].toUpperCase();\nconst levelRepr = levels.join( ' ' );\n\nconst result = {\n    period,\n    precipitationSum: value,\n    precipitationRepr: `${value} mm`,\n    level,\n    levelRepr\n};\n\nglobal.set( 'weatherClusteringResult', result );\n\nmsg.topic = undefined;\nmsg.payload = result;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 280,
        "wires": [
            [
                "207eef31f0dfeb97",
                "bc4d3eb33981ed7b"
            ]
        ]
    },
    {
        "id": "6791b2dc385a8eec",
        "type": "change",
        "z": "11322c65b3bfae17",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'Weather clustering (' & msg.payload & ')'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 120,
        "wires": [
            [
                "20542212bb2afe38"
            ]
        ]
    },
    {
        "id": "32699b29fe9fdf8a",
        "type": "link in",
        "z": "11322c65b3bfae17",
        "name": "link in weather clustering",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "73e0b8bf57532c58"
            ]
        ]
    },
    {
        "id": "bd751375a065374d",
        "type": "link call",
        "z": "11322c65b3bfae17",
        "name": "",
        "links": [
            "e1cb944c3d6d1a78"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 180,
        "wires": [
            [
                "70cfed66a576c432",
                "20542212bb2afe38"
            ]
        ]
    },
    {
        "id": "73e0b8bf57532c58",
        "type": "function",
        "z": "11322c65b3bfae17",
        "name": "if already done... else...",
        "func": "const weatherClusteringDate = global.get( 'weatherClusteringDate' );\nconst lastDate = global.get('weatherLastDate');\n\nif (weatherClusteringDate === lastDate) {\n    return [ msg, null ];\n}\n\nglobal.set('weatherClusteringDate', lastDate);\n\nmsg.payload = lastDate;\nreturn [null, msg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 60,
        "wires": [
            [
                "cb80b2332117524a"
            ],
            [
                "6791b2dc385a8eec",
                "bd751375a065374d"
            ]
        ]
    },
    {
        "id": "207eef31f0dfeb97",
        "type": "function",
        "z": "11322c65b3bfae17",
        "name": "prepare publish",
        "func": "const weather = msg.payload;\nmsg.payload = { weather };\nmsg.routingKey = \"weather\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 340,
        "wires": [
            [
                "dbc2792366e128d0"
            ]
        ]
    },
    {
        "id": "dbc2792366e128d0",
        "type": "link call",
        "z": "11322c65b3bfae17",
        "name": "",
        "links": [
            "fc7aaaa19c985f47"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 380,
        "wires": [
            [
                "cb80b2332117524a"
            ]
        ]
    },
    {
        "id": "25d3dba63ffda744",
        "type": "inject",
        "z": "11322c65b3bfae17",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2024-01-23",
        "payloadType": "str",
        "x": 130,
        "y": 580,
        "wires": [
            [
                "bd751375a065374d"
            ]
        ]
    },
    {
        "id": "a15a38acbf586bba",
        "type": "inject",
        "z": "11322c65b3bfae17",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2024-01-05",
        "payloadType": "str",
        "x": 130,
        "y": 540,
        "wires": [
            [
                "bd751375a065374d"
            ]
        ]
    },
    {
        "id": "98de8468dc0441db",
        "type": "link call",
        "z": "1701ccc8d2838ab0",
        "name": "",
        "links": [
            "ab0e6d979d760a4a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 260,
        "y": 220,
        "wires": [
            [
                "1308a07171a44c2c"
            ]
        ]
    },
    {
        "id": "9cbd116b7819126a",
        "type": "debug",
        "z": "1701ccc8d2838ab0",
        "name": "debug 27",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 180,
        "wires": []
    },
    {
        "id": "1308a07171a44c2c",
        "type": "function",
        "z": "1701ccc8d2838ab0",
        "name": "reservoirs clustering",
        "func": "const { makeClusters, matchCluster } = global.get( 'clusterHelpers' );\nconst clusterLevels = global.get( 'clusterLevels' );\nconst reservoirs = global.get( 'reservoirs' );\nconst data = msg.payload;\n\nconst results = [];\nfor ( let reservoir of reservoirs ) {\n\n    const reservoirData = data.filter( x => x.reservoir_id === reservoir.id );\n    if (reservoirData.length === 0) {\n        continue;\n    }\n\n    const period = reservoirData[ reservoirData.length - 1 ].period;\n    const value = reservoirData[ reservoirData.length - 1 ].period_avg;\n    const values = reservoirData.map( x => [ x.period_avg ] );\n    const clusters = makeClusters( values );\n    // node.warn( clusters );\n    const matchingClusterIndex = matchCluster( clusters, value );\n\n    const levels = clusterLevels.map( x => x.name );\n    levels[ matchingClusterIndex ] = levels[ matchingClusterIndex ].toUpperCase();\n    const level = levels.join( ' ' );\n    const color = clusterLevels[ matchingClusterIndex ].color; \n    const valueRepr = new Intl.NumberFormat().format( Math.trunc( value ) );\n\n    results.push( { \n        name: reservoir.name_en,\n        lat: reservoir.lat,\n        lon: reservoir.lon,\n        label: reservoir.name_en,\n        iconColor: color, \n        period,\n        average: `${valueRepr} cubic meters`,\n        level \n    } );\n}\n\nglobal.set( 'reservoirsClusteringResult', results );\n\nmsg.topic = undefined;\nmsg.payload = results;\nreturn msg;\n\n// for ( let result of results ) {\n//     msg.topic = undefined;\n//     msg.payload = result;\n//     node.send( msg );\n// }\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 280,
        "wires": [
            [
                "2ebf7ae4ea4859ae",
                "9cbd116b7819126a"
            ]
        ]
    },
    {
        "id": "27b42da3153d628e",
        "type": "link call",
        "z": "1701ccc8d2838ab0",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 890,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "08b8eaebd93fb988",
        "type": "change",
        "z": "1701ccc8d2838ab0",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'Reservoirs clustering (' & msg.payload & ')'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 120,
        "wires": [
            [
                "27b42da3153d628e"
            ]
        ]
    },
    {
        "id": "ccaf19d7f0d0e632",
        "type": "link in",
        "z": "1701ccc8d2838ab0",
        "name": "link in reservoirs clustering",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "80d2166d46fb727d"
            ]
        ]
    },
    {
        "id": "f89090b34c3bea4d",
        "type": "link out",
        "z": "1701ccc8d2838ab0",
        "name": "link out 20",
        "mode": "return",
        "links": [],
        "x": 835,
        "y": 60,
        "wires": []
    },
    {
        "id": "cbc139c0f6212c2a",
        "type": "link call",
        "z": "1701ccc8d2838ab0",
        "name": "",
        "links": [
            "024b62a1bbbeb6dd"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 180,
        "wires": [
            [
                "98de8468dc0441db",
                "27b42da3153d628e"
            ]
        ]
    },
    {
        "id": "80d2166d46fb727d",
        "type": "function",
        "z": "1701ccc8d2838ab0",
        "name": "if already done... else...",
        "func": "const reservoirsClusteringDate = global.get( 'reservoirsClusteringDate' );\nconst lastDate = global.get('savingsLastDate');\n\nif (reservoirsClusteringDate === lastDate) {\n    return [ msg, null ];\n}\n\nglobal.set('reservoirsClusteringDate', lastDate);\n\nmsg.payload = lastDate;\nreturn [null, msg];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 60,
        "wires": [
            [
                "f89090b34c3bea4d"
            ],
            [
                "08b8eaebd93fb988",
                "cbc139c0f6212c2a"
            ]
        ]
    },
    {
        "id": "2ebf7ae4ea4859ae",
        "type": "function",
        "z": "1701ccc8d2838ab0",
        "name": "prepare publish",
        "func": "const reservoirs = msg.payload;\nmsg.payload = { reservoirs };\nmsg.routingKey = \"reservoirs\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 340,
        "wires": [
            [
                "f442c6daffed750b"
            ]
        ]
    },
    {
        "id": "f442c6daffed750b",
        "type": "link call",
        "z": "1701ccc8d2838ab0",
        "name": "",
        "links": [
            "fc7aaaa19c985f47"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 310,
        "y": 380,
        "wires": [
            [
                "f89090b34c3bea4d"
            ]
        ]
    },
    {
        "id": "53a0b0e5948328fe",
        "type": "inject",
        "z": "1701ccc8d2838ab0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2024-05-23",
        "payloadType": "str",
        "x": 130,
        "y": 520,
        "wires": [
            [
                "cbc139c0f6212c2a"
            ]
        ]
    },
    {
        "id": "9e493fa5522867f8",
        "type": "inject",
        "z": "1701ccc8d2838ab0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2024-01-05",
        "payloadType": "str",
        "x": 130,
        "y": 480,
        "wires": [
            [
                "cbc139c0f6212c2a"
            ]
        ]
    },
    {
        "id": "3c4c570a2f5ad214",
        "type": "amqp-out",
        "z": "bac88e4feb8bab3d",
        "name": "athenswaterall exchange",
        "broker": "774630f253d36966",
        "exchangeName": "athenswaterall",
        "exchangeType": "direct",
        "exchangeRoutingKey": "reservoirs,savings,production,water,weather",
        "exchangeRoutingKeyType": "str",
        "exchangeDurable": true,
        "amqpProperties": "{ \"headers\": {} }",
        "rpcTimeoutMilliseconds": 3000,
        "outputs": 0,
        "x": 250,
        "y": 60,
        "wires": []
    },
    {
        "id": "fc7aaaa19c985f47",
        "type": "link in",
        "z": "bac88e4feb8bab3d",
        "name": "link in athenswaterall exchange",
        "links": [],
        "x": 55,
        "y": 60,
        "wires": [
            [
                "3c4c570a2f5ad214",
                "735079cce6fe051f",
                "78327d262f4b2133"
            ]
        ]
    },
    {
        "id": "2a75c15a621dcc4c",
        "type": "link call",
        "z": "bac88e4feb8bab3d",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 810,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "735079cce6fe051f",
        "type": "change",
        "z": "bac88e4feb8bab3d",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'Publish ' & msg.payload",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 120,
        "wires": [
            [
                "2a75c15a621dcc4c",
                "f05efffd73c83168"
            ]
        ]
    },
    {
        "id": "9dfbedb5f90985c2",
        "type": "catch",
        "z": "bac88e4feb8bab3d",
        "name": "",
        "scope": [
            "3c4c570a2f5ad214"
        ],
        "uncaught": false,
        "x": 790,
        "y": 240,
        "wires": [
            [
                "d3f7bceabc093354"
            ]
        ]
    },
    {
        "id": "d3f7bceabc093354",
        "type": "change",
        "z": "bac88e4feb8bab3d",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 200,
        "wires": [
            [
                "2a75c15a621dcc4c"
            ]
        ]
    },
    {
        "id": "f05efffd73c83168",
        "type": "debug",
        "z": "bac88e4feb8bab3d",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 320,
        "wires": []
    },
    {
        "id": "78327d262f4b2133",
        "type": "link out",
        "z": "bac88e4feb8bab3d",
        "name": "link out 19",
        "mode": "return",
        "links": [],
        "x": 755,
        "y": 60,
        "wires": []
    },
    {
        "id": "1966a0a3058cc40f",
        "type": "http request",
        "z": "61bc9ba532c143ca",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 230,
        "y": 180,
        "wires": [
            [
                "af05a74b2187be8a"
            ]
        ]
    },
    {
        "id": "2e4a12651ca65a7d",
        "type": "link in",
        "z": "61bc9ba532c143ca",
        "name": "link in rabbitmq api",
        "links": [],
        "x": 65,
        "y": 60,
        "wires": [
            [
                "e23273644aad2885"
            ]
        ]
    },
    {
        "id": "af05a74b2187be8a",
        "type": "link out",
        "z": "61bc9ba532c143ca",
        "name": "link out 1",
        "mode": "return",
        "links": [],
        "x": 175,
        "y": 240,
        "wires": []
    },
    {
        "id": "e23273644aad2885",
        "type": "function",
        "z": "61bc9ba532c143ca",
        "name": "set url",
        "func": "const path = msg.url;\nconst url = 'http://admin:pass@localhost:15672/api' + path;\nmsg.url = url;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 60,
        "wires": [
            [
                "1966a0a3058cc40f",
                "39836e8f3488f67a"
            ]
        ]
    },
    {
        "id": "0f69fae04798c822",
        "type": "change",
        "z": "61bc9ba532c143ca",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 140,
        "wires": [
            [
                "df3ce2745f8171c7"
            ]
        ]
    },
    {
        "id": "5e4b0481573b5619",
        "type": "catch",
        "z": "61bc9ba532c143ca",
        "name": "",
        "scope": [
            "1966a0a3058cc40f"
        ],
        "uncaught": false,
        "x": 770,
        "y": 200,
        "wires": [
            [
                "0f69fae04798c822"
            ]
        ]
    },
    {
        "id": "df3ce2745f8171c7",
        "type": "link call",
        "z": "61bc9ba532c143ca",
        "name": "",
        "links": [
            "992e1a45369732e3"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 790,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "39836e8f3488f67a",
        "type": "change",
        "z": "61bc9ba532c143ca",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "url",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 240,
        "y": 120,
        "wires": [
            [
                "df3ce2745f8171c7"
            ]
        ]
    },
    {
        "id": "9d8750f65038db75",
        "type": "function",
        "z": "08eda6c1b66e16e5",
        "name": "create vhost",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\n\nconst path = `/vhosts/${AW_VHOST}`;\n\nconst body = {\n    description: \"athens-water project\", \n    tags: \"athens,water\"\n};\n\nmsg.url = path;\nmsg.method = 'PUT';\nmsg.payload = body;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 120,
        "wires": [
            [
                "fc92ab505adc448e"
            ]
        ]
    },
    {
        "id": "fc92ab505adc448e",
        "type": "link call",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "0fa12d682a245aba"
            ]
        ]
    },
    {
        "id": "9d05317d2d3d7ad1",
        "type": "function",
        "z": "08eda6c1b66e16e5",
        "name": "retrieve vhost",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\n\nconst path = `/vhosts/${AW_VHOST}`;\n\nmsg.url = path;\nmsg.method = 'GET';\nmsg.payload = null;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 420,
        "wires": [
            [
                "bffd1ab283921d61"
            ]
        ]
    },
    {
        "id": "bffd1ab283921d61",
        "type": "link call",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 150,
        "y": 460,
        "wires": [
            [
                "22ea041ede3540cb"
            ]
        ]
    },
    {
        "id": "50a374ef88f9961b",
        "type": "function",
        "z": "08eda6c1b66e16e5",
        "name": "delete vhost",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\n\nconst path = `/vhosts/${AW_VHOST}`;\n\nmsg.url = path;\nmsg.method = 'DELETE';\nmsg.payload = null;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 400,
        "wires": [
            [
                "bcc2cbd5bc07d820"
            ]
        ]
    },
    {
        "id": "bcc2cbd5bc07d820",
        "type": "link call",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 830,
        "y": 440,
        "wires": [
            [
                "22ea041ede3540cb"
            ]
        ]
    },
    {
        "id": "f74f69771383e10e",
        "type": "inject",
        "z": "08eda6c1b66e16e5",
        "name": "go create vhost",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 60,
        "wires": [
            [
                "9d8750f65038db75"
            ]
        ]
    },
    {
        "id": "66c6ac0a31b83989",
        "type": "inject",
        "z": "08eda6c1b66e16e5",
        "name": "go retrieve vhost",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 360,
        "wires": [
            [
                "9d05317d2d3d7ad1"
            ]
        ]
    },
    {
        "id": "b15e9bf9306ba337",
        "type": "inject",
        "z": "08eda6c1b66e16e5",
        "name": "go delete vhost",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 680,
        "y": 60,
        "wires": [
            [
                "e95bf42cf5e47227"
            ]
        ]
    },
    {
        "id": "22ea041ede3540cb",
        "type": "debug",
        "z": "08eda6c1b66e16e5",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 540,
        "wires": []
    },
    {
        "id": "0fa12d682a245aba",
        "type": "function",
        "z": "08eda6c1b66e16e5",
        "name": "create exchange",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst AW_EXCHANGE = env.get( 'AW_EXCHANGE' );\n\nconst path = `/exchanges/${AW_VHOST}/${AW_EXCHANGE}`;\n\nconst body = {\n    type: \"direct\",\n    auto_delete: false, \n    durable: true, \n    internal: false, \n    arguments: {}   \n};\n\nmsg.url = path;\nmsg.method = 'PUT';\nmsg.payload = body;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 220,
        "wires": [
            [
                "f702bb7915c19f50"
            ]
        ]
    },
    {
        "id": "f702bb7915c19f50",
        "type": "link call",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "22ea041ede3540cb"
            ]
        ]
    },
    {
        "id": "24901ae9f7293c0c",
        "type": "function",
        "z": "08eda6c1b66e16e5",
        "name": "retrieve exchanges",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\n\nconst path = `/exchanges/${AW_VHOST}`;\n\nmsg.url = path;\nmsg.method = 'GET';\nmsg.payload = null;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 120,
        "wires": [
            [
                "9b2b051edc30dbe7"
            ]
        ]
    },
    {
        "id": "9b2b051edc30dbe7",
        "type": "link call",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 830,
        "y": 160,
        "wires": [
            [
                "29926587a615f050"
            ]
        ]
    },
    {
        "id": "29926587a615f050",
        "type": "split",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 790,
        "y": 220,
        "wires": [
            [
                "7eed5244245c2e69"
            ]
        ]
    },
    {
        "id": "f0a0b656105e894e",
        "type": "join",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 790,
        "y": 340,
        "wires": [
            [
                "50a374ef88f9961b"
            ]
        ]
    },
    {
        "id": "24e33f0cb14b29e8",
        "type": "link call",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 850,
        "y": 300,
        "wires": [
            [
                "f0a0b656105e894e"
            ]
        ]
    },
    {
        "id": "7eed5244245c2e69",
        "type": "function",
        "z": "08eda6c1b66e16e5",
        "name": "delete exchange",
        "func": "const { vhost, name } = msg.payload;\n\nconst path = `/api/exchanges/${vhost}/${name}`;\n\nconst body = null;\n\nmsg.url = path;\nmsg.method = 'DELETE';\nmsg.payload = body;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 260,
        "wires": [
            [
                "24e33f0cb14b29e8"
            ]
        ]
    },
    {
        "id": "e95bf42cf5e47227",
        "type": "function",
        "z": "08eda6c1b66e16e5",
        "name": "retrieve queues",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\n\nconst path = `/queues/${AW_VHOST}`;\n\nmsg.url = path;\nmsg.method = 'GET';\nmsg.payload = null;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 120,
        "wires": [
            [
                "aa9c519989dc1a09"
            ]
        ]
    },
    {
        "id": "aa9c519989dc1a09",
        "type": "link call",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 510,
        "y": 160,
        "wires": [
            [
                "1b548dfa71bdb5e0"
            ]
        ]
    },
    {
        "id": "75244b95c06fc39f",
        "type": "split",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 280,
        "wires": [
            [
                "8ed5938c462721ce"
            ]
        ]
    },
    {
        "id": "38084c3372b500a2",
        "type": "join",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 470,
        "y": 400,
        "wires": [
            [
                "24901ae9f7293c0c"
            ]
        ]
    },
    {
        "id": "c3b212b787f8d4e1",
        "type": "link call",
        "z": "08eda6c1b66e16e5",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 530,
        "y": 360,
        "wires": [
            [
                "38084c3372b500a2"
            ]
        ]
    },
    {
        "id": "8ed5938c462721ce",
        "type": "function",
        "z": "08eda6c1b66e16e5",
        "name": "delete queue",
        "func": "const { vhost, name } = msg.payload;\n\nconst path = `/api/queue/${vhost}/${name}`;\n\nconst body = null;\n\nmsg.url = path;\nmsg.method = 'DELETE';\nmsg.payload = body;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 320,
        "wires": [
            [
                "c3b212b787f8d4e1"
            ]
        ]
    },
    {
        "id": "1b548dfa71bdb5e0",
        "type": "function",
        "z": "08eda6c1b66e16e5",
        "name": "if no queues... else...",
        "func": "if ( msg.payload.length === 0 ) {\n    return [ msg, null ];\n}\nreturn [ null, msg ];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 220,
        "wires": [
            [
                "24901ae9f7293c0c"
            ],
            [
                "75244b95c06fc39f"
            ]
        ]
    },
    {
        "id": "9a30c7dfe3f94f88",
        "type": "debug",
        "z": "c05f2d05a65c769e",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 60,
        "wires": []
    },
    {
        "id": "94d7a80de5ca2315",
        "type": "function",
        "z": "c05f2d05a65c769e",
        "name": "retrieve users",
        "func": "const path = '/users'\nmsg.url = path;\nmsg.method = 'GET';\nmsg.payload = null;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 160,
        "wires": [
            [
                "82dab64868db30c4"
            ]
        ]
    },
    {
        "id": "82dab64868db30c4",
        "type": "link call",
        "z": "c05f2d05a65c769e",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "587a5f1a2f1cf992"
            ]
        ]
    },
    {
        "id": "587a5f1a2f1cf992",
        "type": "function",
        "z": "c05f2d05a65c769e",
        "name": "validate username",
        "func": "const { payload } = msg;\n//node.warn(payload);\n\nconst usernames = payload.map( x => x.name );\nconst { username } = msg.req.params;\n//node.warn(usernames);\n\nif (usernames.includes(username ) ) {\n    throw `Error from Athens-water. Invalid registration. Username ${username} not available.`;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 240,
        "wires": [
            [
                "20063f98b5c417ee"
            ]
        ]
    },
    {
        "id": "20063f98b5c417ee",
        "type": "function",
        "z": "c05f2d05a65c769e",
        "name": "validate keys",
        "func": "const AW_ROUTING_KEYS = env.get( 'AW_ROUTING_KEYS' );\nconst routingKeys = AW_ROUTING_KEYS.split( ',' );\n// node.warn(routingKeys);\n\nlet { keys } = msg.req.params;\n\nif ( keys === \"\" ) {\n        throw `Error from Athens-water. Invalid registration. No routing keys selected.`;\n}\n\nkeys = keys.split( ',' );\n// node.warn(keys);\n\nfor ( let key of keys ) {\n    if (!routingKeys.includes(key ) ) {\n        throw `Error from Athens-water. Invalid registration. Routing key '${key}' not available.`;\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 300,
        "wires": [
            [
                "5ec2a1163f0b1f92"
            ]
        ]
    },
    {
        "id": "5ec2a1163f0b1f92",
        "type": "function",
        "z": "c05f2d05a65c769e",
        "name": "create user",
        "func": "const { username, password } = msg.req.params;\nconst path = `/users/${username}`\n\nconst body = {\n    password: password,\n    tags: \"athenswater,consumer\"\n};\n\n//node.warn( body )\nmsg.url = path;\nmsg.method = 'PUT';\nmsg.payload = body;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 160,
        "wires": [
            [
                "e8b47afadef0ca81"
            ]
        ]
    },
    {
        "id": "e8b47afadef0ca81",
        "type": "link call",
        "z": "c05f2d05a65c769e",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 490,
        "y": 200,
        "wires": [
            [
                "fc67e870266bf62e"
            ]
        ]
    },
    {
        "id": "adaffe23485f51e8",
        "type": "http response",
        "z": "c05f2d05a65c769e",
        "name": "send response",
        "statusCode": "",
        "headers": {},
        "x": 840,
        "y": 340,
        "wires": []
    },
    {
        "id": "45f722efd22e620b",
        "type": "change",
        "z": "c05f2d05a65c769e",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 400,
        "wires": [
            [
                "adaffe23485f51e8"
            ]
        ]
    },
    {
        "id": "f8be82e938fa0cc9",
        "type": "catch",
        "z": "c05f2d05a65c769e",
        "name": "",
        "scope": [
            "587a5f1a2f1cf992",
            "20063f98b5c417ee"
        ],
        "uncaught": false,
        "x": 810,
        "y": 440,
        "wires": [
            [
                "45f722efd22e620b"
            ]
        ]
    },
    {
        "id": "dca4afaac3038c25",
        "type": "function",
        "z": "c05f2d05a65c769e",
        "name": "set response",
        "func": "const { username, keys  } = msg.req.params;\nmsg.statusCode = 200;\nmsg.payload = `Hello ${username} from Athens-water. Your registration is ok, you should be able receiving messages for ${keys} routing key(s).`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 720,
        "wires": [
            [
                "adaffe23485f51e8"
            ]
        ]
    },
    {
        "id": "fc67e870266bf62e",
        "type": "function",
        "z": "c05f2d05a65c769e",
        "name": "create queue",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nlet { username } = msg.req.params;\nconst queue = `queue.${username}`;\n\nconst path = `/queues/${AW_VHOST}/${queue}`;\n\nconst body = {\n    auto_delete: false,\n    durable: true,\n    arguments:{},\n    // node:\"rabbit@smacmullen\"\n};\n\nmsg.url = path;\nmsg.method = 'PUT';\nmsg.payload = body;\nmsg.queue =queue;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 260,
        "wires": [
            [
                "3b5ba1898af07606"
            ]
        ]
    },
    {
        "id": "3b5ba1898af07606",
        "type": "link call",
        "z": "c05f2d05a65c769e",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 490,
        "y": 300,
        "wires": [
            [
                "885f297ecf1a7ca0"
            ]
        ]
    },
    {
        "id": "848321ee6ffc42ed",
        "type": "function",
        "z": "c05f2d05a65c769e",
        "name": "create binding",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst { exchange, queue, routingKey } = msg.payload;\n\nconst path = `/bindings/${AW_VHOST}/e/${exchange}/q/${queue}`;\n\nconst body = {\n     routing_key: routingKey, \n    //  arguments: {\"x-arg\": \"value\"}\n};\n\nmsg.url = path;\nmsg.method = 'POST';\nmsg.payload = body;\nmsg.binding = undefined;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 460,
        "wires": [
            [
                "b46fc170c98ce15f"
            ]
        ]
    },
    {
        "id": "962dbdc9e5a425da",
        "type": "split",
        "z": "c05f2d05a65c769e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 450,
        "y": 400,
        "wires": [
            [
                "848321ee6ffc42ed"
            ]
        ]
    },
    {
        "id": "885f297ecf1a7ca0",
        "type": "function",
        "z": "c05f2d05a65c769e",
        "name": "define bindings",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst AW_EXCHANGE = env.get( 'AW_EXCHANGE' );\nlet { keys } = msg.req.params;\nkeys = keys.split( ',' );\nconst { queue } = msg;\n\nconst bindings = [];\nfor ( let routingKey of keys ) {\n    bindings.push( { \n        exchange: AW_EXCHANGE, \n        queue,\n        routingKey, \n    } );\n}\n\nmsg.payload = bindings;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 360,
        "wires": [
            [
                "962dbdc9e5a425da"
            ]
        ]
    },
    {
        "id": "edc75caa6a942ef3",
        "type": "join",
        "z": "c05f2d05a65c769e",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 450,
        "y": 560,
        "wires": [
            [
                "ae2c12177510f34f"
            ]
        ]
    },
    {
        "id": "b46fc170c98ce15f",
        "type": "link call",
        "z": "c05f2d05a65c769e",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 510,
        "y": 500,
        "wires": [
            [
                "edc75caa6a942ef3"
            ]
        ]
    },
    {
        "id": "ae2c12177510f34f",
        "type": "function",
        "z": "c05f2d05a65c769e",
        "name": "create permissions",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst { username } = msg.req.params;\n\nconst path = `/permissions/${AW_VHOST}/${username}`\nconst body = {\n    // configure: \".*\",\n    // write: \".*\",\n    // read: \".*\",\n    // read: `^queue.*.${username}$`,\n    configure: \"^$ \",\n    write: \"^$ \",\n    read: `queue.${username}`,\n};\n\nmsg.url = path;\nmsg.method = 'PUT';\nmsg.payload = body;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 620,
        "wires": [
            [
                "7c92b5d60b8c1c42"
            ]
        ]
    },
    {
        "id": "7c92b5d60b8c1c42",
        "type": "link call",
        "z": "c05f2d05a65c769e",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 490,
        "y": 660,
        "wires": [
            [
                "dca4afaac3038c25"
            ]
        ]
    },
    {
        "id": "32b655d779cb5bf8",
        "type": "http in",
        "z": "c05f2d05a65c769e",
        "name": "",
        "url": "/register",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "9a30c7dfe3f94f88",
                "e5d91bd27fac6bf7"
            ]
        ]
    },
    {
        "id": "e5d91bd27fac6bf7",
        "type": "change",
        "z": "c05f2d05a65c769e",
        "name": "set req.params",
        "rules": [
            {
                "t": "set",
                "p": "req.params",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 120,
        "y": 100,
        "wires": [
            [
                "94d7a80de5ca2315"
            ]
        ]
    },
    {
        "id": "f6e0d7bc799ed002",
        "type": "http in",
        "z": "caf565125e59062a",
        "name": "",
        "url": "/unregister/username/:username/password/:password",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 60,
        "wires": [
            [
                "bb7df6e8718b07b7",
                "d324e91b5e39b518"
            ]
        ]
    },
    {
        "id": "bb7df6e8718b07b7",
        "type": "debug",
        "z": "caf565125e59062a",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 60,
        "wires": []
    },
    {
        "id": "a211a7d5211cafab",
        "type": "http response",
        "z": "caf565125e59062a",
        "name": "send response",
        "statusCode": "",
        "headers": {},
        "x": 840,
        "y": 280,
        "wires": []
    },
    {
        "id": "d324e91b5e39b518",
        "type": "function",
        "z": "caf565125e59062a",
        "name": "retrieve users",
        "func": "const path = '/users'\nmsg.url = path;\nmsg.method = 'GET';\nmsg.payload = null;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 140,
        "wires": [
            [
                "3262c262f9d9fc9b"
            ]
        ]
    },
    {
        "id": "3262c262f9d9fc9b",
        "type": "link call",
        "z": "caf565125e59062a",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "f3e4619bb30501a9"
            ]
        ]
    },
    {
        "id": "f3e4619bb30501a9",
        "type": "function",
        "z": "caf565125e59062a",
        "name": "validate username",
        "func": "const { payload } = msg;\n//node.warn(payload);\n\nconst usernames = payload.map( x => x.name );\nconst { username } = msg.req.params;\n//node.warn(usernames);\n\nif (! usernames.includes(username ) ) {\n    throw `Error from Athens-water. User ${username} not exists.`;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 220,
        "wires": [
            [
                "1ad5c3e404d43eda"
            ]
        ]
    },
    {
        "id": "4e1f77a9616a6fbd",
        "type": "function",
        "z": "caf565125e59062a",
        "name": "create user",
        "func": "const { username } = msg.req.params;\n\nconst path = `/users/${username}`\nconst body = null;\n\nmsg.url = path;\nmsg.method = 'DELETE';\nmsg.payload = body;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 420,
        "wires": [
            [
                "5fd6cc1fbc5b81aa"
            ]
        ]
    },
    {
        "id": "5fd6cc1fbc5b81aa",
        "type": "link call",
        "z": "caf565125e59062a",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 490,
        "y": 460,
        "wires": [
            [
                "d2190fca0e60f2b1"
            ]
        ]
    },
    {
        "id": "abeaa50ce00c96cf",
        "type": "change",
        "z": "caf565125e59062a",
        "name": "set log message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error.message",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 340,
        "wires": [
            [
                "a211a7d5211cafab"
            ]
        ]
    },
    {
        "id": "542818c3b5acc0cf",
        "type": "catch",
        "z": "caf565125e59062a",
        "name": "",
        "scope": [
            "f3e4619bb30501a9",
            "8a552210a049ec13"
        ],
        "uncaught": false,
        "x": 810,
        "y": 380,
        "wires": [
            [
                "abeaa50ce00c96cf"
            ]
        ]
    },
    {
        "id": "d2190fca0e60f2b1",
        "type": "function",
        "z": "caf565125e59062a",
        "name": "set response",
        "func": "const { username  } = msg.req.params;\nmsg.statusCode = 200;\nmsg.payload = `User ${username} removed successfull from Athens-water.`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 520,
        "wires": [
            [
                "a211a7d5211cafab"
            ]
        ]
    },
    {
        "id": "ff6e2e737e3e4b65",
        "type": "function",
        "z": "caf565125e59062a",
        "name": "delete queue",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nlet { username } = msg.req.params;\nconst queue = `queue.${username}`;\n\nconst path = `/queues/${AW_VHOST}/${queue}`;\n\nconst body = null;\n\nmsg.url = path;\nmsg.method = 'DELETE';\nmsg.payload = body;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 320,
        "wires": [
            [
                "64081a0140c28b66"
            ]
        ]
    },
    {
        "id": "64081a0140c28b66",
        "type": "link call",
        "z": "caf565125e59062a",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 490,
        "y": 360,
        "wires": [
            [
                "4e1f77a9616a6fbd"
            ]
        ]
    },
    {
        "id": "eb0f4e73df5013d1",
        "type": "function",
        "z": "caf565125e59062a",
        "name": "delete binding",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst { source, destination, properties_key } = msg.payload;\n\nconst path = `/api/bindings/${AW_VHOST}/e/${source}/q/${destination}/${properties_key}`;\n\nconst body = null;\n\nmsg.url = path;\nmsg.method = 'DELETE';\nmsg.payload = body;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 180,
        "wires": [
            [
                "c9c50606bff10093"
            ]
        ]
    },
    {
        "id": "c4f06c18c0fe0a38",
        "type": "split",
        "z": "caf565125e59062a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 450,
        "y": 140,
        "wires": [
            [
                "eb0f4e73df5013d1"
            ]
        ]
    },
    {
        "id": "2ed36d42619b5f1d",
        "type": "join",
        "z": "caf565125e59062a",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 450,
        "y": 260,
        "wires": [
            [
                "ff6e2e737e3e4b65"
            ]
        ]
    },
    {
        "id": "c9c50606bff10093",
        "type": "link call",
        "z": "caf565125e59062a",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 510,
        "y": 220,
        "wires": [
            [
                "2ed36d42619b5f1d"
            ]
        ]
    },
    {
        "id": "4c153d3b2afe70f3",
        "type": "link call",
        "z": "caf565125e59062a",
        "name": "",
        "links": [
            "2e4a12651ca65a7d"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 130,
        "y": 320,
        "wires": [
            [
                "bb7df6e8718b07b7",
                "c4f06c18c0fe0a38"
            ]
        ]
    },
    {
        "id": "1ad5c3e404d43eda",
        "type": "function",
        "z": "caf565125e59062a",
        "name": "retreive bindings",
        "func": "const AW_VHOST = env.get( 'AW_VHOST' );\nconst { username } = msg.req.params;\nconst queue = `queue.${username}`;\n\nconst path = `/queues/${AW_VHOST}/${queue}/bindings`;\nmsg.url = path;\nmsg.method = 'GET';\nmsg.payload = null;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 120,
        "y": 280,
        "wires": [
            [
                "4c153d3b2afe70f3"
            ]
        ]
    },
    {
        "id": "5ba7fd1c9781115e",
        "type": "ui_chart",
        "z": "ccd26f1ff828de10",
        "name": "",
        "group": "41d8d96855cdf066",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 950,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "441a7c5c2047a421",
        "type": "ui_gauge",
        "z": "ccd26f1ff828de10",
        "name": "",
        "group": "41d8d96855cdf066",
        "order": 4,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "",
        "label": "levels",
        "format": "{{value}}",
        "min": "0",
        "max": "5",
        "colors": [
            "#8ff0a4",
            "#99c1f1",
            "#3584e4"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 950,
        "y": 180,
        "wires": []
    },
    {
        "id": "dee4de38b218b1c0",
        "type": "amqp-in",
        "z": "ccd26f1ff828de10",
        "name": "queue.user00",
        "broker": "774630f253d36966",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "athenswaterall",
        "exchangeType": "direct",
        "exchangeRoutingKey": "reservoirs,savings,production,water,weather",
        "exchangeDurable": true,
        "queueName": "queue.user00",
        "queueExclusive": false,
        "queueDurable": true,
        "queueAutoDelete": false,
        "headers": "{}",
        "x": 150,
        "y": 460,
        "wires": [
            [
                "2f2281cb86b35820"
            ]
        ]
    },
    {
        "id": "92e8ef7bded27706",
        "type": "ui_text",
        "z": "ccd26f1ff828de10",
        "group": "41d8d96855cdf066",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "last period:",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#62a0ea",
        "x": 970,
        "y": 60,
        "wires": []
    },
    {
        "id": "aead3c84386b0ff5",
        "type": "ui_text",
        "z": "ccd26f1ff828de10",
        "group": "41d8d96855cdf066",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "levels",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#62a0ea",
        "x": 950,
        "y": 220,
        "wires": []
    },
    {
        "id": "3287507fc47fad3b",
        "type": "ui_text",
        "z": "ccd26f1ff828de10",
        "group": "41d8d96855cdf066",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "quantity",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#62a0ea",
        "x": 960,
        "y": 140,
        "wires": []
    },
    {
        "id": "f93ba8c01d27bd43",
        "type": "change",
        "z": "ccd26f1ff828de10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.period",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 60,
        "wires": [
            [
                "92e8ef7bded27706"
            ]
        ]
    },
    {
        "id": "c02aa1441502416e",
        "type": "change",
        "z": "ccd26f1ff828de10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.savingsAvg",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 100,
        "wires": [
            [
                "5ba7fd1c9781115e"
            ]
        ]
    },
    {
        "id": "1e4a1a72c682a826",
        "type": "change",
        "z": "ccd26f1ff828de10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.savingsRepr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 140,
        "wires": [
            [
                "3287507fc47fad3b"
            ]
        ]
    },
    {
        "id": "3368e70968a06115",
        "type": "change",
        "z": "ccd26f1ff828de10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.level",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 180,
        "wires": [
            [
                "441a7c5c2047a421"
            ]
        ]
    },
    {
        "id": "76a77b86506a0f8d",
        "type": "change",
        "z": "ccd26f1ff828de10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.levelRepr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 220,
        "wires": [
            [
                "aead3c84386b0ff5"
            ]
        ]
    },
    {
        "id": "2f2281cb86b35820",
        "type": "function",
        "z": "ccd26f1ff828de10",
        "name": "switch by key",
        "func": "const { savings, production, water, weather, reservoirs } = msg.payload;\n\nif ( savings !== undefined ) {\n    msg.payload = savings;\n    return [ msg, null, null, null, null ];\n}\n\nif ( production !== undefined ) {\n    msg.payload = production;\n    return [ null, msg, null, null, null ];\n}\n\nif ( water !== undefined ) {\n    msg.payload = water;\n    return [ null, null, msg, null, null ];\n}\n\nif ( weather !== undefined ) {\n    msg.payload = weather;\n    return [ null, null, null, msg, null ];\n}\n\nif ( reservoirs !== undefined ) {\n    msg.payload = reservoirs;\n    return [ null, null, null, null, msg ];\n}\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 460,
        "wires": [
            [
                "c02aa1441502416e",
                "1e4a1a72c682a826",
                "3368e70968a06115",
                "76a77b86506a0f8d",
                "f93ba8c01d27bd43"
            ],
            [
                "c29c5bd06b41ed33",
                "2d1210931583467a",
                "cb53568fa1f01553",
                "d037fadf82248bc2",
                "276dfbee0c492bed"
            ],
            [
                "cf5d0468eef80313",
                "ed23dadad2a6b44b",
                "e0b18fbefacd36b9",
                "96c0fa9db08ca859",
                "13913b31e8315170"
            ],
            [
                "c3f854349ff40320",
                "1b769a440f19fd80",
                "5cc799d19558d5b8",
                "150d10e58bd82af4",
                "b862f6f8e5eb5bab"
            ],
            [
                "5c4075558bfa1515"
            ]
        ]
    },
    {
        "id": "5cd93f4d4a55cfaa",
        "type": "ui_chart",
        "z": "ccd26f1ff828de10",
        "name": "",
        "group": "e9dadc9b91976a6c",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 950,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "45be40ebf604959a",
        "type": "ui_gauge",
        "z": "ccd26f1ff828de10",
        "name": "",
        "group": "e9dadc9b91976a6c",
        "order": 4,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "",
        "label": "levels",
        "format": "{{value}}",
        "min": "0",
        "max": "5",
        "colors": [
            "#8ff0a4",
            "#99c1f1",
            "#3584e4"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 950,
        "y": 400,
        "wires": []
    },
    {
        "id": "d7ec77da6f1d0b94",
        "type": "ui_text",
        "z": "ccd26f1ff828de10",
        "group": "e9dadc9b91976a6c",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "last period:",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#62a0ea",
        "x": 970,
        "y": 280,
        "wires": []
    },
    {
        "id": "64c140c65780481f",
        "type": "ui_text",
        "z": "ccd26f1ff828de10",
        "group": "e9dadc9b91976a6c",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "levels",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#62a0ea",
        "x": 950,
        "y": 440,
        "wires": []
    },
    {
        "id": "53dca47acc23c475",
        "type": "ui_text",
        "z": "ccd26f1ff828de10",
        "group": "e9dadc9b91976a6c",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "quantity",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#62a0ea",
        "x": 960,
        "y": 360,
        "wires": []
    },
    {
        "id": "c29c5bd06b41ed33",
        "type": "change",
        "z": "ccd26f1ff828de10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.period",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 280,
        "wires": [
            [
                "d7ec77da6f1d0b94"
            ]
        ]
    },
    {
        "id": "2d1210931583467a",
        "type": "change",
        "z": "ccd26f1ff828de10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.productionAvg",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 320,
        "wires": [
            [
                "5cd93f4d4a55cfaa"
            ]
        ]
    },
    {
        "id": "cb53568fa1f01553",
        "type": "change",
        "z": "ccd26f1ff828de10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.productionRepr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 360,
        "wires": [
            [
                "53dca47acc23c475"
            ]
        ]
    },
    {
        "id": "d037fadf82248bc2",
        "type": "change",
        "z": "ccd26f1ff828de10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.level",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 400,
        "wires": [
            [
                "45be40ebf604959a"
            ]
        ]
    },
    {
        "id": "276dfbee0c492bed",
        "type": "change",
        "z": "ccd26f1ff828de10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.levelRepr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 440,
        "wires": [
            [
                "64c140c65780481f"
            ]
        ]
    },
    {
        "id": "edfe8d74ff905c2c",
        "type": "ui_chart",
        "z": "ccd26f1ff828de10",
        "name": "",
        "group": "f9e106f2f849bd54",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 950,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "476025eec9744b33",
        "type": "ui_gauge",
        "z": "ccd26f1ff828de10",
        "name": "",
        "group": "f9e106f2f849bd54",
        "order": 4,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "",
        "label": "levels",
        "format": "{{value}}",
        "min": "0",
        "max": "5",
        "colors": [
            "#8ff0a4",
            "#99c1f1",
            "#3584e4"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 950,
        "y": 620,
        "wires": []
    },
    {
        "id": "73cfb66f30c3a3d4",
        "type": "ui_text",
        "z": "ccd26f1ff828de10",
        "group": "f9e106f2f849bd54",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "last period:",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#62a0ea",
        "x": 970,
        "y": 500,
        "wires": []
    },
    {
        "id": "cea06905dfe435bd",
        "type": "ui_text",
        "z": "ccd26f1ff828de10",
        "group": "f9e106f2f849bd54",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "levels",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#62a0ea",
        "x": 950,
        "y": 660,
        "wires": []
    },
    {
        "id": "6b47ac1abe0e2737",
        "type": "ui_text",
        "z": "ccd26f1ff828de10",
        "group": "f9e106f2f849bd54",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "ratio",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#62a0ea",
        "x": 950,
        "y": 580,
        "wires": []
    },
    {
        "id": "cf5d0468eef80313",
        "type": "change",
        "z": "ccd26f1ff828de10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.period",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 500,
        "wires": [
            [
                "73cfb66f30c3a3d4"
            ]
        ]
    },
    {
        "id": "ed23dadad2a6b44b",
        "type": "change",
        "z": "ccd26f1ff828de10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.ratio",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 540,
        "wires": [
            [
                "edfe8d74ff905c2c"
            ]
        ]
    },
    {
        "id": "e0b18fbefacd36b9",
        "type": "change",
        "z": "ccd26f1ff828de10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "msg.payload.ratioRepr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 580,
        "wires": [
            [
                "6b47ac1abe0e2737"
            ]
        ]
    },
    {
        "id": "96c0fa9db08ca859",
        "type": "change",
        "z": "ccd26f1ff828de10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.level",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 620,
        "wires": [
            [
                "476025eec9744b33"
            ]
        ]
    },
    {
        "id": "13913b31e8315170",
        "type": "change",
        "z": "ccd26f1ff828de10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.levelRepr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 660,
        "wires": [
            [
                "cea06905dfe435bd"
            ]
        ]
    },
    {
        "id": "16f63a59ffab8366",
        "type": "ui_chart",
        "z": "ccd26f1ff828de10",
        "name": "",
        "group": "98353c4bdf751f2b",
        "order": 2,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 950,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "c10de22470904b09",
        "type": "ui_gauge",
        "z": "ccd26f1ff828de10",
        "name": "",
        "group": "98353c4bdf751f2b",
        "order": 4,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "",
        "label": "levels",
        "format": "{{value}}",
        "min": "0",
        "max": "5",
        "colors": [
            "#8ff0a4",
            "#99c1f1",
            "#3584e4"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 950,
        "y": 840,
        "wires": []
    },
    {
        "id": "e5432d8c4e1743ff",
        "type": "ui_text",
        "z": "ccd26f1ff828de10",
        "group": "98353c4bdf751f2b",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "last period:",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#62a0ea",
        "x": 970,
        "y": 720,
        "wires": []
    },
    {
        "id": "35bc5902a7c39318",
        "type": "ui_text",
        "z": "ccd26f1ff828de10",
        "group": "98353c4bdf751f2b",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "levels",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#62a0ea",
        "x": 950,
        "y": 880,
        "wires": []
    },
    {
        "id": "73da2a7870cdcec3",
        "type": "ui_text",
        "z": "ccd26f1ff828de10",
        "group": "98353c4bdf751f2b",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "precipitation",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": 16,
        "color": "#62a0ea",
        "x": 970,
        "y": 800,
        "wires": []
    },
    {
        "id": "c3f854349ff40320",
        "type": "change",
        "z": "ccd26f1ff828de10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.period",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 720,
        "wires": [
            [
                "e5432d8c4e1743ff"
            ]
        ]
    },
    {
        "id": "1b769a440f19fd80",
        "type": "change",
        "z": "ccd26f1ff828de10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.precipitationSum",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 760,
        "wires": [
            [
                "16f63a59ffab8366"
            ]
        ]
    },
    {
        "id": "5cc799d19558d5b8",
        "type": "change",
        "z": "ccd26f1ff828de10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "msg.payload.precipitationRepr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 800,
        "wires": [
            [
                "73da2a7870cdcec3"
            ]
        ]
    },
    {
        "id": "150d10e58bd82af4",
        "type": "change",
        "z": "ccd26f1ff828de10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.level",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 840,
        "wires": [
            [
                "c10de22470904b09"
            ]
        ]
    },
    {
        "id": "b862f6f8e5eb5bab",
        "type": "change",
        "z": "ccd26f1ff828de10",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.levelRepr",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 880,
        "wires": [
            [
                "35bc5902a7c39318"
            ]
        ]
    },
    {
        "id": "5c4075558bfa1515",
        "type": "worldmap",
        "z": "ccd26f1ff828de10",
        "name": "Reservoirs map",
        "lat": "38.43",
        "lon": "22.87",
        "zoom": "9",
        "layer": "OSMG",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "false",
        "coords": "none",
        "showgrid": "false",
        "showruler": "false",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "DR,CO,RA,DN",
        "maplist": "OSMG,OSMC,EsriC,EsriS,UKOS",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 780,
        "y": 940,
        "wires": []
    },
    {
        "id": "e082748426ba99c2",
        "type": "ui_form",
        "z": "ccd26f1ff828de10",
        "name": "registration form",
        "label": "",
        "group": "4afc52cffe622b4e",
        "order": 1,
        "width": "0",
        "height": "0",
        "options": [
            {
                "label": "Username",
                "value": "username",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            },
            {
                "label": "key - savings",
                "value": "key_savings",
                "type": "checkbox",
                "required": false,
                "rows": null
            },
            {
                "label": "key - reservoirs",
                "value": "key_reservoirs",
                "type": "checkbox",
                "required": false,
                "rows": null
            },
            {
                "label": "key -production",
                "value": "key_production",
                "type": "checkbox",
                "required": false,
                "rows": null
            },
            {
                "label": "key - water",
                "value": "key_water",
                "type": "checkbox",
                "required": false,
                "rows": null
            },
            {
                "label": "key - weather",
                "value": "key_weather",
                "type": "checkbox",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "username": "",
            "password": "",
            "key_savings": false,
            "key_reservoirs": false,
            "key_production": false,
            "key_water": false,
            "key_weather": false
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": false,
        "className": "",
        "x": 160,
        "y": 60,
        "wires": [
            [
                "98404f332384b914"
            ]
        ]
    },
    {
        "id": "677aac7b512d788e",
        "type": "ui_text",
        "z": "ccd26f1ff828de10",
        "group": "4afc52cffe622b4e",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "registration result",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "14",
        "color": "#9a9996",
        "x": 170,
        "y": 240,
        "wires": []
    },
    {
        "id": "98404f332384b914",
        "type": "function",
        "z": "ccd26f1ff828de10",
        "name": "prepare request",
        "func": "const { \n    username, \n    password,\n    key_savings,\n    key_reservoirs,\n    key_production,\n    key_water,\n    key_weather\n} = msg.payload;\n\nlet keys = [];\n\nif ( key_savings ) keys.push( 'savings' );\nif ( key_reservoirs ) keys.push( 'reservoirs' );\nif ( key_production ) keys.push( 'production' );\nif ( key_water ) keys.push( 'water' );\nif ( key_weather ) keys.push( 'weather' );\n\nkeys = keys.join( ',' );\n\nmsg.url = 'localhost:1880/register';\nmsg.method = 'POST';\nmsg.headers={\n    'Content-Type': 'application/json'\n};\nmsg.payload = { username, password, keys };\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 120,
        "wires": [
            [
                "56ba7cfbd915e7ee"
            ]
        ]
    },
    {
        "id": "56ba7cfbd915e7ee",
        "type": "http request",
        "z": "ccd26f1ff828de10",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 150,
        "y": 180,
        "wires": [
            [
                "677aac7b512d788e"
            ]
        ]
    }
]